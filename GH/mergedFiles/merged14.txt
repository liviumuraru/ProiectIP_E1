C:\Users\flori\Documents\ProiectIP_E1\GH\git\crawler_video\src\main\java\hunantv\HunanSpider.java
package hunantv;

import tools.VideoPipeline;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.selector.Json;

/**
 * Created by yongqiang on 2015/3/25.
 */
public class HunanSpider implements PageProcessor {
    private Site stie = Site.me().setRetryTimes(3).setTimeOut(5000).setSleepTime(100).addHeader("accept-encoding", "utf-8, deflate")
            .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36")
            .addHeader("Accept-Language", "en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2");

    private final String Player = "http://v\\.api\\.hunantv\\.com\\w*";
    private final String Play = "http://www\\.hunantv\\.com\\w*";
    private final String cdn = "http://pcvcr\\.cdn\\.imgo\\.tv\\/ncrs\\w*";
    private final String pcvideows = "http://pcvideows\\.imgo\\.tv\\w*";

    @Override
    public void process(Page page) {

        if (page.getUrl().regex(Play).match()) {
            page.addTargetRequest("http://v.api.hunantv.com/player/video?video_id=" + page.getHtml().regex("vid:\\s(\\d+)"));
        }
        if (page.getUrl().regex(Player).match()) {
            Json json=page.getJson();
            int info = json.jsonPath(".data.stream").all().size();
            page.addTargetRequest(new Request(json.jsonPath(".data.stream[" + (info - 1) + "].url").toString()).putExtra("videoName",json.jsonPath(".data.info.title")));
        }
        if (page.getUrl().regex(cdn).match()){
            Json json=page.getJson();
            page.putField(page.getRequest().getExtra("videoName").toString()
                    ,new Request(json.jsonPath(".info").toString()+"?wshc_tag=1").putExtra("videoName",page.getRequest().getExtra("videoName")));
        }
    }

    @Override
    public Site getSite() {
        return stie;
    }

    public static void main(String[] args) {
        Spider.create(new HunanSpider()).addUrl("http://www.hunantv.com/v/1/1/f/1123276.html")
                .addPipeline(new ConsolePipeline())
                .addPipeline(new VideoPipeline("./target",false,"hunantv"))
                .run();
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\crawler_video\src\main\java\sohu\SohuSpider.java
package sohu;

import tools.VideoPipeline;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.selector.Json;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by only. on 2015/1/12.
 */
public class SohuSpider implements PageProcessor {
    private Site site = Site.me().setRetryTimes(3).setTimeOut(5000).setSleepTime(100).addCookie(".tv.sohu.com", "isJump", "0");
    private String MOVIE_LIST = "http://so\\.tv\\.sohu\\.com\\/list\\w+";
    private String MOVIE_HOME = "http://tv\\.sohu\\.com\\/item\\/\\w+";
    private String MOVIE_URL = "http://tv\\.sohu\\.com\\/\\w+\\/\\w+\\.shtml";
    private String MOVIE_URL_ALL = "http://pl.hd.sohu.com/videolist";
    private String DOWNLOAD_URL = "http://hot\\.vrs\\.sohu\\.com\\/\\w+";


    @Override
    public void process(Page page) {
        if (page.getUrl().regex(MOVIE_LIST).match()) {
            page.addTargetRequests(page.getHtml().xpath("//div[@class='ssPages area']/a/@href").all());
            page.addTargetRequests(page.getHtml().xpath("//strong/a/@href").all());
        }

        if (page.getUrl().regex(MOVIE_HOME).match()) {
            String link = page.getHtml().xpath("//a[@class='btn-playFea']/@href").toString();
            //获取电影名称加入请求中
            page.addTargetRequest(new Request(link).putExtra("videoName", page.getHtml().xpath("//span[@class='vname']/text()").toString()));
        }

        if (page.getUrl().regex(MOVIE_URL).match()) {
            if (page.getRequest().getExtra("videoName") == null) {
                //获取电影名称加入请求中
                page.getRequest().putExtra("videoName", page.getHtml().xpath("//meta[@name='album']/@content"));
            }
            String link = "http://hot.vrs.sohu.com/vrs_flash.action?vid=" + page.getHtml().regex("vid=\"(\\d*)").toString() + "&bw=2048";//&af=1";
            //获取电影名称加入请求中
            page.addTargetRequest(new Request(link).putExtra("videoName", page.getRequest().getExtra("videoName")).putExtra("vid", page.getHtml().regex("vid=\"(\\d*)").toString()));

            String plLink = "http://pl.hd.sohu.com/videolist?playlistid=" + page.getHtml().regex("playlistId=\"(\\d*)");
            //获取电影名称加入请求中
            page.addTargetRequest(new Request(plLink).putExtra("videoName", page.getRequest().getExtra("videoName")));

        }

        if (page.getUrl().regex(MOVIE_URL_ALL).match()) {

            for (String link : page.getJson().jsonPath(".videos.pageUrl").all()) {
                page.addTargetRequest(new Request(link).putExtra("videoName", page.getRequest().getExtra("videoName")));
            }

        }

        if (page.getUrl().regex(DOWNLOAD_URL).match()) {
            String vid = getHighId(page.getJson());
            if (page.getRequest().getExtra("vid").equals(vid)) {
                List videoUrl = page.getJson().jsonPath(".data.su").all();
                String videoName = page.getJson().jsonPath(".data.tvName").toString();
                List<Request> dowmlaods = new ArrayList<Request>();
                for (int i = 0; i < videoUrl.size(); i++) {
                    String link = "http://202.98.156.30/sohu.vodnew.lxdns.com/sohu/s26h23eab6" + videoUrl.get(i);
                    dowmlaods.add(new Request(link).putExtra("videoName", page.getRequest().getExtra("videoName")).putExtra("subsection", "第" + i + "段:"));
                }
                page.putField(videoName, dowmlaods);
            } else {
                page.addTargetRequest(new Request("http://hot.vrs.sohu.com/vrs_flash.action?vid=" + vid + "&bw=2048").putExtra("vid", vid)
                        .putExtra("videoName", page.getRequest().getExtra("videoName")));
            }
        }


    }

    @Override
    public Site getSite() {
        return site;
    }

    private String getHighId(Json json) {
        String result = null;
        if (!json.jsonPath(".oriVid").toString().equals("0")) {
            result = json.jsonPath(".oriVid").toString();
        } else if (!json.jsonPath(".superVid").toString().equals("0")) {
            result = json.jsonPath(".superVid").toString();
        } else if (!json.jsonPath(".highVid").toString().equals("0")) {
            result = json.jsonPath(".highVid").toString();
        } else if (!json.jsonPath(".norVid").toString().equals("0")) {
            result = json.jsonPath(".norVid").toString();
        }
        return result;
    }

    public static void main(String[] args) {

        Spider.create(new SohuSpider())
                .addUrl("http://tv.sohu.com/item/MjE1Nzgx.html")
//                .addUrl("http://tv.sohu.com/item/MTE5NzY3OA==.html")
//                .addUrl("http://so.tv.sohu.com/list_p1101_p2_p3_u7f8e_u5267_p4-1_p5_p6_p73_p80_p91_p101_p11_p12_p130.html")
//                .addPipeline(new ConsolePipeline())
//                .addPipeline(new PutFiles("./target/videoList/"))
                .addPipeline(new VideoPipeline("./target",true,"sohu")).run();
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\crawler_video\src\main\java\tools\Download.java
package tools;

import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.protocol.HttpContext;
import us.codecraft.webmagic.Request;

import javax.swing.*;
import java.io.*;

/**
 * Created by yongqiang on 2015/3/6.
 */
public class Download extends Thread {
    private final CloseableHttpClient httpClient;
    private final HttpContext context;
    private final HttpGet httpget;
    private String downloadPath = null;
    private File filePath = null;
    private String videoName = null;
    private String fileType=".";

    public Download(Request request, String directory, String videoName, boolean subsection,String platform) {
        this.httpClient = HttpClients.createDefault();
        this.context = HttpClientContext.create();
        this.httpget = new HttpGet(request.getUrl().toString());
        setHeader(request,platform);
        this.videoName = videoName + getSubsection(request, subsection);
        checkSubsection(directory + "/");
        downloadPath = directory + "/" + this.videoName.replaceAll(":", "") + ".mp4";
    }

    private void loading(InputStream in, OutputStream out, double fileSize) {
        byte[] buffer = new byte[4096];
        int readLength = 0;
        double downloadSize = 0;
        try {
            while ((readLength = in.read(buffer)) > 0) {
                downloadSize += readLength;
                out.write(buffer, 0, readLength);
                out.flush();
                System.out.print('\r');
                System.out.print(videoName + "\t" + String.format("%.2f", downloadSize / fileSize * 100) + "%");
            }
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }


    private String getSubsection(Request request, boolean subsection) {
        String result = " ";
        if (subsection){
            result=  request.getExtra("subsection").toString();
        }
        return result ;
    }
    private void setHeader(Request request,String paltform){
        if(paltform.equals("hunantv")){
        this.httpget.addHeader("Referer",request.getUrl().toString());}
    }
    private double getFileSize(CloseableHttpResponse response) {
        double fileSize = Long.valueOf(response.getHeaders("Content-Length")[0].getValue());
        return fileSize;
    }

    private void checkSubsection(String directory) {
        filePath = new File(directory);
        if (filePath.exists() == false) {
            filePath.mkdirs();
        }
    }

    private boolean checkFilesExists(String path, double fileSize) {
        boolean result = true;
        try {
            if (new File(path).exists()) {
                InputStream in = new FileInputStream(new File(path));
                if (in.available() == fileSize) {
                    in.close();
                    result = false;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }

    public void run() {
        try {
            CloseableHttpResponse response = httpClient.execute(httpget, context);
            try {
                System.out.println(response.getLastHeader("Content-Disposition"));
                if (response.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity1 = response.getEntity();
                    if (entity1 != null) {
                        if (checkFilesExists(downloadPath, getFileSize(response))) {
                            if (entity1.getContentLength() != -1) {
                                loading(entity1.getContent(), new FileOutputStream(new File(downloadPath)), getFileSize(response));
                            } else {
                                System.out.println("get connect length is -1");
                            }
                        } else {
                            System.out.println("jump is" + videoName);
                        }

                    } else {
                        System.out.println("not response deta");
                    }

                } else {
                    System.out.println("page status code  not 200");
                }
            } finally {
                response.close();
            }
        } catch (ClientProtocolException ex) {
            // Handle protocol errors
            System.out.println(ex.toString());
        } catch (IOException ex) {
            // Handle I/O errors
            System.out.println(ex.toString());
        }
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\crawler_video\src\main\java\tools\PutFiles.java
package tools;

import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.utils.FilePersistentBase;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Map;

/**
 * Created by only. on 2015/3/2.
 */
public class PutFiles extends FilePersistentBase implements Pipeline {
    /**
     * create a PutFiles with default path"/data/webmagic/"
     */
    public PutFiles() {
        setPath("/data/webmagic/");
    }

    public PutFiles(String path) {
        setPath(path);
    }

    @Override
    public void process(ResultItems resultItems, Task task) {
        try {
            PrintWriter printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(getFile(getPath()
                    + resultItems.getRequest().getExtra("videoName").toString() + ".txt"), true), "UTF-8"));

            for (Map.Entry<String, Object> entry : resultItems.getAll().entrySet()) {
                if (entry.getValue() instanceof Iterable) {
                    Iterable value = (Iterable) entry.getValue();
                    printWriter.println(entry.getKey());
                    for (Object o : value) {
                        printWriter.println(((Request) o).getExtra("subsection") + ((Request) o).getUrl());
                    }
                } else {
                    printWriter.println(entry.getKey() + ":\t" + entry.getValue());
                }
            }
            printWriter.close();
        } catch (IOException e) {

        }
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\crawler_video\src\main\java\tools\VideoPipeline.java
package tools;

import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.utils.FilePersistentBase;

import java.util.Map;

/**
 * Created by only. on 2015/3/3.
 */
public class VideoPipeline extends FilePersistentBase implements Pipeline {
    private String directory = null;
    private boolean subsection = false;
    private String platform;

    /**
     * create a PutFiles with default path"/data/webmagic/"
     */
    public VideoPipeline(boolean subsection,String platform) {
        setPath("/data/video/");
        this.subsection=subsection;
        this.platform=platform;
    }

    public VideoPipeline(String path,boolean subsection,String platform) {
        setPath(path);
        this.subsection=subsection;
        this.platform=platform;
    }

    public void process(ResultItems resultItems, Task task) {
        directory = resultItems.getRequest().getExtra("videoName").toString();
        Download download = null;
        for (Map.Entry<String, Object> entry : resultItems.getAll().entrySet()) {
            if (entry.getValue() instanceof Iterable) {
                Iterable value = (Iterable) entry.getValue();
                for (Object o : value) {
                    try {
                        download = new Download((Request) o, getPath() + directory, entry.getKey(),subsection,platform);
                        download.start();
                        download.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            } else {
                try {
                    download = new Download((Request) entry.getValue(), getPath() + directory, entry.getKey(),subsection,platform);
                    download.start();
                    download.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

