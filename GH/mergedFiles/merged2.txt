https://github.com/gitminingOrg/DataCrawler.git
git/DataCrawler

16000091

28232508

package analysis;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bson.Document;

import utility.MongoInfo;
import utility.MysqlInfo;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class RepoInfo {
	public static String languages = "java,Ruby,Python,C,JavaScript,Perl,PHP,C++,HTML"
			+ ",Shell，Objective-C,VimL,C#,Emacs Lisp,Erlang,Lua,Clojure,CSS,Haskell,"
			+ "Scala,Common Lisp,R";
	public static void main(String[] args) throws Exception {
		RepoInfo repoInfo = new RepoInfo();
//		repoInfo.getRepo();
//		System.out.println("repo!!!!!!!!!");
////		repoInfo.getContribution();
////		System.out.println("getContribution!!");
////		repoInfo.getCollaborators();
////		System.out.println("getCollaborators!!");
//		repoInfo.analyseLanguage();
//		System.out.println("analyseLanguage!!");
//		repoInfo.getIssueAndPull();
//		System.out.println("getIssueAndPull!!");
//		repoInfo.analyseContributors();
//		System.out.println("analyseContributors!!");
//		repoInfo.analyseCollaborators();
//		System.out.println("analyseCollaborators!!");
//		repoInfo.getCommitCount();
//		System.out.println("getCommitCount!!");
////		repoInfo.updateScore();
////		System.out.println("updateScore!!");
////		repoInfo.generateTag();
////		repoInfo.generateRepoTagStub();
////		repoInfo.calculateRepoSimilarity();
//		repoInfo.language_stat();
//		repoInfo.type_stat();
//		repoInfo.year_stat();
		repoInfo.analysisClasses();
	}
	
	public void getIssueAndPull() throws Exception{
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),27017);
		MongoDatabase database = mongoClient.getDatabase("ghcrawlerV3");
		FindIterable<Document> issueIterable = database.getCollection(
				"issueandpull").find();
		Connection connection = MysqlInfo.getMysqlConnection();
		connection.setAutoCommit(false);
		String sql = "update repotest set open_issues = ?,closed_issues = ?,open_pull=?,closed_pull=? where full_name = ?";
		PreparedStatement stmt = connection.prepareStatement(sql);
		JsonParser parser = new JsonParser();
		for (Document document : issueIterable) {
			String json = document.toJson();
			JsonObject repoIssue = parser.parse(json).getAsJsonObject();
			int openIssue = repoIssue.get("openissue").getAsInt();
			int closedIssue = repoIssue.get("closedissue").getAsInt();
			int openPull = repoIssue.get("openpull").getAsInt();
			int closedPull = repoIssue.get("closedpull").getAsInt();
			String repoName = repoIssue.get("fn").getAsString();
			System.out.println(repoName);
			stmt.setInt(1, openIssue);
			stmt.setInt(2, closedIssue);
			stmt.setInt(3, openPull);
			stmt.setInt(4, closedPull);
			stmt.setString(5, repoName);
			
			stmt.execute();
		}
		connection.commit();
		connection.close();
		mongoClient.close();
	}

	/**
	 * fetch the repo info from mongo to mysql
	 * 
	 * @throws Exception
	 */
	public void getRepo() throws Exception {
		// fetch from mongo
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),
				27017);
		MongoDatabase database = mongoClient.getDatabase("ghcrawlerV3");
		FindIterable<Document> repoIterable = database.getCollection(
				"repository").find();

		// get mysql connection
		Connection connection = MysqlInfo.getMysqlConnection();
		// refresh update time
		String updateSql = "update updatetime set repo_update_time = ?";
		PreparedStatement updateStmt = connection.prepareStatement(updateSql);
		Date time = Calendar.getInstance().getTime();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		updateStmt.setString(1, sdf.format(time));
		updateStmt.execute();
		
		connection.setAutoCommit(false);
		String sql = "replace into repotest(id,full_name,description,fork,owner_id,owner_name,owner_type,create_time,push_time,update_time,stargazers,subscribers,fork_num,size,hot,mature,popular,nb,gitclone_url,github_url,language) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
		//String sql = "replace into repotest(id,full_name,description,fork,owner_id,owner_name,owner_type,create_time,push_time,update_time,stargazers,subscribers,fork_num,size,hot,mature,popular,nb) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";

		PreparedStatement stmt = connection.prepareStatement(sql);

		JsonParser parser = new JsonParser();
		for (Document document : repoIterable) {
			String json = document.toJson();
			JsonObject repoJsonObject = parser.parse(json).getAsJsonObject();
			int id = repoJsonObject.get("id").getAsInt();
			System.out.println(id);
			stmt.setInt(1, id);
			
			String full_Name = repoJsonObject.get("full_name").getAsString();
			System.out.println(full_Name);
			stmt.setString(2, full_Name);
			
			String description = "";
			if(repoJsonObject.has("description") && !repoJsonObject.get("description").isJsonNull()){
				description = repoJsonObject.get("description")
						.getAsString();
			}
			stmt.setString(3, description);
			
			boolean fork = repoJsonObject.get("fork").getAsBoolean();
			int forkNum = fork ? 1 : 0;
			stmt.setInt(4, forkNum);
			
			int owner_id = repoJsonObject.get("owner").getAsJsonObject()
					.get("id").getAsInt();
			stmt.setInt(5, owner_id);
			
			String[] items = full_Name.split("/");
			String owner_name = items[0];
			stmt.setString(6, owner_name);
			
			String ownerType = repoJsonObject.get("owner").getAsJsonObject()
					.get("type").getAsString();
			int ot_num = 1;
			if (ownerType.equals("Organization")) {
				ot_num = 2;
			}
			stmt.setInt(7, ot_num);
			
			String createTime = repoJsonObject.get("created_at").getAsString();
			stmt.setString(8, createTime);
			
			String pushTime = "";
			if (repoJsonObject.has("pushed_at")
					&& !repoJsonObject.get("pushed_at").isJsonNull()) {
				pushTime = repoJsonObject.get("pushed_at").getAsString();
			}
			stmt.setString(9, pushTime);
			
			String updateTime = repoJsonObject.get("updated_at").getAsString();
			stmt.setString(10, updateTime);
			
			int starCount = repoJsonObject.get("stargazers_count").getAsInt();
			stmt.setInt(11, starCount);
			
			int subscriber = repoJsonObject.get("subscribers_count").getAsInt();
			stmt.setInt(12, subscriber);
			
			int forksCount = repoJsonObject.get("forks_count").getAsInt();
			stmt.setInt(13, forksCount);
			
			int size = repoJsonObject.get("size").getAsInt();
			stmt.setInt(14, size);		
			
			int hot = (int)(Math.log10(starCount)*2.5);
			if(hot>10){
				hot=10;
			}
			stmt.setInt(15, hot);	
			int mature = (int)(Math.log10(forksCount)*2.5);
			if(mature>10){
				mature = 10;
			}
			stmt.setInt(16, mature);	
			
			int popular = (int)(Math.log10(subscriber)*2.5);
			if(popular>10){
				popular = 10;
			}
			stmt.setInt(17, popular);	
			
			int nb = (int)(Math.log10(size)*2.5);
			if(nb>10){
				nb = 10;
			}
			stmt.setInt(18, nb);
			
			String gitclone_url = repoJsonObject.get("clone_url").getAsString();
			stmt.setString(19, gitclone_url);
			
			String github_url = repoJsonObject.get("html_url").getAsString();
			stmt.setString(20, github_url);
			
			String language = "unknown";
			if(!repoJsonObject.get("language").isJsonNull()){
				language = repoJsonObject.get("language").getAsString();
			}
			
			stmt.setString(21, language);
			stmt.execute();
		}
		connection.commit();
		stmt.close();
		connection.close();
		mongoClient.close();
	}

	public void getContribution() throws Exception {
		//get mysql connection
		Connection connection = MysqlInfo.getMysqlConnection();
		connection.setAutoCommit(false);
		String conSql = "insert into contribution(user_id,repo_id) values(?,?);";
		PreparedStatement conStmt = connection.prepareStatement(conSql);
		String repoSql = "update repotest set contributor = ? where id = ?";
		PreparedStatement repoStmt = connection.prepareStatement(repoSql);
		
		//get repos from mongo
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),
				27017);
		MongoDatabase database = mongoClient.getDatabase("ghcrawlerV3");
		FindIterable<Document> repoIterable = database
				.getCollection("repo").find();
		JsonParser parser = new JsonParser();
		Map<String, Integer> repoMap = new HashMap<String, Integer>();
		for (Document document : repoIterable) {
			String json = document.toJson();
			JsonObject repoJsonObject = parser.parse(json).getAsJsonObject();
			int id = repoJsonObject.get("id").getAsInt();
			String full_name = repoJsonObject.get("full_name").getAsString();
			System.out.println(id);
			repoMap.put(full_name, id);
		}

		Map<Integer,Integer> contributorMap = new HashMap<Integer, Integer>();
		
		FindIterable<Document> contributeIterable = database.getCollection(
				"contributors").find();
		for (Document document : contributeIterable) {
			String json = document.toJson();
			JsonObject contriJsonObject = parser.parse(json).getAsJsonObject();
			int id = contriJsonObject.get("id").getAsInt();
			String repoName = contriJsonObject.get("fn").getAsString();
			int repo_id = repoMap.get(repoName);
			conStmt.setInt(1, id);
			conStmt.setInt(2, repo_id);
			conStmt.execute();
			
			if(contributorMap.containsKey(repo_id)){
				contributorMap.put(repo_id, contributorMap.get(repo_id)+1);
			}else{
				contributorMap.put(repo_id, 1);
			}
		}
		
		Set<Integer> keySet = contributorMap.keySet();
		for (Integer repoId : keySet) {
			int contri_count = contributorMap.get(repoId);
			repoStmt.setInt(1, contri_count);
			repoStmt.setInt(2, repoId);
			repoStmt.execute();
		}
		
		mongoClient.close();
		connection.commit();
		conStmt.close();
		repoStmt.close();
		connection.close();
	}

	public void getCollaborators() throws Exception {
		//get mysql connection
		Connection connection = MysqlInfo.getMysqlConnection();
		connection.setAutoCommit(false);
		String conSql = "insert into collaborator(user_id,repo_id) values(?,?);";
		PreparedStatement conStmt = connection.prepareStatement(conSql);
		String repoSql = "update repotest set collaborator = ? where id = ?";
		PreparedStatement repoStmt = connection.prepareStatement(repoSql);
		
		//get repos from mongo
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),
				27017);
		MongoDatabase database = mongoClient.getDatabase("ghcrawlerV3");
		FindIterable<Document> repoIterable = database
				.getCollection("repo").find();
		JsonParser parser = new JsonParser();
		Map<String, Integer> repoMap = new HashMap<String, Integer>();
		for (Document document : repoIterable) {
			String json = document.toJson();
			JsonObject repoJsonObject = parser.parse(json).getAsJsonObject();
			int id = repoJsonObject.get("id").getAsInt();
			String full_name = repoJsonObject.get("full_name").getAsString();
			System.out.println(id);
			repoMap.put(full_name, id);
		}

		Map<Integer,Integer> collaboratorMap = new HashMap<Integer, Integer>();
		
		FindIterable<Document> collaboratorIterable = database.getCollection(
				"assignees").find();
		for (Document document : collaboratorIterable) {
			String json = document.toJson();
			JsonObject contriJsonObject = parser.parse(json).getAsJsonObject();
			int id = contriJsonObject.get("id").getAsInt();
			String repoName = contriJsonObject.get("fn").getAsString();
			int repo_id = repoMap.get(repoName);
			conStmt.setInt(1, id);
			conStmt.setInt(2, repo_id);
			conStmt.execute();
			
			if(collaboratorMap.containsKey(repo_id)){
				collaboratorMap.put(repo_id, collaboratorMap.get(repo_id)+1);
			}else{
				collaboratorMap.put(repo_id, 1);
			}
		}
		
		Set<Integer> keySet = collaboratorMap.keySet();
		for (Integer repoId : keySet) {
			int contri_count = collaboratorMap.get(repoId);
			repoStmt.setInt(1, contri_count);
			repoStmt.setInt(2, repoId);
			repoStmt.execute();
		}
		
		mongoClient.close();
		connection.commit();
		conStmt.close();
		repoStmt.close();
		connection.close();
	}
	
	
	public void analyseLanguage() throws Exception {
		//get mysql connection
		Connection connection = MysqlInfo.getMysqlConnection();
		connection.setAutoCommit(false);
		String lanSql = "insert into language(repo_id,language,count) values(?,?,?);";
		PreparedStatement lanStmt = connection.prepareStatement(lanSql);
		String repoSql = "update repotest set language = ? where id = ?";
		PreparedStatement repoStmt = connection.prepareStatement(repoSql);
		
		//get repos from mongo
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),
				27017);
		MongoDatabase database = mongoClient.getDatabase("ghcrawlerV3");
		FindIterable<Document> repoIterable = database
				.getCollection("repo").find();
		JsonParser parser = new JsonParser();
		Map<String, Integer> repoMap = new HashMap<String, Integer>();
		for (Document document : repoIterable) {
			String json = document.toJson();
			JsonObject repoJsonObject = parser.parse(json).getAsJsonObject();
			int id = repoJsonObject.get("id").getAsInt();
			String full_name = repoJsonObject.get("full_name").getAsString();
			System.out.println(id);
			repoMap.put(full_name, id);
		}

		Map<Integer,String> languageMap = new HashMap<Integer, String>();
		//the most language line of each repo
		Map<Integer,Integer> lanNumMap = new HashMap<Integer, Integer>();
		
		FindIterable<Document> collaboratorIterable = database.getCollection(
				"languages").find();
		for (Document document : collaboratorIterable) {
			String json = document.toJson();
			String[] items = json.split(",")[1].split(":");
			String language = items[0].trim().replaceAll("\"", "");
			int num = Integer.parseInt(items[1].trim());
			
			System.out.println(language +"\t" + num);
			JsonObject lanJsonObject = parser.parse(json).getAsJsonObject();
			String repoName = lanJsonObject.get("fn").getAsString();
			int repo_id = repoMap.get(repoName);
			
			if(lanNumMap.containsKey(repo_id)){
				if(num>=lanNumMap.get(repo_id)){
					languageMap.put(repo_id, language);
					lanNumMap.put(repo_id, num);
				}
			}else{
				languageMap.put(repo_id, language);
				lanNumMap.put(repo_id, num);				
			}
			lanStmt.setInt(1, repo_id);
			lanStmt.setString(2, language);
			lanStmt.setInt(3, num);
			lanStmt.execute();
		}
		
		Set<Integer> keySet = languageMap.keySet();
		for (Integer repoId : keySet) {
			String language = languageMap.get(repoId);
			repoStmt.setString(1, language);
			repoStmt.setInt(2, repoId);
			repoStmt.execute();
		}
		
		mongoClient.close();
		connection.commit();
		lanStmt.close();
		repoStmt.close();
		connection.close();
	}
	public void analyseContributors() throws Exception {
		Connection connection = MysqlInfo.getMysqlConnection();
		
		String groupSql = "select repo_id,count(*) AS contributors from contribution group by `repo_id`;";
		PreparedStatement stmt = connection.prepareStatement(groupSql);
		ResultSet resultSet = stmt.executeQuery();
		connection.setAutoCommit(false);
		while (resultSet.next()) {
			int repo_id = resultSet.getInt("repo_id");
			int contributors = resultSet.getInt("contributors");
			String sql = "update repotest set contributor = ? where id =?";
			stmt = connection.prepareStatement(sql);
			stmt.setInt(1, contributors);
			stmt.setInt(2, repo_id);
			stmt.execute();
		}
		connection.commit();
		stmt.close();
		connection.close();
	}
	
	public void analyseCollaborators() throws Exception {
		Connection connection = MysqlInfo.getMysqlConnection();
		
		String groupSql = "select repo_id,count(*) AS collaborators from collaborator group by `repo_id`;";
		PreparedStatement stmt = connection.prepareStatement(groupSql);
		ResultSet resultSet = stmt.executeQuery();
		connection.setAutoCommit(false);
		while (resultSet.next()) {
			int repo_id = resultSet.getInt("repo_id");
			int collaborators = resultSet.getInt("collaborators");
			String sql = "update repotest set collaborator = ? where id =?";
			stmt = connection.prepareStatement(sql);
			stmt.setInt(1, collaborators);
			stmt.setInt(2, repo_id);
			stmt.execute();
		}
		
		connection.commit();
		stmt.close();
		connection.close();
	}
	
	
	public void getCommitCount() throws Exception{

		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),27017);
		MongoDatabase database = mongoClient.getDatabase("ghcrawlerV3");
		FindIterable<Document> issueIterable = database.getCollection(
				"commitnumber").find();
		Connection connection = MysqlInfo.getMysqlConnection();
		connection.setAutoCommit(false);
		JsonParser parser = new JsonParser();
		for (Document document : issueIterable) {
			String json = document.toJson();
			JsonObject repoJsonObject = parser.parse(json).getAsJsonObject();
			int commit = repoJsonObject.get("commitnumber").getAsInt();
			String full_name = repoJsonObject.get("fn").getAsString();
			System.out.println(full_name);
			String sql = "update repotest set commit = ? where full_name = ?";
			PreparedStatement stmt = connection.prepareStatement(sql);
			stmt.setInt(1, commit);
			stmt.setString(2, full_name);
			stmt.execute();
		}
		
		connection.commit();
		connection.close();
		mongoClient.close();
	}
	
	public void updateScore() throws Exception{
		Connection connection = MysqlInfo.getMysqlConnection();
		String sql = "select * from repotest";
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		connection.setAutoCommit(false);
		while (resultSet.next()) {
			int repo_id = resultSet.getInt("id");
			int hot = resultSet.getInt("hot");
			int mature = resultSet.getInt("mature");
			int popular = resultSet.getInt("popular");
			int nb = resultSet.getInt("nb");
			int contributor = (int) Math.min(10, Math.log10(resultSet.getInt("contributor")) *2.5);	
			int size = (int) Math.min(10, Math.log10(resultSet.getInt("size")) *2.5);
			int update = 10;
			int release = 10;
			int total = (hot+mature+popular+nb+contributor+size+update+release)/8;
			
			String insertSql = "replace into reposcore values(?,?,?,?,?,?,?,?,?,?)";
			stmt = connection.prepareStatement(insertSql);
			stmt.setInt(1, repo_id);
			stmt.setInt(2, hot);
			stmt.setInt(3, mature);
			stmt.setInt(4, popular);
			stmt.setInt(5, nb);
			stmt.setInt(6, contributor);
			stmt.setInt(7, size);
			stmt.setInt(8, update);
			stmt.setInt(9, release);
			stmt.setInt(10, total);
			stmt.execute();
		}
		connection.commit();
		connection.close();
	}
	
	public void generateTag() throws Exception{
		String sql = "replace into tag(node_id,name,weight) values(?,?,?);";
		Connection connection = MysqlInfo.getMysqlConnection();
		PreparedStatement stmt = connection.prepareStatement(sql);
		char init = 'A'-1;
		for (int i = 0; i <= 25; i++) {
			init++;
			String typeName = "type"+init;
			int node_id = i;
			char subInit = 'a'-1;
			int weight = (int) (Math.random()*10);
			
			stmt.setString(1, Integer.toString(node_id));
			stmt.setString(2, typeName);
			stmt.setInt(3, weight);
			stmt.execute();
			for (int j = 0; j <= 10; j++) {
				subInit++;
				String subType = typeName+subInit;
				String node = i+"."+j;
				weight = (int) (Math.random()*10);
				
				stmt.setString(1, node);
				stmt.setString(2, subType);
				stmt.setInt(3, weight);
				stmt.execute();
			}
		}
		stmt.close();
		connection.close();
	}
	
	public void generateRepoTagStub() throws Exception{
		String sql = "select id from repotest";
		Connection connection = MysqlInfo.getMysqlConnection();
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		connection.setAutoCommit(false);
		String insertSql = "replace into repo_tag(repo_id,tag_id) values(?,?);";
		stmt = connection.prepareStatement(insertSql);
		
		while(resultSet.next()){
			int repo_id = resultSet.getInt("id");
			for (int i = 0; i < 10; i++) {
				int random = (int)(Math.random() * 312);
				stmt.setInt(1, repo_id);
				stmt.setInt(2, random);
				stmt.execute();
			}
			
		}
		connection.commit();
		stmt.close();
		connection.close();
	}
	
	public void calculateRepoSimilarity() throws Exception{
		String sql = "select * from repo_tag order by repo_id,tag_id";
		ArrayList<RepoTagPair> repoTagPairs = new ArrayList<RepoTagPair>();
		Connection connection = MysqlInfo.getMysqlConnection();
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		while (resultSet.next()) {
			int id = resultSet.getInt("id");
			int repo_id = resultSet.getInt("repo_id");
			int tag_id = resultSet.getInt("tag_id");
			RepoTagPair repoTagPair = new RepoTagPair();
			repoTagPair.setId(id);
			repoTagPair.setRepo_id(repo_id);
			repoTagPair.setTag_id(tag_id);
			repoTagPairs.add(repoTagPair);
		}
		Map<Integer,List<Integer>> repoTagMap = new HashMap<Integer, List<Integer>>();
		for (RepoTagPair repoTagPair : repoTagPairs) {
			if(!repoTagMap.containsKey(repoTagPair.getRepo_id())){
				List<Integer> list = new ArrayList<Integer>();
				list.add(repoTagPair.getTag_id());
				repoTagMap.put(repoTagPair.getRepo_id(), list);
			}else{
				List<Integer> list = repoTagMap.get(repoTagPair.getRepo_id());
				list.add(repoTagPair.getTag_id());
			}
		}

		//compare tags of different repos
		HashMap<Integer,ArrayList<RepoPairRelation>> matrix = new HashMap<Integer, ArrayList<RepoPairRelation>>();
		Set<Integer> keySet = repoTagMap.keySet();
		int c = 0;
		for (Integer integer : keySet) {
			List<Integer> values1 = repoTagMap.get(integer);
			matrix.put(integer, new ArrayList<RepoPairRelation>());
			for (Integer integer2 : keySet) {
				RepoPairRelation repoPairRelation=new RepoPairRelation(integer, integer2, 0);
				int count = 0;
				List<Integer> values2 = repoTagMap.get(integer2);
				int index1 = 0, index2 = 0;
				while(index1<values1.size() && index2<values2.size()){
					if(values1.get(index1).equals(values2.get(index2))){
						count++;
						index1++;index2++;
					}else if(values1.get(index1)<values2.get(index2)){
						index1++;
					}else{
						index2++;
					}
				}
				repoPairRelation.setRelation_score(count);
				matrix.get(integer).add(repoPairRelation);
			}
		}	
		connection.setAutoCommit(false);
		keySet = matrix.keySet();
		System.out.println("haha");
		FileWriter fw = new FileWriter("relate.txt",true);
		BufferedWriter bw = new BufferedWriter(fw);
		for (Integer id : keySet) {
			ArrayList<RepoPairRelation> relations = matrix.get(id);
			for (RepoPairRelation repoPairRelation : relations) {
				int repo_id = repoPairRelation.getRepo_id();
				int relate_repo_id = repoPairRelation.getRepo_relate_id();
				System.out.println(repo_id +" " + relate_repo_id);
				if(repo_id == relate_repo_id){
					continue;
				}
				int similar = repoPairRelation.getRelation_score();
				bw.write(repo_id+"\t"+relate_repo_id+"\t"+similar+"\n");
//				String insertsql = "insert into repo_similar values(?,?,?)";
//				stmt = connection.prepareStatement(insertsql);
//				stmt.setInt(1, repo_id);
//				stmt.setInt(2, relate_repo_id);
//				stmt.setInt(3, similar);
//				stmt.execute();
			}
		}
		bw.flush();
		bw.close();
		fw.close();
		connection.commit();
		stmt.close();
		connection.close();
	}
	
	public void language_stat() throws Exception{
		String sql = "select count(*) AS count, language from language group by language order by count desc;";
		Connection connection = MysqlInfo.getMysqlConnection();
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		Map<String,Integer> maps = new HashMap<String, Integer>();
		int others = 0;
		while(resultSet.next()){
			String language = resultSet.getString("language");
			int count = resultSet.getInt("count");
			if(languages.contains(language)){
				maps.put(language, count);
			}else{
				others+=count;
			}
		}
		maps.put("others", others);
		
		String insertSql = "replace into language_stat values(?,?)";
		connection.setAutoCommit(false);
		stmt = connection.prepareStatement(insertSql);
		Set<String> keys = maps.keySet();
		for (String key : keys) {
			stmt.setString(1, key);
			stmt.setInt(2, maps.get(key));
			stmt.execute();
		}
		connection.commit();
	}

	public void type_stat() throws Exception{
		String sql = "select count(*) AS count, t.name AS type from tag t, repo_tag rt where t.id = rt.tag_id group by type;";
		Connection connection = MysqlInfo.getMysqlConnection();
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		Map<String,Integer> maps = new HashMap<String, Integer>();
		
		while(resultSet.next()){
			String type = resultSet.getString("type");
			int count = resultSet.getInt("count");
			if(type.length() <= 5){
				maps.put(type, count);
			}
		}
		
		String insertSql = "replace into type_stat values(?,?)";
		connection.setAutoCommit(false);
		stmt = connection.prepareStatement(insertSql);
		Set<String> keys = maps.keySet();
		for (String key : keys) {
			stmt.setString(1, key);
			stmt.setInt(2, maps.get(key));
			stmt.execute();
		}
		connection.commit();
	}

	public void year_stat() throws Exception{
		String sql = "select count(*) AS count, substr(create_time,1,4) AS year from repotest group by year;";
		Connection connection = MysqlInfo.getMysqlConnection();
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		Map<Integer,Integer> maps = new HashMap<Integer, Integer>();
		
		while(resultSet.next()){
			int year = Integer.parseInt(resultSet.getString("year"));
			int count = resultSet.getInt("count");
			maps.put(year, count);
		}
		
		String insertSql = "replace into year_stat values(?,?)";
		connection.setAutoCommit(false);
		stmt = connection.prepareStatement(insertSql);
		Set<Integer> keys = maps.keySet();
		for (Integer key : keys) {
			stmt.setInt(1, key);
			stmt.setInt(2, maps.get(key));
			stmt.execute();
		}
		connection.commit();
	}
	
	public void analysisClasses() throws Exception{
//		Map<String,Integer> wordMap = new HashMap<String, Integer>();
//		String sql = "select description from repotest";
//		Connection connection = MysqlInfo.getMysqlConnection();
//		PreparedStatement stmt = connection.prepareStatement(sql);
//		ResultSet resultSet = stmt.executeQuery();
//		while (resultSet.next()) {
//			String description = resultSet.getString("description");
//			String[] items = description.split(" ");
//			for (String item : items) {
//				if(!wordMap.containsKey(item)){
//					wordMap.put(item, 1);
//				}else{
//					wordMap.put(item, wordMap.get(item)+1);
//					System.out.println(item+"---------------");
//				}
//			}
//		}
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection repo = db.getCollection("repository");
		DBCursor repos = repo.find();
		repos.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		
		while(repos.hasNext()){
			DBObject object = repos.next();
			if(object.get("description") != null){
				//System.out.println(object.get("description").toString().replaceAll("[^a-zA-Z'0-9]", " ").replaceAll("\\s+", " "));
				String description = object.get("description").toString().replaceAll("[^a-zA-Z0-9]", " ").replaceAll("\\s+", " ");
				for(int i = 0 ; i < description.split(" ").length ; i ++){
					String word = description.split(" ")[i].toLowerCase();
					if(map.containsKey(word)){
						map.put(word, map.get(word) + 1);
					}else{
						map.put(word, 1);
					}
				}
			}
		}

		Connection connection = MysqlInfo.getMysqlConnection();
		String sqlInsert = "replace into word values(?,?)";
		Set<String> words = map.keySet();
		connection.setAutoCommit(false);
		for (String word : words) {
			int count = map.get(word);
			if(count < 2){
				continue;
			}
			PreparedStatement stmt = connection.prepareStatement(sqlInsert);
			stmt.setString(1, word);
			stmt.setInt(2, count);
			stmt.execute();
			stmt.close();
		}
		connection.commit();		
		connection.close();
	}
	
	public void ohno() throws Exception{
		String sql = "select * from word";
		String insertSQL = "insert into tag(node_id,name,weight) values(?,?,?)";
		Connection connection = MysqlInfo.getMysqlConnection();
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		
		while(resultSet.next()){
			String name = resultSet.getString("word");
			int count = resultSet.getInt("count");
			String node = "0";
			PreparedStatement stmt2 = connection.prepareStatement(insertSQL);
			stmt2.setString(1, node);
			stmt2.setString(2, name);
			stmt2.setInt(3, count);
			stmt2.execute();
			stmt2.close();
		}
		stmt.close();
		connection.close();
	}
	
	public void addRepoTag() throws Exception{
		Map<String,Integer> map = new HashMap<String, Integer>();
		Connection connection = MysqlInfo.getMysqlConnection();
		String tagSQL = "select id,name from tag";
		PreparedStatement stmt = connection.prepareStatement(tagSQL);
		ResultSet resultSet = stmt.executeQuery();
		while (resultSet.next()) {
			String name = resultSet.getString("name");
			int id = resultSet.getInt("id");
			map.put(name,id);
		}
		resultSet.close();
		Set<String> types = map.keySet();
		
		String insertSQL = "insert into repo_tag(repo_id,tag_id) values(?,?)";
		String sql = "select id,description from repotest";
		stmt = connection.prepareStatement(sql);
		ResultSet resultSet2 = stmt.executeQuery();
		
		while (resultSet2.next()) {
			int id = resultSet2.getInt("id");
			String description = resultSet2.getString("description");
			for (String type : types) {
				if(description.contains(type)){
					PreparedStatement stmt2 = connection.prepareStatement(insertSQL);
					stmt2.setInt(1, id);
					stmt2.setInt(2, map.get(type));
					stmt2.execute();
					stmt2.close();
				}
			}

		}
		resultSet2.close();
		stmt.close();
		connection.close();
	}
	
}

package analysis;

public class RepoPairRelation {
	int repo_id;
	int repo_relate_id;
	int relation_score;
	public int getRepo_id() {
		return repo_id;
	}
	public void setRepo_id(int repo_id) {
		this.repo_id = repo_id;
	}
	public int getRepo_relate_id() {
		return repo_relate_id;
	}
	public void setRepo_relate_id(int repo_relate_id) {
		this.repo_relate_id = repo_relate_id;
	}
	public int getRelation_score() {
		return relation_score;
	}
	public void setRelation_score(int relation_score) {
		this.relation_score = relation_score;
	}
	public RepoPairRelation(int repo_id, int repo_relate_id, int relation_score) {
		super();
		this.repo_id = repo_id;
		this.repo_relate_id = repo_relate_id;
		this.relation_score = relation_score;
	}
}

package analysis;

public class RepoTagPair {
	private int id;
	private int repo_id;
	private int tag_id;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getRepo_id() {
		return repo_id;
	}
	public void setRepo_id(int repo_id) {
		this.repo_id = repo_id;
	}
	public int getTag_id() {
		return tag_id;
	}
	public void setTag_id(int tag_id) {
		this.tag_id = tag_id;
	}
	
}

package analysis;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.bson.Document;

import utility.MongoInfo;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class TestUser {
	private static Log log = LogFactory.getLog(TestUser.class.getName());
	private static String[] types = { "CommitCommentEvent", "CreateEvent",
			"DeleteEvent", "DeploymentEvent", "DeploymentStatusEvent",
			"DownloadEvent", "FollowEvent", "ForkEvent", "ForkApplyEvent",
			"GistEvent", "GollumEvent", "IssueCommentEvent", "IssueEvent",
			"MemberEvent", "MembershipEvent", "PageBuildEvent", "PublicEvent",
			"PullRequestEvent", "PullRequestReviewCommentEvent", "PushEvent",
			"ReleaseEvent", "RepositoryEvent", "StatusEvent", "TeamAddEvent",
			"WatchEvent" };
	//get the active time of all repositories,25 types of events

	public static void main(String[] args) {
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),
				27017);
		MongoDatabase eventsDatabase = mongoClient.getDatabase("historyevents");
		FindIterable<Document> eventFindIterable = eventsDatabase
				.getCollection("spec_events").find();
		Map<Integer,int[]> items = new HashMap<Integer,int[]>();
		for (Document document : eventFindIterable) {
			String json = document.toJson();
			JsonParser parser = new JsonParser();
			JsonObject event = parser.parse(json).getAsJsonObject();
			String type = event.get("type").getAsString();
			int repoId = 0;
			if(event.has("repo")){
				repoId = event.get("repo").getAsJsonObject().get("id").getAsInt();
			}else if(event.has("repository")){
				repoId = event.get("repository").getAsJsonObject().get("id").getAsInt();
			}
			int index = 0;
			for (int i = 0; i < types.length; i++) {
				if(type.equals(types[i])){
					index = i;
					System.out.println(type);
				}
			}
			if(!items.containsKey(repoId)){
				System.out.println(repoId);
				int[] numbers = new int[types.length];
				numbers[index] = 1;
				items.put(repoId, numbers);
			}else{
				int[] numbers = items.get(repoId);
				numbers[index]++;
			}

		}

		try{
			FileWriter fw = new FileWriter("event_data",true);
			BufferedWriter bw = new BufferedWriter(fw);
			
			Set<Integer> keys = items.keySet();
			for (Integer key : keys) {
				String line = ""+key+"\t";
				int[] nums = items.get(key);
				for (int i : nums) {
					line += i +"\t";
				}
				line+="\n";
				bw.write(line);
			}
			bw.flush();
			bw.close();
			fw.close();
		}catch(Exception e){
			e.printStackTrace();
		}
		mongoClient.close();
//		IssueCommentEvent
//		PullRequestReviewCommentEvent
//		GollumEvent
//		WatchEvent
//		MemberEvent
	}

}

package analysis;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

import org.bson.Document;

import utility.MongoInfo;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class UserChart {
	public static void main(String[] args){
		try{
			MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),27017);
			MongoDatabase database = mongoClient.getDatabase("testUser2");
			FindIterable<Document> doIterable = database.getCollection("user").find();
			
//			File file = new File("userData.txt");
//			FileWriter fw = new FileWriter(file,true);
//			BufferedWriter bw = new BufferedWriter(fw);
//			bw.write("[");
			boolean start = false;
			for (Document document : doIterable) {
				String item = "";
				JsonParser parser = new JsonParser();
				JsonObject json = parser.parse(document.toJson()).getAsJsonObject();
				int repo_count = json.get("public_repos").getAsInt();
				int follow_count = json.get("followers").getAsInt();
				String login = json.get("login").getAsString();
				String type = json.get("type").getAsString();
				int id = json.get("id").getAsInt();
				if(start){
					item = ",";
				}
				item +="["+repo_count+","+follow_count+"]";
				if(repo_count != 0 && follow_count != 0){
//					bw.write(item);
					start=true;
				}
				
				if(follow_count > 1000){
					System.out.println(login + "\t" + id + "\t" + follow_count + "\t" + repo_count+"\t"+type);
				}
				
			}
			
//			bw.write("]");
//			bw.flush();
//			bw.close();
//			fw.close();
			mongoClient.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
}

package analysis;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.bson.Document;

import userInfoFetch.FetchOrgMembers;
import utility.MongoInfo;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class UserInfo {
	public static void main(String[] args) throws Exception{
		UserInfo info = new UserInfo();
		info.getUserBasicInfo();
	}
	public void getUserBasicInfo() {
		try {
			Connection connection = getMysqlConnection();
			connection.setAutoCommit(false);
			MongoClient mongoClient = new MongoClient(
					MongoInfo.getMongoServerIp(), 27017);
			MongoDatabase database = mongoClient.getDatabase("ghcrawlerV3");
			FindIterable<Document> userIterable = database
					.getCollection("user").find();

			JsonParser parser = new JsonParser();
			for (Document document : userIterable) {
				String json = document.toJson();
				JsonObject user = parser.parse(json).getAsJsonObject();
				String login = user.get("login").getAsString();
				int id = user.get("id").getAsInt();
				String type = user.get("type").getAsString();
				boolean admin = user.get("site_admin").getAsBoolean();
				int admin_num = admin ? 1 : 0;
				String name = null;
				if (!user.get("name").isJsonNull()) {
					name = user.get("name").getAsString();
				}

				String company = null;
				if (!user.get("company").isJsonNull()) {
					company = user.get("company").getAsString();
				}

				String blog = null;
				if (!user.get("blog").isJsonNull()) {
					blog = user.get("blog").getAsString();
				}

				String location = null;
				if (!user.get("location").isJsonNull()) {
					location = user.get("location").getAsString();
				}

				String email = null;
				if (!user.get("email").isJsonNull()) {
					email = user.get("email").getAsString();
				}

				String hireable = null;
				if (!user.get("hireable").isJsonNull()) {
					hireable = user.get("hireable").getAsString();
				}

				String bio = null;
				if (!user.get("bio").isJsonNull()) {
					bio = user.get("bio").getAsString();
				}

				int repos = user.get("public_repos").getAsInt();
				int gists = user.get("public_gists").getAsInt();

				int followers = user.get("followers").getAsInt();
				int following = user.get("following").getAsInt();

				String createDate = user.get("created_at").getAsString();
				String updateDate = user.get("updated_at").getAsString();
				

				
				String sql = "insert into usertest values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE hireable='true';";
				PreparedStatement stmt = connection.prepareStatement(sql);
				System.out.println(id);
				stmt.setInt(1, id);
				stmt.setString(2, login);
				stmt.setString(3, type);
				stmt.setInt(4, admin_num);
				stmt.setString(5, name);
				stmt.setString(6, company);
				stmt.setString(7, blog);
				stmt.setString(8, location);
				stmt.setString(9, email);
				stmt.setString(10, hireable);
				stmt.setString(11, bio);
				stmt.setInt(12, repos);
				stmt.setInt(13, gists);
				stmt.setInt(14, followers);
				stmt.setInt(15, following);
				stmt.setString(16, createDate);
				stmt.setString(17, updateDate);
				
				stmt.execute();

			}
			mongoClient.close();
			connection.commit();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void getOrgs(){
		try {
			Connection connection = getMysqlConnection();
			String sql = "select * from usertest where type = ?";
			PreparedStatement stmt = connection.prepareStatement(sql);
			stmt.setString(1, "Organization");
			ResultSet resultSet = stmt.executeQuery();
			int index = 0;
			while(resultSet.next()){
				index++;
				int id = resultSet.getInt("id");
				String login = resultSet.getString("login");
				String name = resultSet.getString("name");
				String company = resultSet.getString("company");
				System.out.println(id + "\t" + login+"\t"+name+"\t"+company);
				
				String sqlInsert = "INSERT INTO orgtest VALUES (?,?,?,?)";
				PreparedStatement stmtInsert = connection.prepareStatement(sqlInsert);
				stmtInsert.setInt(1, id);
				stmtInsert.setString(2, login);
				stmtInsert.setString(3, name);
				stmtInsert.setString(4, company);
				stmtInsert.execute();
			}
			System.out.println(index);
			connection.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void calOrgRepoCount() throws Exception{
		Map<Integer,Integer> orgMap = new HashMap<Integer, Integer>();
		Connection connection = getMysqlConnection();
		String sql = "select * from orgtest";
		PreparedStatement stmt = connection.prepareStatement(sql);
		ResultSet resultSet = stmt.executeQuery();
		while(resultSet.next()){
			int org_id = resultSet.getInt("id");
			orgMap.put(org_id, 0);
		}
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),27017);
		MongoDatabase database = mongoClient.getDatabase("testUser2");
		JsonParser parser = new JsonParser();
		FindIterable<Document> doIterable = database.getCollection("userRepo").find();
		for (Document document : doIterable) {
			JsonObject repo = parser.parse(document.toJson()).getAsJsonObject();
			
			int id = repo.get("owner").getAsJsonObject().get("id").getAsInt();
			if(orgMap.containsKey(id)){
				System.out.println(id);
				orgMap.put(id, orgMap.get(id)+1);
			}
		}
		
		String sqlUpdate = "update orgtest set repo_count = ? where id = ?";
		
		PreparedStatement stmtUpdate = connection.prepareStatement(sqlUpdate);
		
		Set<Integer> orgIntegers = orgMap.keySet();
		for (Integer orgId : orgIntegers) {
			stmtUpdate.setInt(1, orgMap.get(orgId));
			stmtUpdate.setInt(2, orgId);
			stmtUpdate.execute();
		}
		mongoClient.close();
		connection.close();
		
	}
	
	public void calOrgMemberCount() throws Exception{
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),27017);
		MongoDatabase database = mongoClient.getDatabase("testUser2");
		FindIterable<Document> doIterable = database.getCollection("orgMember").find();
		
		Map<Integer,Integer> map = new HashMap<Integer, Integer>();
		JsonParser parser = new JsonParser();
		for (Document document : doIterable) {
			JsonObject member = parser.parse(document.toJson()).getAsJsonObject();
			int org_id = member.get("org_id").getAsInt();
			if(map.containsKey(org_id)){
				map.put(org_id, map.get(org_id)+1);
			}else{
				map.put(org_id, 1);
			}
		}
		
		Connection connection = getMysqlConnection();
		String sql = "update orgtest set member_count = ? where id = ?";
		
		PreparedStatement stmt = connection.prepareStatement(sql);
		
		Set<Integer> orgIntegers = map.keySet();
		for (Integer orgId : orgIntegers) {
			stmt.setInt(1, map.get(orgId));
			stmt.setInt(2, orgId);
			stmt.execute();
		}
		
		connection.close();
		mongoClient.close();
	}
	
	public void fetchOrgMembers(){

		try {
			FetchOrgMembers fetchOrgMembers = new FetchOrgMembers();
			MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),27017);
			MongoDatabase database = mongoClient.getDatabase("testUser2");
			Connection connection = getMysqlConnection();
			String sql = "SELECT * FROM OrgTest";
			PreparedStatement stmt = connection.prepareStatement(sql);
			ResultSet resultSet = stmt.executeQuery();
			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String login = resultSet.getString("login");
				List<Document> documents = fetchOrgMembers.insertOrgMembers(id, login);
				if (documents != null && documents.size() > 0) {
					database.getCollection("orgMember").insertMany(documents);
				}
				
				
			}
			mongoClient.close();
			connection.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static Connection getMysqlConnection() throws Exception{
		//get items from resources/config.properties
		Properties properties = new Properties();
		String path = Thread.currentThread().getContextClassLoader().getResource("config.properties").getPath();
		properties.load(new FileInputStream(new File(path)));
		
		String mysqlIP = properties.getProperty("mysql.server.ip");
		String mysqlPort =  properties.getProperty("mysql.server.port");
		String dbName =  properties.getProperty("mysql.db.data");
		String loginName =  properties.getProperty("mysql.login.name");
		String password =  properties.getProperty("mysql.login.password");
		String url = "jdbc:mysql://"+mysqlIP+":"+mysqlPort+"/"+dbName+"?"
                + "user="+loginName+"&password="+password+"&useUnicode=true&characterEncoding=UTF8";
		
		//load class driver
		Class.forName("com.mysql.jdbc.Driver");
		
		//return connection
		Connection connection = DriverManager.getConnection(url);
		return connection;
	}
}
// login
// id
// "type" : "Organization",
// "site_admin" : false,
// "name" : null,
// "company" : null,
// "blog" : null,
// "location" : null,
// "email" : null,
// "hireable" : null,
// "bio" : null,
// "public_repos" : 6,
// "public_gists" : 0,
// "followers" : 0,
// "following" : 0,
// "created_at" : "2013-06-01T00:43:49Z",
// "updated_at" : "2014-11-01T16:19:07Z"

package githubCrawler;

import utility.MessageSender;
import utility.MongoInfo;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCallback;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;

public class AAAAAAAAAAAAAAAAA {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection cache = db.getCollection("WIN-8IEVE9HL0DJcommitscache");
		DBCollection commit = db.getCollection("commitsbyapi");
		DBCursor cursor = cache.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		
		while(cursor.hasNext()){
			commit.save(cursor.next());
		}
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");*/
		
		/*DBCollection repo = db.getCollection("repository");
		DBCollection commitNumber = db.getCollection("commitnumberbyapi");
		DBCursor cursor = repo.find();
		DBCursor cursor2 = commitNumber.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		cursor2.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);*/
		/*int count = 0;
		
		while(cursor.hasNext()){
			DBObject object = new BasicDBObject();
			object.put("fn", cursor.next().get("full_name").toString());
			if(commitNumber.find(object).size() == 0){
				MessageSender sender = new MessageSender();
				sender.sendMessage(object.get("fn").toString());
				count ++;
			}
		}
		System.out.println(count);*/
		
		/*while(cursor2.hasNext()){
			DBObject object = cursor2.next();
			DBObject object2 = new BasicDBObject();
			object2.put("fn", object.get("fn").toString());
			
			if(commitNumber.find(object2).size() > 1){
				System.out.println(object.get("fn"));
			}
		}*/
		
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection pulls = db.getCollection("pulls");
		DBCursor cursor = pulls.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		PullCommitCrawler pullCommitCrawler = new PullCommitCrawler();
		int judge = 0;
		
		/*while(cursor.hasNext()){
			DBObject object = cursor.next();
			if(object.get("commits_url").toString().equals("https://api.github.com/repos/ControlSystemStudio/cs-studio/pulls/486/commits")){
				judge = 1;
			}
			if(judge == 1){
				pullCommitCrawler.crawlCommits(object.get("commits_url").toString());
			}
		}*/
		pullCommitCrawler.crawlCommits("https://api.github.com/repos/openmicroscopy/openmicroscopy/pulls/89/commits");
	}

}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import userInfoFetch.UserDeal;
import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class AssigneeCrawler {
	
	public void crawlAssignees(String fullName){
		System.out.println("Start crawl assignees------------------------");
		int index = 1;
		String assigneesURL = "https://api.github.com/repos/" + fullName + "/assignees?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(assigneesURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection assigneecache = db.getCollection(GetHostName.getHostName() + "assigneecache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(assigneesURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(assigneesURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						assigneecache.save(object);
						
						UserDeal.fetchUser(object.get("login").toString(), Integer.parseInt(object.get("id").toString()));
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(assigneesURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(assigneesURL + index);				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(assigneesURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}

}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class BranchCrawler {

	public void crawlBranches(String fullName){
		System.out.println("Start crawl branches------------------------");
		int index = 1;
		String branchesURL = "https://api.github.com/repos/" + fullName + "/branches?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(branchesURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection branchcache = db.getCollection(GetHostName.getHostName() + "branchcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(branchesURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(branchesURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						branchcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(branchesURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(branchesURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(branchesURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class CommentCrawler {

	public void crawlComments(String fullName){
		System.out.println("Start crawl comments------------------------");
		int index = 1;
		String commentsURL = "https://api.github.com/repos/" + fullName + "/comments?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(commentsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection commentcache = db.getCollection(GetHostName.getHostName() + "commentcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(commentsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(commentsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						commentcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(commentsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(commentsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(commentsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;
import utility.ValidateMongoConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class CommitCrawler {
	private Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
	private DB db = mongo.getDB("Experiment");
	private DBCollection commitscache = db.getCollection(GetHostName.getHostName() + "commitscache");
	//private DBCollection commitscache = db.getCollection("pullcommits");
	public static int commitNumber = 0;
	public static int commitNumberByAPI = 0;

	public void crawlCommits(String fullName){
		System.out.println("Start crawl commits------------------------");
		int index = 1;
		String commitsURL = "https://api.github.com/repos/" + fullName + "/commits?page=";
		//String commitsURL = fullName + "?page=";
		//int pn = Integer.parseInt(fullName.split("pulls/")[1].split("/")[0]);
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		ArrayList<DBObject> commitsArray = new ArrayList<DBObject>();
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					System.out.println(commitsURL + index);
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						System.out.println(concreteURL);
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							//object.put("pn", pn);
							commitsArray.add(object);
							commitNumber ++;
						} catch (Exception e) {
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
					}
					try{
						commitscache.insert(commitsArray);
					}catch(Exception e){
						while(ValidateInternetConnection.validateInternetConnection() == 0){
							System.out.println("Wait for connecting the internet---------------");
							try {
								Thread.sleep(30000);
							} catch (InterruptedException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
						System.out.println("The internet is connected------------");
						
						while(ValidateMongoConnection.validateMongoConnection() <= 0){
							System.out.println("Wait for connecting the mongo---------------");
							try {
								Thread.sleep(30000);
							} catch (InterruptedException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
						System.out.println("The mongo is connected------------");
						commitscache.insert(commitsArray);
					}finally{
						commitsArray.clear();
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
	}
	
	public void crawlCommitsByLog(String fullName){
		System.out.println(fullName);
		DBObject commit = new BasicDBObject();
		ArrayList<DBObject> files = new ArrayList<DBObject>();
		String message = "";
		int temp = 0;
		try {
			String string = fullName.split("/")[0] + "@" + fullName.split("/")[1];
			Process process = Runtime.getRuntime().exec("git log --stat",null,new File("H:\\GitRepo\\" + string));
			BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(),"utf-8"));
			String str = "";
			while((str = reader.readLine()) != null){
				if(str.startsWith("commit")){
					if(temp != 0){
						if(files.size() > 0){
							commit.put("files", files);
						}
						commit.put("fn", fullName);
						commitscache.save(commit);
						commitNumber ++;
					}
					temp ++;
					message = "";
					files.clear();
					commit = new BasicDBObject();
					commit.put("sha", str.split("commit ")[1]);
				}else if(str.startsWith("Merge")){
					commit.put("merge", str.split("Merge: ")[1]);
				}else if(str.startsWith("Author")){
					System.out.println(str);
					DBObject committer = new BasicDBObject();
					committer.put("name", str.split("Author: ")[1].split(" <")[0]);
					if(str.split("<")[1].startsWith(">")){
						committer.put("email", "");
					}else{
						committer.put("email", str.split("<")[1].split(">")[0]);
					}
					commit.put("committer", committer);
				}else if(str.startsWith("Date")){
					commit.put("Date", str.split("Date:   ")[1]);
				}else if(str == ""){
			
				}else if(str.contains("|") && (str.endsWith("+") || str.endsWith("-"))){
					DBObject file = new BasicDBObject();
					//System.out.println(str.split(" ").length);
					file.put("filename", str.split(" ")[1]);
					if(str.contains("+") && str.endsWith("-")){
						file.put("status", "modified");
					}else if (str.endsWith("+")) {
						file.put("status", "added");
					}else if (str.endsWith("-")) {
						file.put("status", "removed");
					}
					file.put("changes", str.split(" ")[str.split(" ").length - 2]);
					files.add(file);
				}else if (str.contains("|") && str.endsWith("bytes")) {
					DBObject file = new BasicDBObject();
					file.put("filename", str.split(" ")[1]);
					int start = Integer.parseInt(str.split(" -> ")[0].split("Bin ")[1]);
					int end = Integer.parseInt(str.split(" -> ")[1].split(" bytes")[0]);
					if(start == 0 && end > 0){
						file.put("status", "added");
					}else if(end == 0 && start > 0){
						file.put("status", "removed");
					}else{
						file.put("status", "modified");
					}
					file.put("changes", 0);
					files.add(file);
				}else if(str.contains("file changed,") || str.contains("files changed,")){
					DBObject stats = new BasicDBObject();
					stats.put("filenumber", str.split(" file")[0].split(" ")[1]);
					if(str.contains("+") && str.contains("-")){
						stats.put("additions", str.split(", ")[1].split(" insertion")[0]);
						stats.put("deletions", str.split(", ")[2].split(" deletion")[0]);
						stats.put("total", (Integer.parseInt(str.split(", ")[1].split(" insertion")[0]) + Integer.parseInt(str.split(", ")[2].split(" deletion")[0]))+"");
					}else if(str.contains("+") && !str.contains("-")){
						stats.put("additions", str.split(", ")[1].split(" insertion")[0]);
						stats.put("deletions", "0");
						stats.put("total", str.split(", ")[1].split(" insertion")[0]);
					}else{
						System.out.println(str);
						stats.put("additions", "0");
						stats.put("deletions", str.split(", ")[1].split(" deletion")[0]);
						stats.put("total", str.split(", ")[1].split(" deletion")[0]);
					}
					commit.put("stats", stats);
				}else{
					message = message + str.replace("    ", "") + " ";
					commit.put("message", message);
				}
			}
			commit.put("message", message);
			if(files.size() > 0){
				commit.put("files", files);
			}
			commit.put("fn", fullName);
			commitscache.save(commit);
			commitNumber ++;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;
import utility.ValidateMongoConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class CommitCrawlerA {
	private Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
	private DB db = mongo.getDB("ghcrawlerV3");
	private DBCollection commitscache = db.getCollection(GetHostName.getHostName() + "commitscache");
	//private DBCollection commitscache = db.getCollection("pullcommits");
	public static int commitNumber = 0;
	public static int commitNumberByAPI = 0;

	public void crawlCommits(String fullName){
		System.out.println("Start crawl commits------------------------");
		int index = 1;
		String commitsURL = "https://api.github.com/repos/" + fullName + "/commits?page=";
		//String commitsURL = fullName + "?page=";
		//int pn = Integer.parseInt(fullName.split("pulls/")[1].split("/")[0]);
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		ArrayList<DBObject> commitsArray = new ArrayList<DBObject>();
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					System.out.println(commitsURL + index);
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						System.out.println(concreteURL);
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							//object.put("pn", pn);
							commitsArray.add(object);
							commitNumberByAPI ++;
						} catch (Exception e) {
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
					}
					try{
						commitscache.insert(commitsArray);
					}catch(Exception e){
						while(ValidateInternetConnection.validateInternetConnection() == 0){
							System.out.println("Wait for connecting the internet---------------");
							try {
								Thread.sleep(30000);
							} catch (InterruptedException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
						System.out.println("The internet is connected------------");
						
						while(ValidateMongoConnection.validateMongoConnection() <= 0){
							System.out.println("Wait for connecting the mongo---------------");
							try {
								Thread.sleep(30000);
							} catch (InterruptedException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
						System.out.println("The mongo is connected------------");
						commitscache.insert(commitsArray);
					}finally{
						commitsArray.clear();
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
	}
	
	public void crawlCommitsByLog(String fullName){
		System.out.println(fullName);
		DBObject commit = new BasicDBObject();
		ArrayList<DBObject> files = new ArrayList<DBObject>();
		String message = "";
		int temp = 0;
		try {
			String string = fullName.split("/")[0] + "@" + fullName.split("/")[1];
			Process process = Runtime.getRuntime().exec("git log --stat",null,new File("H:\\GitRepo\\" + string));
			BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(),"utf-8"));
			String str = "";
			while((str = reader.readLine()) != null){
				if(str.startsWith("commit")){
					if(temp != 0){
						if(files.size() > 0){
							commit.put("files", files);
						}
						commit.put("fn", fullName);
						commitscache.save(commit);
						commitNumber ++;
					}
					temp ++;
					message = "";
					files.clear();
					commit = new BasicDBObject();
					commit.put("sha", str.split("commit ")[1]);
				}else if(str.startsWith("Merge")){
					commit.put("merge", str.split("Merge: ")[1]);
				}else if(str.startsWith("Author")){
					System.out.println(str);
					DBObject committer = new BasicDBObject();
					committer.put("name", str.split("Author: ")[1].split(" <")[0]);
					if(str.split("<")[1].startsWith(">")){
						committer.put("email", "");
					}else{
						committer.put("email", str.split("<")[1].split(">")[0]);
					}
					commit.put("committer", committer);
				}else if(str.startsWith("Date")){
					commit.put("Date", str.split("Date:   ")[1]);
				}else if(str == ""){
			
				}else if(str.contains("|") && (str.endsWith("+") || str.endsWith("-"))){
					DBObject file = new BasicDBObject();
					//System.out.println(str.split(" ").length);
					file.put("filename", str.split(" ")[1]);
					if(str.contains("+") && str.endsWith("-")){
						file.put("status", "modified");
					}else if (str.endsWith("+")) {
						file.put("status", "added");
					}else if (str.endsWith("-")) {
						file.put("status", "removed");
					}
					file.put("changes", str.split(" ")[str.split(" ").length - 2]);
					files.add(file);
				}else if (str.contains("|") && str.endsWith("bytes")) {
					DBObject file = new BasicDBObject();
					file.put("filename", str.split(" ")[1]);
					int start = Integer.parseInt(str.split(" -> ")[0].split("Bin ")[1]);
					int end = Integer.parseInt(str.split(" -> ")[1].split(" bytes")[0]);
					if(start == 0 && end > 0){
						file.put("status", "added");
					}else if(end == 0 && start > 0){
						file.put("status", "removed");
					}else{
						file.put("status", "modified");
					}
					file.put("changes", 0);
					files.add(file);
				}else if(str.contains("file changed,") || str.contains("files changed,")){
					DBObject stats = new BasicDBObject();
					stats.put("filenumber", str.split(" file")[0].split(" ")[1]);
					if(str.contains("+") && str.contains("-")){
						stats.put("additions", str.split(", ")[1].split(" insertion")[0]);
						stats.put("deletions", str.split(", ")[2].split(" deletion")[0]);
						stats.put("total", (Integer.parseInt(str.split(", ")[1].split(" insertion")[0]) + Integer.parseInt(str.split(", ")[2].split(" deletion")[0]))+"");
					}else if(str.contains("+") && !str.contains("-")){
						stats.put("additions", str.split(", ")[1].split(" insertion")[0]);
						stats.put("deletions", "0");
						stats.put("total", str.split(", ")[1].split(" insertion")[0]);
					}else{
						System.out.println(str);
						stats.put("additions", "0");
						stats.put("deletions", str.split(", ")[1].split(" deletion")[0]);
						stats.put("total", str.split(", ")[1].split(" deletion")[0]);
					}
					commit.put("stats", stats);
				}else{
					message = message + str.replace("    ", "") + " ";
					commit.put("message", message);
				}
			}
			commit.put("message", message);
			if(files.size() > 0){
				commit.put("files", files);
			}
			commit.put("fn", fullName);
			commitscache.save(commit);
			commitNumber ++;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

package githubCrawler;

import java.io.IOException;

import utility.MessageReceiver;
import utility.MessageSender;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;
import com.rabbitmq.client.AMQP.BasicProperties;

public class Committt {
	private static final String TASK_QUEUE_NAME = "commit_queue1";

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
			ConnectionFactory factory = new ConnectionFactory();
			factory.setAutomaticRecoveryEnabled(true);
			factory.setHost("121.41.118.191");
			factory.setUsername("owen");
			factory.setPassword("owen");
			factory.setVirtualHost("/");
			factory.setPort(5672);
			Connection connection = factory.newConnection();
			final Channel channel = connection.createChannel();
			channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);

			int prefetch = 1;
			channel.basicQos(prefetch);

			final Consumer consumer = new DefaultConsumer(channel) {
				@Override
				public void handleDelivery(String consumerTag,
						Envelope envelope, BasicProperties properties,
						byte[] body) throws IOException {
					// TODO Auto-generated method stub
					String message = new String(body, "UTF-8");
					System.out.println(" [x] Received '" + message + "'");
					try {
						handleTask(message);
					} finally {
						System.out.println(" [x] Done");
						channel.basicAck(envelope.getDeliveryTag(), false);
					}
				}
			};
			channel.basicConsume(TASK_QUEUE_NAME, false, consumer);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void handleTaskA(String message){
		System.out.println(message);
		try {
			Thread.sleep(30000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void handleTask(String message) {
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection repos = db.getCollection("commentcondition");
		DBCollection commit = db.getCollection("commitsbyapi");
		DBCollection commitNum = db.getCollection("commitnumberbyapi");
		GitCommit gitCommit = new GitCommit();
		
		DBObject object = new BasicDBObject();
		object.put("fn", message);
		
		if(Integer.parseInt(repos.find(object).next().get("commitNumber").toString()) <= 10000){
			//if(commit.find(object).limit(1).size() == 0 && commitNum.find(object).limit(1).size() == 0){
				gitCommit.crawl(message);
			/*}else{
				commit.remove(object);
				commitNum.remove(object);
				gitCommit.crawl(message);
			}*/
		}
		//gitCommit.crawl(message);
		
		/*GitCommit gitCommit = new GitCommit();
		gitCommit.crawl("mojombo/grit");*/
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class ContentCrawler {

	public void crawlContents(String fullName){
		System.out.println("Start crawl contents------------------------");
		String contentsURL = "https://api.github.com/repos/" + fullName + "/contents";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(contentsURL);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection contentcache = db.getCollection(GetHostName.getHostName() + "contentcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(contentsURL);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(contentsURL);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			if (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						contentcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import userInfoFetch.UserDeal;
import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class ContributorCrawler {
	
	public void crawlContributors(String fullName){
		System.out.println("Start crawl contributors------------------------");
		int index = 1;
		String contributorsURL = "https://api.github.com/repos/" + fullName + "/contributors?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(contributorsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection contributorcache = db.getCollection(GetHostName.getHostName() + "contributorcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(contributorsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(contributorsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						contributorcache.save(object);
						
						UserDeal.fetchUser(object.get("login").toString(), Integer.parseInt(object.get("id").toString()));
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(contributorsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(contributorsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(contributorsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import utility.GetHostName;
import utility.MongoInfo;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;

public class CrawlPullAndIssue {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection issues = db.getCollection("issuescp");
		DBCollection pulls = db.getCollection("pullscp");
		DBCollection issuecache = db.getCollection(GetHostName.getHostName() + "issuecache");
		DBCollection pullcache = db.getCollection(GetHostName.getHostName() + "pullcache");
		DBCollection repository = db.getCollection("repository");
		DBCursor cursor = repository.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		
		while(cursor.hasNext()){
			DBObject object = cursor.next();
			DBObject object2 = new BasicDBObject();
			object2.put("fn", object.get("full_name").toString());
			if(issues.find(object2).limit(1).size() == 0 && pulls.find(object2).limit(1).size() == 0){
				System.out.println(object.get("full_name").toString() + "---------------------------------------");
				
				issuecache.drop();
				pullcache.drop();
				
				IssueCrawler issueCrawler = new IssueCrawler();
				PullCrawler pullCrawler = new PullCrawler();
				
				issueCrawler.crawlIssues(object.get("full_name").toString());
				pullCrawler.crawlPulls(object.get("full_name").toString());
				
				System.out.println("start saving---------------------------");
				
				DBCursor issuecursor = issuecache.find();
				issuecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
				while (issuecursor.hasNext()) {
					issues.save(issuecursor.next());
				}
				issuecursor.close();
				
				DBCursor pullcursor = pullcache.find();
				pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
				while (pullcursor.hasNext()) {
					pulls.save(pullcursor.next());
				}
				pullcursor.close();
				
				System.out.println("complete-------------------------------------------");
			}
		}
		
	}

}

package githubCrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import utility.GetURLConnection;
import utility.MongoInfo;

import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;

public class DownloadReadme {
	public static void main(String[] args){
		String root = "H:\\GitReadme\\";
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection repo = db.getCollection("repo");
		DBCursor cursor = repo.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		
		try {
			while(cursor.hasNext()){
				DBObject object = cursor.next();
				System.out.println(object.get("full_name").toString());
				String filestr = root + object.get("full_name").toString().split("/")[0] + "@" + object.get("full_name").toString().split("/")[1];
				File file = new File(filestr);
				file.mkdir();
				
				FileWriter fileWriter1 = new FileWriter(new File(filestr + "\\" + "README.txt"),true);
				FileWriter fileWriter2 = new FileWriter(new File(filestr + "\\" + "description.txt"));
				
				HttpURLConnection urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.md");
				if(urlConnection.getResponseCode() == 200){
					BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					String str = "";
					while((str = reader.readLine()) != null){
						fileWriter1.write(str + "\n");
					}
				}else{
					urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.markdown");
					if(urlConnection.getResponseCode() == 200){
						BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						String str = "";
						while((str = reader.readLine()) != null){
							fileWriter1.write(str + "\n");
						}
					}else{
						urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README");
						if(urlConnection.getResponseCode() == 200){
							BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							String str = "";
							while((str = reader.readLine()) != null){
								fileWriter1.write(str + "\n");
							}
						}else{
							urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.rdoc");
							if(urlConnection.getResponseCode() == 200){
								BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								String str = "";
								while((str = reader.readLine()) != null){
									fileWriter1.write(str + "\n");
								}
							}else{
								urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.textile");
								if(urlConnection.getResponseCode() == 200){
									BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
									String str = "";
									while((str = reader.readLine()) != null){
										fileWriter1.write(str + "\n");
									}
								}else{
									urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.text");
									if(urlConnection.getResponseCode() == 200){
										BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
										String str = "";
										while((str = reader.readLine()) != null){
											fileWriter1.write(str + "\n");
										}
									}else{
										urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.rst");
										if(urlConnection.getResponseCode() == 200){
											BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
											String str = "";
											while((str = reader.readLine()) != null){
												fileWriter1.write(str + "\n");
											}
										}else{
											urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.mkd");
											if(urlConnection.getResponseCode() == 200){
												BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
												String str = "";
												while((str = reader.readLine()) != null){
													fileWriter1.write(str + "\n");
												}
											}else{
												urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.mkdn");
												if(urlConnection.getResponseCode() == 200){
													BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
													String str = "";
													while((str = reader.readLine()) != null){
														fileWriter1.write(str + "\n");
													}
												}else{
													urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.txt");
													if(urlConnection.getResponseCode() == 200){
														BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
														String str = "";
														while((str = reader.readLine()) != null){
															fileWriter1.write(str + "\n");
														}
													}else{
														urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/readme.md");
														if(urlConnection.getResponseCode() == 200){
															BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
															String str = "";
															while((str = reader.readLine()) != null){
																fileWriter1.write(str + "\n");
															}
														}else{
															urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/DESCRIPTION");
															if(urlConnection.getResponseCode() == 200){
																BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
																String str = "";
																while((str = reader.readLine()) != null){
																	fileWriter1.write(str + "\n");
																}
															}else{
																urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/readme.txt");
																if(urlConnection.getResponseCode() == 200){
																	BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
																	String str = "";
																	while((str = reader.readLine()) != null){
																		fileWriter1.write(str + "\n");
																	}
																}else{
																	urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.pod");
																	if(urlConnection.getResponseCode() == 200){
																		BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
																		String str = "";
																		while((str = reader.readLine()) != null){
																			fileWriter1.write(str + "\n");
																		}
																	}else{
																		urlConnection = GetURLConnection.getUrlConnection("https://raw.githubusercontent.com/"+ object.get("full_name").toString() +"/master/README.org");
																		if(urlConnection.getResponseCode() == 200){
																			BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
																			String str = "";
																			while((str = reader.readLine()) != null){
																				fileWriter1.write(str + "\n");
																			}
																		}else{
																			System.out
																					.println(object.get("full_name") + "--------------------error");
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				
				fileWriter2.write(object.get("description").toString());
				fileWriter1.flush();
				fileWriter1.close();
				fileWriter2.flush();
				fileWriter2.close();
				System.out.println("complete!");
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		
		/*File file = new File("H:\\GitReadme\\" + "sdas@saasd");
		file.mkdir();
		
		try {
			FileWriter fileWriter = new FileWriter(new File("H:\\GitReadme\\" + "sdas@saasd\\" + "readme.txt"));
			fileWriter.write("sdas");
			fileWriter.flush();
			fileWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

public class DownloadRepository {
	
	public void downloadRepository(String fullName){
		System.out.println("Start download repository------------------------");
		try {
			String str = "";
			String downloadURL = "https://github.com/" + fullName + ".git ";
			String file = fullName.split("/")[0] + "@" + fullName.split("/")[1];
			Process process = Runtime.getRuntime().exec("git clone " + downloadURL + file, null, new File("H:\\GitRepo"));
			BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(),"utf-8"));
			while((str = reader.readLine()) != null){
				System.out.println(str);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.util.JSON;

public class EventCrawler {
	
	/*use data from the internet*/
	public ArrayList<DBObject> crawlEvents(String fullName){
		return null;
	}
}

package githubCrawler;

public class FilterOperate {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		FilterThread filterThread = new FilterThread();
		filterThread.start();
		
		while(true){
			if(!filterThread.isAlive()){
				filterThread = new FilterThread();
				filterThread.start();
			}
		}
	}

}

package githubCrawler;

public class FilterOperate1 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		FilterThread1 filterThread1 = new FilterThread1();
		filterThread1.start();
		
		while(true){
			if(!filterThread1.isAlive()){
				filterThread1 = new FilterThread1();
				filterThread1.start();
			}
		}
	}
}

package githubCrawler;

public class FilterThread extends Thread {

	@Override
	public void run(){
		super.run();
		RepoFilter repoFilter = new RepoFilter();
		repoFilter.main(null);
	}
}

package githubCrawler;

public class FilterThread1 extends Thread {
	@Override
	public void run(){
		super.run();
		RepoFilter1 repoFilter1 = new RepoFilter1();
		repoFilter1.main(null);
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class ForkCrawler {
	
	public void crawlForks(String fullName){
		System.out.println("Start crawl forks------------------------");
		int index = 1;
		String forksURL = "https://api.github.com/repos/" + fullName + "/forks?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(forksURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection forkcache = db.getCollection(GetHostName.getHostName() + "forkcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(forksURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(forksURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						forkcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(forksURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(forksURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(forksURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}

}

package githubCrawler;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Calendar;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.impl.conn.tsccm.WaitingThread;

import userInfoFetch.UserDeal;
import utility.AccountUtil;
import utility.GetHostName;
import utility.MessageSender;
import utility.MongoInfo;
import utility.ValidateInternetConnection;
import utility.ValidateMongoConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.WriteConcern;
import com.mongodb.util.JSON;

public class GitCommit {
	private static Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
	//private static Mongo mongo = new Mongo("localhost", 27017);
	private static DB db = mongo.getDB("ghcrawlerV3");
	
	/*private static DBCollection repository = db.getCollection("repository");
	private static DBCollection forks = db.getCollection("forks");
	private static DBCollection assignees = db.getCollection("assignees");
	private static DBCollection languages = db.getCollection("languages");
	private static DBCollection stargazers = db.getCollection("stargazers");
	private static DBCollection contributors = db.getCollection("contributors");
	private static DBCollection subscribers = db.getCollection("subscribers");
	private static DBCollection tags = db.getCollection("tags");
	private static DBCollection branches = db.getCollection("branches");
	private static DBCollection gitrefs = db.getCollection("gitrefs");
	private static DBCollection comments = db.getCollection("comments");
	private static DBCollection issue_comment = db
			.getCollection("issuecomment");
	private static DBCollection issue_events = db.getCollection("issueevents");
	private static DBCollection events = db.getCollection("events");
	private static DBCollection contents = db.getCollection("contents");*/
	private static DBCollection commits = db.getCollection("commitsbyapi");
	/*private static DBCollection issues = db.getCollection("issues");
	private static DBCollection pulls = db.getCollection("pulls");
	private static DBCollection tree = db.getCollection("tree");
	private static DBCollection repolist = db.getCollection("repolist");
	private static DBCollection complete = db.getCollection("complete");*/
	private static DBCollection commitnumber = db.getCollection("commitnumberbyapi");
/*	private static DBCollection user = db.getCollection("user");
	
	private static DBCollection usercache = db.getCollection(GetHostName.getHostName() + "usercache");*/
	//private static DBCollection followercache = db.getCollection("followercache");
	//private static DBCollection userRepocache = db.getCollection("userRepocache");
	//private static DBCollection follower = db.getCollection("follower");
	//private static DBCollection userRepo = db.getCollection("userRepo");
	/*private static DBCollection forkcache = db.getCollection(GetHostName.getHostName() + "forkcache");
	private static DBCollection assigneecache = db.getCollection(GetHostName.getHostName() + "assigneecache");
	private static DBCollection stargazercache = db.getCollection(GetHostName.getHostName() + "stargazercache");
	private static DBCollection contributorcache = db.getCollection(GetHostName.getHostName() + "contributorcache");
	private static DBCollection subscribercache = db.getCollection(GetHostName.getHostName() + "subscribercache");
	private static DBCollection tagcache = db.getCollection(GetHostName.getHostName() + "tagcache");
	private static DBCollection branchcache = db.getCollection(GetHostName.getHostName() + "branchcache");
	private static DBCollection gitrefcache = db.getCollection(GetHostName.getHostName() + "gitrefcache");
	private static DBCollection commentcache = db.getCollection(GetHostName.getHostName() + "commentcache");
	private static DBCollection issuecommentcache = db.getCollection(GetHostName.getHostName() + "issuecommentcache");
	private static DBCollection issueeventcache = db.getCollection(GetHostName.getHostName() + "issueeventcache");
	private static DBCollection contentcache = db.getCollection(GetHostName.getHostName() + "contentcache");*/
	private static DBCollection commitscache = db.getCollection(GetHostName.getHostName() + "commitscache");
	/*private static DBCollection issuecache = db.getCollection(GetHostName.getHostName() + "issuecache");
	private static DBCollection pullcache = db.getCollection(GetHostName.getHostName() + "pullcache");
	
	private static DBObject repositoryArray = null;
	private static DBObject languagesArray = null;
	private static DBObject treeArray = null;*/

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		/*RepoCrawler repoCrawler = new RepoCrawler();
		for (int i = 0; i < 6600; i++) {
			int id = (int) (Math.random() * 44012900 + 1);
			DBCollection repolist = db.getCollection("repolist");
			DBObject idObject = new BasicDBObject();
			idObject.put("id", id);
			String fullName = repoCrawler.getRepoFullName(id);
			if (!fullName.equals("Fail")) {
				repoCrawler.crawl(fullName);
			} else {
				i = i - 1;
			}
		}*/
		/*MessageSender messageSender = new MessageSender();
		DBCursor repoCursor = repolist.find();
		while(repoCursor.hasNext()){
			DBObject repo = repoCursor.next();
			if(repo.get("state").equals("uncompleted")){
				messageSender.sendMessage(repo.get("full_name").toString());
				DBObject before = new BasicDBObject();
				before.put("id", Integer.parseInt(repo.get("id").toString()));
				DBObject after = new BasicDBObject();
				after.put("id", Integer.parseInt(repo.get("id").toString()));
				after.put("full_name", repo.get("full_name").toString());
				after.put("state", "completed");
				repolist.update(before, after);
			}
		}*/
	}

	public void crawl(String fullName) {

		/*usercache.drop();
		forkcache.drop();
		assigneecache.drop();
		stargazercache.drop();
		contributorcache.drop();
		subscribercache.drop();
		tagcache.drop();
		branchcache.drop();
		gitrefcache.drop();
		commentcache.drop();
		issuecommentcache.drop();
		issueeventcache.drop();
		contentcache.drop();*/
		commitscache.drop();
		/*issuecache.drop();
		pullcache.drop();*/
		//followercache.drop();
		//userRepocache.drop();
		//followercache = db.getCollection("followercache");
		//userRepocache = db.getCollection("userRepocache");
		
		/*RepositoryCrawler repositoryCrawler = new RepositoryCrawler();
		ForkCrawler forkCrawler = new ForkCrawler();
		AssigneeCrawler assigneeCrawler = new AssigneeCrawler();
		LanguageCrawler languageCrawler = new LanguageCrawler();
		StargazerCrawler stargazerCrawler = new StargazerCrawler();
		ContributorCrawler contributorCrawler = new ContributorCrawler();
		SubscriberCrawler subscriberCrawler = new SubscriberCrawler();
		TagCrawler tagCrawler = new TagCrawler();
		BranchCrawler branchCrawler = new BranchCrawler();
		GitrefCrawler gitrefCrawler = new GitrefCrawler();
		CommentCrawler commentCrawler = new CommentCrawler();
		IssueCommentCrawler issueCommentCrawler = new IssueCommentCrawler();
		IssueEventCrawler issueEventCrawler = new IssueEventCrawler();
		//EventCrawler eventCrawler = new EventCrawler();
		ContentCrawler contentCrawler = new ContentCrawler();*/
		CommitCrawlerA commitCrawler = new CommitCrawlerA();
		/*IssueCrawler issueCrawler = new IssueCrawler();
		PullCrawler pullCrawler = new PullCrawler();
		TreeCrawler treeCrawler = new TreeCrawler();
		DownloadRepository downloadRepository = new DownloadRepository();*/
		
		//downloadRepository.downloadRepository(fullName);
		//repositoryArray = repositoryCrawler.crawlRepository(fullName);
		//forkCrawler.crawlForks(fullName);
		//assigneeCrawler.crawlAssignees(fullName);
		//languagesArray = languageCrawler.crawlLanguages(fullName);
		//stargazerCrawler.crawlStargazers(fullName);
		//contributorCrawler.crawlContributors(fullName);
		//subscriberCrawler.crawlSubscribers(fullName);
		//tagCrawler.crawlTags(fullName);
		//branchCrawler.crawlBranches(fullName);
		//gitrefCrawler.crawlGitrefs(fullName);
		//commentCrawler.crawlComments(fullName);
		//issueCommentCrawler.crawlIssueComments(fullName);
		//issueEventCrawler.crawlIssueEvents(fullName);
		//eventsArray = eventCrawler.crawlEvents(fullName);
		//contentCrawler.crawlContents(fullName);
		commitCrawler.crawlCommits(fullName);;
		//issueCrawler.crawlIssues(fullName);
		//pullCrawler.crawlPulls(fullName);
		//treeArray = treeCrawler.crawlTree(fullName);
		
		try{
			/*if(repositoryArray != null){
				repository.save(repositoryArray);
			}
			
			DBCursor forkcursor = forkcache.find();
			forkcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (forkcursor.hasNext()) {
				forks.save(forkcursor.next());
			}
			forkcursor.close();
			
			DBCursor assigneecursor = assigneecache.find();
			assigneecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (assigneecursor.hasNext()) {
				assignees.save(assigneecursor.next());
			}
			assigneecursor.close();
			
			if(languagesArray != null){
				languages.save(languagesArray);
			}
			
			DBCursor stargazercursor = stargazercache.find();
			stargazercursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (stargazercursor.hasNext()) {
				stargazers.save(stargazercursor.next());
			}
			stargazercursor.close();
			
			DBCursor contributorcursor = contributorcache.find();
			contributorcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (contributorcursor.hasNext()) {
				contributors.save(contributorcursor.next());
			}
			contributorcursor.close();
			
			DBCursor subscribercursor = subscribercache.find();
			subscribercursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (subscribercursor.hasNext()) {
				subscribers.save(subscribercursor.next());
			}
			subscribercursor.close();
			
			DBCursor tagcursor = tagcache.find();
			tagcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (tagcursor.hasNext()) {
				tags.save(tagcursor.next());
			}
			tagcursor.close();
			
			DBCursor branchcursor = branchcache.find();
			branchcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (branchcursor.hasNext()) {
				branches.save(branchcursor.next());
			}
			branchcursor.close();
			
			DBCursor gitrefcursor = gitrefcache.find();
			gitrefcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (gitrefcursor.hasNext()) {
				gitrefs.save(gitrefcursor.next());
			}
			gitrefcursor.close();
			
			for (int i = 0; i < commentsArray.size(); i++) {
				comments.save(commentsArray.get(i));
			}
			
			DBCursor issuecommentcursor = issuecommentcache.find();
			issuecommentcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issuecommentcursor.hasNext()) {
				issue_comment.save(issuecommentcursor.next());
			}
			issuecommentcursor.close();
			
			DBCursor issueeventcursor = issueeventcache.find();
			issueeventcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issueeventcursor.hasNext()) {
				issue_events.save(issueeventcursor.next());
			}
			issueeventcursor.close();
			
			for (int i = 0; i < eventsArray.size(); i++) {
				events.save(eventsArray.get(i));
			}
			
			DBCursor contentcursor = contentcache.find();
			contentcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (contentcursor.hasNext()) {
				contents.save(contentcursor.next());
			}
			contentcursor.close();
			
			DBCursor issuecursor = issuecache.find();
			issuecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issuecursor.hasNext()) {
				issues.save(issuecursor.next());
			}
			issuecursor.close();
			
			DBCursor pullcursor = pullcache.find();
			pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (pullcursor.hasNext()) {
				pulls.save(pullcursor.next());
			}
			pullcursor.close();
			
			if(treeArray != null){
				tree.save(treeArray);
			}*/
			System.out.println("Start saving data-------------------------");
			
			DBObject commitNum = new BasicDBObject();
			commitNum.put("commitnumber", commitCrawler.commitNumberByAPI);
			commitNum.put("fn", fullName);
			commitnumber.save(commitNum);
			commitCrawler.commitNumberByAPI = 0;
			
			DBCursor cursor = commitscache.find();
			cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (cursor.hasNext()) {
				commits.save(cursor.next());
			}
			cursor.close();
			
			/*DBCursor userCursor = usercache.find();
			userCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while(userCursor.hasNext()){
				DBObject object = userCursor.next();
				DBObject judge = new BasicDBObject();
				judge.put("login", object.get("login").toString());
				if(user.find(judge).limit(1).size() == 0){
					user.save(object);
				}
			}
			userCursor.close();*/
			
			/*DBCursor followerCursor = followercache.find();
			followerCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while(followerCursor.hasNext()){
				follower.save(followerCursor.next());
			}
			followerCursor.close();
			
			DBCursor userRepoCursor = userRepocache.find();
			userRepoCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while(userRepoCursor.hasNext()){
				userRepo.save(userRepoCursor.next());
			}
			userRepoCursor.close();*/
			
			/*DBObject object = new BasicDBObject();
			object.put("full_name", fullName);
			object.put("state", "completed");
			object.put("date", Calendar.getInstance().getTime());
			complete.save(object);*/
		}catch(Exception e){
			e.printStackTrace();
			/*FileWriter fileWriter;
			try {
				fileWriter = new FileWriter("log.txt",true);
				fileWriter.write(fullName + "\n");
				fileWriter.flush();
				fileWriter.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch blockk
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			while(ValidateMongoConnection.validateMongoConnection() <= 0){
				System.out.println("Wait for connecting the mongo---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The mongo is connected------------");*/
		}

		/*repositoryArray = null;
		languagesArray = null;
		treeArray = null;*/

		/*crawlTree(fullName);
		downloadRepository(fullName);
		for (int i = 0; i < treeArray.size(); i++) {
			tree.save(treeArray.get(i));
		}*/
		
		System.out.println("complete crawl!");
	}

	/*need exception opertion later*/
	/*public String getRepoFullName(int id){
		String urlString = indexURL + (id - 1);
		try {
			url = new URL(urlString);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream()));
			String string11 = reader.readLine();
			System.out.println(id);
			JsonArray jsonArray = new JsonParser().parse(string11)
					.getAsJsonArray();
			if (jsonArray.get(0).getAsJsonObject().get("id").getAsInt() == id) {
				DBObject object = new BasicDBObject();
				object.put("id", id);
				if (repository.find(object).size() != 0) {
					return "Fail";
				} else {
					String str = jsonArray.get(0).getAsJsonObject().get("url")
							.toString();
					String string = str.substring(1, str.length() - 1);
					url = new URL(string);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					if (urlConnection.getResponseCode() == 403) {
						return "Fail";
					} else {
						String result = jsonArray.get(0).getAsJsonObject()
								.get("full_name").toString();
						return result.substring(1, result.length() - 1);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			return "Fail";
		}
		return "Fail";

	}*/
}

package githubCrawler;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Calendar;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.impl.conn.tsccm.WaitingThread;

import userInfoFetch.UserDeal;
import utility.AccountUtil;
import utility.GetHostName;
import utility.MessageSender;
import utility.MongoInfo;
import utility.ValidateInternetConnection;
import utility.ValidateMongoConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.WriteConcern;
import com.mongodb.util.JSON;

public class GitCrawler {
	private static Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
	//private static Mongo mongo = new Mongo("localhost", 27017);
	private static DB db = mongo.getDB("Experiment");
	
	private static DBCollection repository = db.getCollection("repository");
	private static DBCollection forks = db.getCollection("forks");
	private static DBCollection assignees = db.getCollection("assignees");
	private static DBCollection languages = db.getCollection("languages");
	private static DBCollection stargazers = db.getCollection("stargazers");
	private static DBCollection contributors = db.getCollection("contributors");
	private static DBCollection subscribers = db.getCollection("subscribers");
	private static DBCollection tags = db.getCollection("tags");
	private static DBCollection branches = db.getCollection("branches");
	private static DBCollection gitrefs = db.getCollection("gitrefs");
	private static DBCollection comments = db.getCollection("comments");
	private static DBCollection issue_comment = db
			.getCollection("issuecomment");
	private static DBCollection issue_events = db.getCollection("issueevents");
	private static DBCollection events = db.getCollection("events");
	private static DBCollection contents = db.getCollection("contents");
	private static DBCollection commits = db.getCollection("commits");
	private static DBCollection issues = db.getCollection("issues");
	private static DBCollection pulls = db.getCollection("pulls");
	private static DBCollection tree = db.getCollection("tree");
	private static DBCollection repolist = db.getCollection("repolist");
	private static DBCollection complete = db.getCollection("complete");
	private static DBCollection commitnumber = db.getCollection("commitnumber");
	private static DBCollection user = db.getCollection("user");
	
	private static DBCollection usercache = db.getCollection(GetHostName.getHostName() + "usercache");
	//private static DBCollection followercache = db.getCollection("followercache");
	//private static DBCollection userRepocache = db.getCollection("userRepocache");
	//private static DBCollection follower = db.getCollection("follower");
	//private static DBCollection userRepo = db.getCollection("userRepo");
	private static DBCollection forkcache = db.getCollection(GetHostName.getHostName() + "forkcache");
	private static DBCollection assigneecache = db.getCollection(GetHostName.getHostName() + "assigneecache");
	private static DBCollection stargazercache = db.getCollection(GetHostName.getHostName() + "stargazercache");
	private static DBCollection contributorcache = db.getCollection(GetHostName.getHostName() + "contributorcache");
	private static DBCollection subscribercache = db.getCollection(GetHostName.getHostName() + "subscribercache");
	private static DBCollection tagcache = db.getCollection(GetHostName.getHostName() + "tagcache");
	private static DBCollection branchcache = db.getCollection(GetHostName.getHostName() + "branchcache");
	private static DBCollection gitrefcache = db.getCollection(GetHostName.getHostName() + "gitrefcache");
	private static DBCollection commentcache = db.getCollection(GetHostName.getHostName() + "commentcache");
	private static DBCollection issuecommentcache = db.getCollection(GetHostName.getHostName() + "issuecommentcache");
	private static DBCollection issueeventcache = db.getCollection(GetHostName.getHostName() + "issueeventcache");
	private static DBCollection contentcache = db.getCollection(GetHostName.getHostName() + "contentcache");
	private static DBCollection commitscache = db.getCollection(GetHostName.getHostName() + "commitscache");
	private static DBCollection issuecache = db.getCollection(GetHostName.getHostName() + "issuecache");
	private static DBCollection pullcache = db.getCollection(GetHostName.getHostName() + "pullcache");
	
	private static DBObject repositoryArray = null;
	private static DBObject languagesArray = null;
	private static DBObject treeArray = null;

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		/*RepoCrawler repoCrawler = new RepoCrawler();
		for (int i = 0; i < 6600; i++) {
			int id = (int) (Math.random() * 44012900 + 1);
			DBCollection repolist = db.getCollection("repolist");
			DBObject idObject = new BasicDBObject();
			idObject.put("id", id);
			String fullName = repoCrawler.getRepoFullName(id);
			if (!fullName.equals("Fail")) {
				repoCrawler.crawl(fullName);
			} else {
				i = i - 1;
			}
		}*/
		/*MessageSender messageSender = new MessageSender();
		DBCursor repoCursor = repolist.find();
		while(repoCursor.hasNext()){
			DBObject repo = repoCursor.next();
			if(repo.get("state").equals("uncompleted")){
				messageSender.sendMessage(repo.get("full_name").toString());
				DBObject before = new BasicDBObject();
				before.put("id", Integer.parseInt(repo.get("id").toString()));
				DBObject after = new BasicDBObject();
				after.put("id", Integer.parseInt(repo.get("id").toString()));
				after.put("full_name", repo.get("full_name").toString());
				after.put("state", "completed");
				repolist.update(before, after);
			}
		}*/
	}

	public void crawl(String fullName) {

		usercache.drop();
		forkcache.drop();
		assigneecache.drop();
		stargazercache.drop();
		contributorcache.drop();
		subscribercache.drop();
		tagcache.drop();
		branchcache.drop();
		gitrefcache.drop();
		commentcache.drop();
		issuecommentcache.drop();
		issueeventcache.drop();
		contentcache.drop();
		commitscache.drop();
		issuecache.drop();
		pullcache.drop();
		//followercache.drop();
		//userRepocache.drop();
		//followercache = db.getCollection("followercache");
		//userRepocache = db.getCollection("userRepocache");
		
		RepositoryCrawler repositoryCrawler = new RepositoryCrawler();
		ForkCrawler forkCrawler = new ForkCrawler();
		AssigneeCrawler assigneeCrawler = new AssigneeCrawler();
		LanguageCrawler languageCrawler = new LanguageCrawler();
		StargazerCrawler stargazerCrawler = new StargazerCrawler();
		ContributorCrawler contributorCrawler = new ContributorCrawler();
		SubscriberCrawler subscriberCrawler = new SubscriberCrawler();
		TagCrawler tagCrawler = new TagCrawler();
		BranchCrawler branchCrawler = new BranchCrawler();
		GitrefCrawler gitrefCrawler = new GitrefCrawler();
		CommentCrawler commentCrawler = new CommentCrawler();
		IssueCommentCrawler issueCommentCrawler = new IssueCommentCrawler();
		IssueEventCrawler issueEventCrawler = new IssueEventCrawler();
		//EventCrawler eventCrawler = new EventCrawler();
		ContentCrawler contentCrawler = new ContentCrawler();
		CommitCrawler commitCrawler = new CommitCrawler();
		IssueCrawler issueCrawler = new IssueCrawler();
		PullCrawler pullCrawler = new PullCrawler();
		TreeCrawler treeCrawler = new TreeCrawler();
		DownloadRepository downloadRepository = new DownloadRepository();
		
		//downloadRepository.downloadRepository(fullName);
		repositoryArray = repositoryCrawler.crawlRepository(fullName);
		forkCrawler.crawlForks(fullName);
		//assigneeCrawler.crawlAssignees(fullName);
		languagesArray = languageCrawler.crawlLanguages(fullName);
		stargazerCrawler.crawlStargazers(fullName);
		//contributorCrawler.crawlContributors(fullName);
		subscriberCrawler.crawlSubscribers(fullName);
		tagCrawler.crawlTags(fullName);
		branchCrawler.crawlBranches(fullName);
		gitrefCrawler.crawlGitrefs(fullName);
		commentCrawler.crawlComments(fullName);
		//issueCommentCrawler.crawlIssueComments(fullName);
		//issueEventCrawler.crawlIssueEvents(fullName);
		//eventsArray = eventCrawler.crawlEvents(fullName);
		contentCrawler.crawlContents(fullName);
		commitCrawler.crawlCommits(fullName);;
		issueCrawler.crawlIssues(fullName);
		//pullCrawler.crawlPulls(fullName);
		treeArray = treeCrawler.crawlTree(fullName);
		
		try{
			if(repositoryArray != null){
				repository.save(repositoryArray);
			}
			
			DBCursor forkcursor = forkcache.find();
			forkcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (forkcursor.hasNext()) {
				forks.save(forkcursor.next());
			}
			forkcursor.close();
			
			/*DBCursor assigneecursor = assigneecache.find();
			assigneecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (assigneecursor.hasNext()) {
				assignees.save(assigneecursor.next());
			}
			assigneecursor.close();*/
			
			if(languagesArray != null){
				languages.save(languagesArray);
			}
			
			DBCursor stargazercursor = stargazercache.find();
			stargazercursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (stargazercursor.hasNext()) {
				stargazers.save(stargazercursor.next());
			}
			stargazercursor.close();
			
			/*DBCursor contributorcursor = contributorcache.find();
			contributorcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (contributorcursor.hasNext()) {
				contributors.save(contributorcursor.next());
			}
			contributorcursor.close();*/
			
			DBCursor subscribercursor = subscribercache.find();
			subscribercursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (subscribercursor.hasNext()) {
				subscribers.save(subscribercursor.next());
			}
			subscribercursor.close();
			
			DBCursor tagcursor = tagcache.find();
			tagcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (tagcursor.hasNext()) {
				tags.save(tagcursor.next());
			}
			tagcursor.close();
			
			DBCursor branchcursor = branchcache.find();
			branchcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (branchcursor.hasNext()) {
				branches.save(branchcursor.next());
			}
			branchcursor.close();
			
			DBCursor gitrefcursor = gitrefcache.find();
			gitrefcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (gitrefcursor.hasNext()) {
				gitrefs.save(gitrefcursor.next());
			}
			gitrefcursor.close();
			
			/*for (int i = 0; i < commentsArray.size(); i++) {
				comments.save(commentsArray.get(i));
			}*/
			
			DBCursor commentcursor = commentcache.find();
			commentcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (commentcursor.hasNext()) {
				comments.save(commentcursor.next());
			}
			commentcursor.close();
			
			/*DBCursor issuecommentcursor = issuecommentcache.find();
			issuecommentcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issuecommentcursor.hasNext()) {
				issue_comment.save(issuecommentcursor.next());
			}
			issuecommentcursor.close();
			
			DBCursor issueeventcursor = issueeventcache.find();
			issueeventcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issueeventcursor.hasNext()) {
				issue_events.save(issueeventcursor.next());
			}
			issueeventcursor.close();*/
			
			/*for (int i = 0; i < eventsArray.size(); i++) {
				events.save(eventsArray.get(i));
			}*/
			
			DBCursor contentcursor = contentcache.find();
			contentcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (contentcursor.hasNext()) {
				contents.save(contentcursor.next());
			}
			contentcursor.close();
			
			DBCursor issuecursor = issuecache.find();
			issuecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issuecursor.hasNext()) {
				issues.save(issuecursor.next());
			}
			issuecursor.close();
			
			/*DBCursor pullcursor = pullcache.find();
			pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (pullcursor.hasNext()) {
				pulls.save(pullcursor.next());
			}
			pullcursor.close();*/
			
			if(treeArray != null){
				tree.save(treeArray);
			}
			
			DBObject commitNum = new BasicDBObject();
			commitNum.put("commitnumber", commitCrawler.commitNumber);
			commitNum.put("fn", fullName);
			commitnumber.save(commitNum);
			commitCrawler.commitNumber = 0;
			
			DBCursor cursor = commitscache.find();
			cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (cursor.hasNext()) {
				commits.save(cursor.next());
			}
			cursor.close();
			
			DBCursor userCursor = usercache.find();
			userCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while(userCursor.hasNext()){
				DBObject object = userCursor.next();
				DBObject judge = new BasicDBObject();
				judge.put("login", object.get("login").toString());
				if(user.find(judge).limit(1).size() == 0){
					user.save(object);
				}
			}
			userCursor.close();
			
			/*DBCursor followerCursor = followercache.find();
			followerCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while(followerCursor.hasNext()){
				follower.save(followerCursor.next());
			}
			followerCursor.close();
			
			DBCursor userRepoCursor = userRepocache.find();
			userRepoCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while(userRepoCursor.hasNext()){
				userRepo.save(userRepoCursor.next());
			}
			userRepoCursor.close();*/
			
			DBObject object = new BasicDBObject();
			object.put("full_name", fullName);
			object.put("state", "completed");
			object.put("date", Calendar.getInstance().getTime());
			complete.save(object);
		}catch(Exception e){
			e.printStackTrace();
			FileWriter fileWriter;
			try {
				fileWriter = new FileWriter("log.txt",true);
				fileWriter.write(fullName + "\n");
				fileWriter.flush();
				fileWriter.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch blockk
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			while(ValidateMongoConnection.validateMongoConnection() <= 0){
				System.out.println("Wait for connecting the mongo---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The mongo is connected------------");
		}

		repositoryArray = null;
		languagesArray = null;
		treeArray = null;

		/*crawlTree(fullName);
		downloadRepository(fullName);
		for (int i = 0; i < treeArray.size(); i++) {
			tree.save(treeArray.get(i));
		}*/
		
		System.out.println("complete crawl!");
	}

	/*need exception opertion later*/
	/*public String getRepoFullName(int id){
		String urlString = indexURL + (id - 1);
		try {
			url = new URL(urlString);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream()));
			String string11 = reader.readLine();
			System.out.println(id);
			JsonArray jsonArray = new JsonParser().parse(string11)
					.getAsJsonArray();
			if (jsonArray.get(0).getAsJsonObject().get("id").getAsInt() == id) {
				DBObject object = new BasicDBObject();
				object.put("id", id);
				if (repository.find(object).size() != 0) {
					return "Fail";
				} else {
					String str = jsonArray.get(0).getAsJsonObject().get("url")
							.toString();
					String string = str.substring(1, str.length() - 1);
					url = new URL(string);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					if (urlConnection.getResponseCode() == 403) {
						return "Fail";
					} else {
						String result = jsonArray.get(0).getAsJsonObject()
								.get("full_name").toString();
						return result.substring(1, result.length() - 1);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			return "Fail";
		}
		return "Fail";

	}*/
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class GitrefCrawler {
	
	public void crawlGitrefs(String fullName){
		System.out.println("Start crawl git_refs------------------------");
		int index = 1;
		String gitrefsURL = "https://api.github.com/repos/" + fullName + "/git/refs?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(gitrefsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection gitrefcache = db.getCollection(GetHostName.getHostName() + "gitrefcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(gitrefsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(gitrefsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						gitrefcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(gitrefsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(gitrefsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(gitrefsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class IssueCommentCrawler {
	
	public void crawlIssueComments(String fullName){
		System.out.println("Start crawl issue_comment------------------------");
		int index = 1;
		String issuecommentURL = "https://api.github.com/repos/" + fullName + "/issues/comments?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(issuecommentURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection issuecommentcache = db.getCollection(GetHostName.getHostName() + "issuecommentcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(issuecommentURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(issuecommentURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]") && index <= 1333){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						issuecommentcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(issuecommentURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(issuecommentURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(issuecommentURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						//e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class IssueCrawler {

	public void crawlIssues(String fullName){
		System.out.println("Start crawl issues------------------------");
		int index = 1;
		String issuesURL = "https://api.github.com/repos/" + fullName + "/issues?state=all&page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		//DB db = mongo.getDB("ghcrawlerV3");
		//DBCollection issuecache = db.getCollection(GetHostName.getHostName() + "issuecache");
		DB db = mongo.getDB("WordPressAndroid");
		DBCollection issuecache = db.getCollection("issue");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			System.exit(0);
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				System.exit(0);
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							issuecache.save(object);
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
						
					}
				}catch(Exception e){
					System.exit(0);
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(issuesURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					System.exit(0);
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class IssueEventCrawler {

	public void crawlIssueEvents(String fullName){
		System.out.println("Start crawl issue_events------------------------");
		int index = 1;
		String issueeventsURL = "https://api.github.com/repos/" + fullName + "/issues/events?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(issueeventsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection issueeventcache = db.getCollection(GetHostName.getHostName() + "issueeventcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(issueeventsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(issueeventsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						issueeventcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(issueeventsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(issueeventsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(issueeventsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetURLConnection;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.util.JSON;

public class LanguageCrawler {
	
	public DBObject crawlLanguages(String fullName){
		System.out.println("Start crawl languages------------------------");
		String languagesURL = "https://api.github.com/repos/" + fullName + "/languages";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(languagesURL);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		DBObject language = null;
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(languagesURL);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(languagesURL);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			if (response != null && !response.equals("{}")){
				try{
					language = (BasicDBObject) JSON.parse(response);
					language.put("fn", fullName);
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
			}
		}
		
		return language;
	}

}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetURLConnection;
import utility.MongoInfo;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;

public class OperateComment {
	public static void main(String[] args){
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection repo = db.getCollection("repo");
		DBCollection comment = db.getCollection("comment");
		DBCollection commentcondition = db.getCollection("commentcondition");
		DBCursor cursor = repo.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		CommentCrawler commentCrawler = new CommentCrawler();
		Boolean judge = false;
		
		//crawl the comment first.
		/*while(cursor.hasNext()){
			DBObject repository = cursor.next();
			if(repository.get("full_name").toString().equals("rust-lang/rust")){
				judge = true;
			}
			
			if(judge && !repository.get("full_name").toString().equals("rust-lang/rust")){
				ArrayList<DBObject> commentArray = commentCrawler.crawlComments(cursor.next().get("full_name").toString());
				for(int i = 0; i < commentArray.size() ; i ++){
					comment.save(commentArray.get(i));
				}
			}
			ArrayList<DBObject> commentArray = commentCrawler.crawlComments(cursor.next().get("full_name").toString());
			comment.insert(commentArray);
		}*/
		
		while(cursor.hasNext()){
			DBObject cc = new BasicDBObject();
			DBObject repository = cursor.next();
			
			HttpURLConnection urlConnection = GetURLConnection.getUrlConnection("https://github.com/" + repository.get("full_name").toString());
			try {
				/*get the commit number from the webpage*/
				BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				String response = "";
				String result = "";
				while((response = reader.readLine()) != null){
					result = result + response;
				}
				String str = result.split("<span class=\"num text-emphasized\">")[1].split("</span>")[0].replace(" ", "");
				if(str.contains(",")){
					str = str.replace(",", "");
				}
				cc.put("commitNumber", Integer.parseInt(str));
				
				DBObject commenttt = new BasicDBObject();
				int count = 0;
				
				/*count the comment number of each repo*/
				commenttt.put("fn", repository.get("full_name").toString());
				DBCursor cursor2 = comment.find(commenttt);
				cc.put("commentNumber", cursor2.size());
				
				/*count the comment number by line of each repo*/
				while(cursor2.hasNext()){
					if(cursor2.next().get("position") != null){
						count ++;
					}
				}
				cc.put("commentByline", count);
				
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			cc.put("fn", repository.get("full_name").toString());
			System.out.println(repository.get("full_name").toString());
			commentcondition.save(cc);
		}
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;
import utility.ValidateMongoConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class PullCommitCrawler {
	private Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
	private DB db = mongo.getDB("Experiment");
	private DBCollection commitscache = db.getCollection(GetHostName.getHostName() + "pullcommitscache");
	private DBCollection commits = db.getCollection("pullcommits");
	//private DBCollection commitscache = db.getCollection("pullcommits");

	//https://api.github.com/repos/guardianproject/ChatSecureAndroid/pulls/712/commits
	public void crawlCommits(String pullURL){
		System.out.println("Start crawl commits------------------------");
		commitscache.drop();
		int index = 1;
		//String commitsURL = "https://api.github.com/repos/" + fullName + "/commits?page=";
		String commitsURL = pullURL + "?page=";
		int pn = Integer.parseInt(pullURL.split("pulls/")[1].split("/")[0]);
		String fn = pullURL.split("repos/")[1].split("/pulls")[0];
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		ArrayList<DBObject> commitsArray = new ArrayList<DBObject>();
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					System.out.println(commitsURL + index);
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						System.out.println(concreteURL);
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fn);
							object.put("pn", pn);
							commitsArray.add(object);
						} catch (Exception e) {
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
					}
					try{
						commitscache.insert(commitsArray);
					}catch(Exception e){
						while(ValidateInternetConnection.validateInternetConnection() == 0){
							System.out.println("Wait for connecting the internet---------------");
							try {
								Thread.sleep(30000);
							} catch (InterruptedException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
						System.out.println("The internet is connected------------");
						
						while(ValidateMongoConnection.validateMongoConnection() <= 0){
							System.out.println("Wait for connecting the mongo---------------");
							try {
								Thread.sleep(30000);
							} catch (InterruptedException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						}
						System.out.println("The mongo is connected------------");
						commitscache.insert(commitsArray);
					}finally{
						commitsArray.clear();
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(commitsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
		DBCursor cursor = commitscache.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		while (cursor.hasNext()) {
			commits.save(cursor.next());
		}
		cursor.close();
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class PullCrawler {

	public void crawlPulls(String fullName){
		System.out.println("Start crawl pulls------------------------");
		int index = 1;
		String pullsURL = "https://api.github.com/repos/" + fullName + "/pulls?state=all&page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection pullcache = db.getCollection(GetHostName.getHostName() + "pullcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			System.exit(0);
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				System.exit(0);
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							pullcache.save(object);
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
						
					}
				}catch(Exception e){
					System.exit(0);
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(pullsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					System.exit(0);
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.impl.conn.tsccm.WaitingThread;

import userInfoFetch.UserDeal;
import utility.AccountUtil;
import utility.MessageSender;
import utility.ValidateInternetConnection;
import utility.ValidateMongoConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class RepoCrawler {
	private static URL url;
	private static HttpURLConnection urlConnection;
	private static BufferedReader reader;
	private static int rateCounter = 0;
	private static String rootURL = "https://api.github.com/repos/";
	private static String indexURL = "https://api.github.com/repositories?since=";
	private static String authorization = "";
	private static Mongo mongo = new Mongo("121.41.118.191", 27017);
	//private static Mongo mongo = new Mongo("localhost", 27017);
	private static DB db = mongo.getDB("ghcrawler");
	private static DBCollection repository = db.getCollection("repository");
	private static DBCollection forks = db.getCollection("forks");
	private static DBCollection assignees = db.getCollection("assignees");
	private static DBCollection languages = db.getCollection("languages");
	private static DBCollection stargazers = db.getCollection("stargazers");
	private static DBCollection contributors = db.getCollection("contributors");
	private static DBCollection subscribers = db.getCollection("subscribers");
	private static DBCollection tags = db.getCollection("tags");
	private static DBCollection branches = db.getCollection("branches");
	private static DBCollection gitrefs = db.getCollection("gitrefs");
	private static DBCollection comments = db.getCollection("comments");
	private static DBCollection issue_comment = db
			.getCollection("issuecomment");
	private static DBCollection issue_events = db.getCollection("issueevents");
	private static DBCollection events = db.getCollection("events");
	private static DBCollection contents = db.getCollection("contents");
	private static DBCollection commits = db.getCollection("commits");
	private static DBCollection issues = db.getCollection("issues");
	private static DBCollection pulls = db.getCollection("pulls");
	private static DBCollection commitscache = db.getCollection("commitscache");
	private static DBCollection tree = db.getCollection("tree");
	private static DBCollection repolist = db.getCollection("repolist");
	private static ArrayList<DBObject> repositoryArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> forksArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> assigneesArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> languagesArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> stargazersArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> contributorsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> subscribersArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> tagsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> branchesArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> gitrefsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> commentsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> issuecommentArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> issueeventsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> eventsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> contentsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> commitsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> issuesArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> pullsArray = new ArrayList<DBObject>();
	private static ArrayList<DBObject> treeArray = new ArrayList<DBObject>();
	private static String treeStructure = "";
	private static int fileNumber = 0;

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		/*RepoCrawler repoCrawler = new RepoCrawler();
		for (int i = 0; i < 6600; i++) {
			int id = (int) (Math.random() * 44012900 + 1);
			DBCollection repolist = db.getCollection("repolist");
			DBObject idObject = new BasicDBObject();
			idObject.put("id", id);
			String fullName = repoCrawler.getRepoFullName(id);
			if (!fullName.equals("Fail")) {
				repoCrawler.crawl(fullName);
			} else {
				i = i - 1;
			}
		}*/
		/*MessageSender messageSender = new MessageSender();
		DBCursor repoCursor = repolist.find();
		while(repoCursor.hasNext()){
			DBObject repo = repoCursor.next();
			if(repo.get("state").equals("uncompleted")){
				messageSender.sendMessage(repo.get("full_name").toString());
				DBObject before = new BasicDBObject();
				before.put("id", Integer.parseInt(repo.get("id").toString()));
				DBObject after = new BasicDBObject();
				after.put("id", Integer.parseInt(repo.get("id").toString()));
				after.put("full_name", repo.get("full_name").toString());
				after.put("state", "completed");
				repolist.update(before, after);
			}
		}*/
	}

	public void crawl(String fullName) {

		treeStructure = "";
		fileNumber = 0;
		commitscache.drop();
		commitscache = db.getCollection("commitscache");

		crawlRepository(fullName);
		crawlForks(fullName);
		crawlAssignees(fullName);
		crawlLanguages(fullName);
		crawlStargazers(fullName);
		crawlContributors(fullName);
		crawlSubscribers(fullName);
		crawlTags(fullName);
		crawlBranches(fullName);
		crawlGitrefs(fullName);
		crawlComments(fullName);
		crawlIssueComment(fullName);
		crawlIssueEvents(fullName);
		crawlEvents(fullName);
		crawlContents(fullName);
		crawlCommits(fullName);
		crawlIssues(fullName);
		crawlPulls(fullName);

		try{
			for (int i = 0; i < repositoryArray.size(); i++) {
				repository.save(repositoryArray.get(i));
			}
			for (int i = 0; i < forksArray.size(); i++) {
				forks.save(forksArray.get(i));
			}
			for (int i = 0; i < assigneesArray.size(); i++) {
				assignees.save(assigneesArray.get(i));
			}
			for (int i = 0; i < languagesArray.size(); i++) {
				languages.save(languagesArray.get(i));
			}
			for (int i = 0; i < stargazersArray.size(); i++) {
				stargazers.save(stargazersArray.get(i));
			}
			for (int i = 0; i < contributorsArray.size(); i++) {
				contributors.save(contributorsArray.get(i));
			}
			for (int i = 0; i < subscribersArray.size(); i++) {
				subscribers.save(subscribersArray.get(i));
			}
			for (int i = 0; i < tagsArray.size(); i++) {
				tags.save(tagsArray.get(i));
			}
			for (int i = 0; i < branchesArray.size(); i++) {
				branches.save(branchesArray.get(i));
			}
			for (int i = 0; i < gitrefsArray.size(); i++) {
				gitrefs.save(gitrefsArray.get(i));
			}
			for (int i = 0; i < commentsArray.size(); i++) {
				comments.save(commentsArray.get(i));
			}
			for (int i = 0; i < issuecommentArray.size(); i++) {
				issue_comment.save(issuecommentArray.get(i));
			}
			for (int i = 0; i < issueeventsArray.size(); i++) {
				issue_events.save(issueeventsArray.get(i));
			}
			for (int i = 0; i < eventsArray.size(); i++) {
				events.save(eventsArray.get(i));
			}
			for (int i = 0; i < contentsArray.size(); i++) {
				contents.save(contentsArray.get(i));
			}
			for (int i = 0; i < issuesArray.size(); i++) {
				issues.save(issuesArray.get(i));
			}
			for (int i = 0; i < pullsArray.size(); i++) {
				pulls.save(pullsArray.get(i));
			}
			DBCursor cursor = commitscache.find();
			cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (cursor.hasNext()) {
				commits.save(cursor.next());
			}
		}catch(Exception e){
			FileWriter fileWriter;
			try {
				fileWriter = new FileWriter("log.txt",true);
				fileWriter.write(fullName + "\n");
				fileWriter.flush();
				fileWriter.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			while(ValidateMongoConnection.validateMongoConnection() <= 0){
				System.out.println("Wait for connecting the mongo---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The mongo is connected------------");
		}

		repositoryArray.clear();
		forksArray.clear();
		assigneesArray.clear();
		languagesArray.clear();
		stargazersArray.clear();
		contributorsArray.clear();
		subscribersArray.clear();
		tagsArray.clear();
		branchesArray.clear();
		gitrefsArray.clear();
		commentsArray.clear();
		issuecommentArray.clear();
		issueeventsArray.clear();
		eventsArray.clear();
		contentsArray.clear();
		commitsArray.clear();
		issuesArray.clear();
		pullsArray.clear();

		/*crawlTree(fullName);
		downloadRepository(fullName);
		for (int i = 0; i < treeArray.size(); i++) {
			tree.save(treeArray.get(i));
		}*/
		
		System.out.println("complete crawl!");
	}

	public void downloadRepository(String fullName){
		System.out.println("Start download repository------------------------");
		try {
			String downloadURL = "https://github.com/" + fullName + ".git";
			//Runtime.getRuntime().exec("git clone " + downloadURL);
			Runtime.getRuntime().exec("git clone " + downloadURL, null, new File("H:\\GitRepo"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void crawlTree(String fullName) {
		System.out.println("Start crawl tree------------------------");
		String treeURL = rootURL + fullName + "/contents";
		String resultString = "";
		try {
			url = new URL(treeURL);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				if (resultString != null && !resultString.equals("[]")) {
					JsonArray jsonArray = new JsonParser().parse(resultString)
							.getAsJsonArray();
					treeStructure = "{'name':" + "'" + fullName + "'"
							+ ",'children':[";
					for (int i = 0; i < jsonArray.size(); i++) {
						if (jsonArray.get(i).getAsJsonObject().get("type")
								.getAsString().equals("file")) {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "'}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "'},";
							}
							fileNumber = fileNumber + 1;
						} else {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("_links") != null && jsonArray.get(i).getAsJsonObject().get("_links").getAsJsonObject().get("git") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("_links").getAsJsonObject()
											.get("git").getAsString());
								}
								treeStructure = treeStructure + "]}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("_links") != null && jsonArray.get(i).getAsJsonObject().get("_links").getAsJsonObject().get("git") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("_links").getAsJsonObject()
											.get("git").getAsString());
								}
								treeStructure = treeStructure + "]},";
							}
						}
					}
					treeStructure = treeStructure + "]}";

					DBObject object = new BasicDBObject();
					object.put("tree", treeStructure);
					object.put("filenumber", fileNumber);
					object.put("fn", fullName);
					treeArray.add(object);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void analyseTree(String treeURL) {
		String resultString = "";
		try {
			url = new URL(treeURL);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				if (resultString != null && !resultString.equals("[]")) {
					JsonObject jsonObject = new JsonParser()
							.parse(resultString).getAsJsonObject();
					JsonArray jsonArray = new JsonParser().parse(
							jsonObject.get("tree").toString()).getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						if (jsonArray.get(i).getAsJsonObject().get("type")
								.getAsString().equals("blob")) {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "'}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "'},";
							}
							fileNumber = fileNumber + 1;
						} else {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("url") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("url").getAsString());
								}
								treeStructure = treeStructure + "]}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("url") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("url").getAsString());
								}
								treeStructure = treeStructure + "]},";
							}
						}
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlPulls(String fullName) {
		System.out.println("Start crawl pulls------------------------");
		String pullsURL = rootURL + fullName + "/pulls?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(pullsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							String concreteURL = jsonArray.get(i).getAsJsonObject()
									.get("url").toString();
							url = new URL(concreteURL.substring(1,
									concreteURL.length() - 1));
							urlConnection = (HttpURLConnection) url
									.openConnection();
							rateCounter = rateCounter + 1;
							setAuthorization(rateCounter);
							urlConnection.setRequestProperty("Authorization",
									authorization);
							reader = new BufferedReader(new InputStreamReader(
									urlConnection.getInputStream()));
							DBObject object = (BasicDBObject) JSON.parse(reader
									.readLine());
							object.put("fn", fullName);
							pullsArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(pullsURL + index);
					url = new URL(pullsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlIssues(String fullName) {
		System.out.println("Start crawl issues------------------------");
		String issuesURL = rootURL + fullName + "/issues?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(issuesURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							String concreteURL = jsonArray.get(i).getAsJsonObject()
									.get("url").toString();
							url = new URL(concreteURL.substring(1,
									concreteURL.length() - 1));
							urlConnection = (HttpURLConnection) url
									.openConnection();
							rateCounter = rateCounter + 1;
							setAuthorization(rateCounter);
							urlConnection.setRequestProperty("Authorization",
									authorization);
							reader = new BufferedReader(new InputStreamReader(
									urlConnection.getInputStream()));
							DBObject object = (BasicDBObject) JSON.parse(reader
									.readLine());
							object.put("fn", fullName);
							issuesArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(issuesURL + index);
					url = new URL(issuesURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlCommits(String fullName) {
		System.out.println("Start crawl commits------------------------");
		String commitsURL = rootURL + fullName + "/commits?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(commitsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						System.out.println(jsonArray.size());
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							try{
								commitscache.save(object);
							}catch(Exception e){
								while(ValidateInternetConnection.validateInternetConnection() == 0){
									System.out.println("Wait for connecting the internet---------------");
									try {
										Thread.sleep(30000);
									} catch (InterruptedException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
								}
								System.out.println("The internet is connected------------");
								
								while(ValidateMongoConnection.validateMongoConnection() <= 0){
									System.out.println("Wait for connecting the mongo---------------");
									try {
										Thread.sleep(30000);
									} catch (InterruptedException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
								}
								System.out.println("The mongo is connected------------");
								commitscache.save(object);
							}
						}
					}catch(Exception e){
						System.out.println("------------------------------------------------------------------" + commitsURL);
					}
					index = index + 1;
					System.out.println(commitsURL + index);
					url = new URL(commitsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlContents(String fullName) {
		System.out.println("Start crawl contents------------------------");
		String contentsURL = rootURL + fullName + "/contents";
		String resultString = "";
		try {
			url = new URL(contentsURL);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				if (resultString != null && !resultString.equals("[]")) {
					JsonArray jsonArray = new JsonParser().parse(resultString)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						contentsArray.add(object);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/*-----------------------*/
	public void crawlEvents(String fullName) {
		System.out.println("Start crawl events------------------------");
		String eventsURL = rootURL + fullName + "/events?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(eventsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			while (urlConnection.getResponseCode() != 422
					&& urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				if (resultString == null || resultString.equals("[]")) {
					break;
				} else {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							eventsArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(eventsURL + index);
					url = new URL(eventsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlIssueEvents(String fullName) {
		System.out.println("Start crawl issue_events------------------------");
		String issueeventsURL = rootURL + fullName + "/issues/events?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(issueeventsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							issueeventsArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(issueeventsURL + index);
					url = new URL(issueeventsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlIssueComment(String fullName) {
		System.out.println("Start crawl issue_comment------------------------");
		String issuecommentURL = rootURL + fullName + "/issues/comments?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(issuecommentURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							issuecommentArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(issuecommentURL + index);
					url = new URL(issuecommentURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlComments(String fullName) {
		System.out.println("Start crawl comments------------------------");
		String commentsURL = rootURL + fullName + "/comments?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(commentsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							commentsArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(commentsURL + index);
					url = new URL(commentsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlGitrefs(String fullName) {
		System.out.println("Start crawl git_refs------------------------");
		String gitrefsURL = rootURL + fullName + "/git/refs?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(gitrefsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							gitrefsArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(gitrefsURL + index);
					url = new URL(gitrefsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlBranches(String fullName) {
		System.out.println("Start crawl branches------------------------");
		String branchesURL = rootURL + fullName + "/branches?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(branchesURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							branchesArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(branchesURL + index);
					url = new URL(branchesURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlTags(String fullName) {
		System.out.println("Start crawl tags------------------------");
		String tagsURL = rootURL + fullName + "/tags?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(tagsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							tagsArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(tagsURL + index);
					url = new URL(tagsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlSubscribers(String fullName) {
		System.out.println("Start crawl subscribers------------------------");
		String subscribersURL = rootURL + fullName + "/subscribers?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(subscribersURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							subscribersArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(subscribersURL + index);
					url = new URL(subscribersURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlContributors(String fullName) {
		System.out.println("Start crawl contributors------------------------");
		String contributorsURL = rootURL + fullName + "/contributors?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(contributorsURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							contributorsArray.add(object);
							
							UserDeal.fetchUser(object.get("login").toString(), Integer.parseInt(object.get("id").toString()));
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(contributorsURL + index);
					url = new URL(contributorsURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlStargazers(String fullName) {
		System.out.println("Start crawl stargazers------------------------");
		String stargazersURL = rootURL + fullName + "/stargazers?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(stargazersURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							stargazersArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(stargazersURL + index);
					url = new URL(stargazersURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlLanguages(String fullName) {
		System.out.println("Start crawl languages------------------------");
		String languagesURL = rootURL + fullName + "/languages";
		try {
			url = new URL(languagesURL);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				String resultString = reader.readLine();
				if (resultString != null && !resultString.equals("{}")) {
					DBObject object = (BasicDBObject) JSON.parse(resultString);
					object.put("fn", fullName);
					languagesArray.add(object);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlAssignees(String fullName) {
		System.out.println("Start crawl assignees------------------------");
		String assigneesURL = rootURL + fullName + "/assignees?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(assigneesURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							assigneesArray.add(object);
							
							UserDeal.fetchUser(object.get("login").toString(), Integer.parseInt(object.get("id").toString()));
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(assigneesURL + index);
					url = new URL(assigneesURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlForks(String fullName) {
		System.out.println("Start crawl forks------------------------");
		String forksURL = rootURL + fullName + "/forks?page=";
		String resultString = "";
		int index = 1;
		try {
			url = new URL(forksURL + index);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			if (urlConnection.getResponseCode() != 409
					&& urlConnection.getResponseCode() != 404) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream()));
				resultString = reader.readLine();
				while (resultString != null && !resultString.equals("[]")) {
					try{
						JsonArray jsonArray = new JsonParser().parse(resultString)
								.getAsJsonArray();
						for (int i = 0; i < jsonArray.size(); i++) {
							DBObject object = (BasicDBObject) JSON.parse(jsonArray
									.get(i).toString());
							object.put("fn", fullName);
							forksArray.add(object);
						}
					}catch(Exception e){
						
					}
					index = index + 1;
					System.out.println(forksURL + index);
					url = new URL(forksURL + index);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					reader = new BufferedReader(new InputStreamReader(
							urlConnection.getInputStream()));
					resultString = reader.readLine();
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void crawlRepository(String fullName) {
		System.out.println("Start crawl repository------------------------");
		String repositoryURL = rootURL + fullName;
		try {
			url = new URL(repositoryURL);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream()));
			DBObject object = (BasicDBObject) JSON.parse(reader.readLine());
			repositoryArray.add(object);
			
			DBObject owner = (BasicDBObject)object.get("owner");
			UserDeal.fetchUser(owner.get("login").toString(), Integer.parseInt(owner.get("id").toString()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/*need exception opertion later*/
	public String getRepoFullName(int id){
		String urlString = indexURL + (id - 1);
		try {
			url = new URL(urlString);
			urlConnection = (HttpURLConnection) url.openConnection();
			rateCounter = rateCounter + 1;
			setAuthorization(rateCounter);
			urlConnection.setRequestProperty("Authorization", authorization);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream()));
			String string11 = reader.readLine();
			System.out.println(id);
			JsonArray jsonArray = new JsonParser().parse(string11)
					.getAsJsonArray();
			if (jsonArray.get(0).getAsJsonObject().get("id").getAsInt() == id) {
				DBObject object = new BasicDBObject();
				object.put("id", id);
				if (repository.find(object).size() != 0) {
					return "Fail";
				} else {
					String str = jsonArray.get(0).getAsJsonObject().get("url")
							.toString();
					String string = str.substring(1, str.length() - 1);
					url = new URL(string);
					urlConnection = (HttpURLConnection) url.openConnection();
					rateCounter = rateCounter + 1;
					setAuthorization(rateCounter);
					urlConnection.setRequestProperty("Authorization",
							authorization);
					if (urlConnection.getResponseCode() == 403) {
						return "Fail";
					} else {
						String result = jsonArray.get(0).getAsJsonObject()
								.get("full_name").toString();
						return result.substring(1, result.length() - 1);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			return "Fail";
		}
		return "Fail";

	}

	public void setAuthorization(int counter) {
		Charset charset = Charset.forName("UTF-8");
		String account = "";
		if (counter >= 0 && counter <= 4900) {
			account = AccountUtil.getLoginPassword();
			authorization = "Basic "
					+ new String(
							Base64.encodeBase64(account.getBytes(charset)),
							charset);
		} else if (counter > 4900 && counter <= 9800) {
			account = AccountUtil.getLoginPassword();
			authorization = "Basic "
					+ new String(
							Base64.encodeBase64(account.getBytes(charset)),
							charset);
		} else if (counter > 9800 && counter <= 14700) {
			account = AccountUtil.getLoginPassword();
			authorization = "Basic "
					+ new String(
							Base64.encodeBase64(account.getBytes(charset)),
							charset);
		} else if (counter > 14700 && counter <= 19600) {
			account = AccountUtil.getLoginPassword();
			authorization = "Basic "
					+ new String(
							Base64.encodeBase64(account.getBytes(charset)),
							charset);
		} else {
			account = AccountUtil.getLoginPassword();
			authorization = "Basic "
					+ new String(
							Base64.encodeBase64(account.getBytes(charset)),
							charset);
			rateCounter = 0;
		}
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import utility.GetURLConnection;
import utility.MongoInfo;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class RepoFilter {
	Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
	DB db = mongo.getDB("NewProject");
	DBCollection repository = db.getCollection("repo");
	DBCollection repocondition = db.getCollection("repocondition");
	int id = 0;
	String repoURL = "https://api.github.com/repositories?since=";
	HttpURLConnection urlConnection = null;
	BufferedReader reader = null;
	String response = "";
	DBObject repo = null;
	double javaPercent = 0;
	int closedissue = 0;
	int closedpull = 0;
	int contributor = 0;
	int methodEnd = 0;

	public static void main(String[] args) {
		RepoFilter repoFilter = new RepoFilter();
		try {
			FileReader reader = new FileReader(new File("IDLog.txt"));
			BufferedReader bufferedReader = new BufferedReader(reader);
			repoFilter.setId(Integer.parseInt(bufferedReader.readLine()));
			bufferedReader.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		repoFilter.filter();
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public void filter() {
		System.out.println("Start filter repositories-----------------------");
		while (id < 16000000) {
			try {
				urlConnection = GetURLConnection.getUrlConnection(repoURL + id);
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				response = reader.readLine();

				if (response != null && response != "[]") {
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						String concrete = object.get("url").toString();
						System.out.println(object.get("full_name"));
						
						if(validateFork(concrete)){
							String javaURL = "https://github.com/" + repo.get("full_name").toString();
							if(validateJava(javaURL)){
								String pullURL = "https://github.com/" + repo.get("full_name").toString() + "/pulls";
								if(validatePull(pullURL)){
									String issueURL = "https://github.com/" + repo.get("full_name").toString() + "/issues";
									if(validateIssue(issueURL)){
										String contributorURL = "https://api.github.com/repos/" + repo.get("full_name").toString() + "/contributors?page=1";
										if(validateContributor(contributorURL)){
											DBObject repocon = new BasicDBObject();
											repocon.put("java", javaPercent);
											repocon.put("closepull", closedpull);
											repocon.put("closeissue", closedissue);
											repocon.put("fn", repo.get("full_name").toString());
											
											repository.save(repo);
											repocondition.save(repocon);
											System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~������ˮ�ҵ���~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
										}
									}
								}
							}
						}
						
						if(methodEnd == 0){
							if(!object.get("full_name").toString().equals("behnam/openheatmap")){
								FileWriter fileWriter = new FileWriter("IDLog.txt");
								fileWriter.write(repo.get("id").toString());
								fileWriter.flush();
								fileWriter.close();
							}
						}else{
							i = jsonArray.size();
						}
					}
					
					if(methodEnd == 0){
						DBObject object = (BasicDBObject) JSON.parse(jsonArray.get(
								jsonArray.size() - 1).toString());
						id = Integer.parseInt(object.get("id").toString());
						System.out
								.println("***********************************one page over,now id = "
										+ id);
					}else{
						id = 123456789;
					}
				}
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				id = 123456789;
			}
		}
	}

	public boolean validateFork(String concreteURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(concreteURL);
			int responseCode = urlConnection.getResponseCode();
			if (responseCode == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				response = reader.readLine();
				repo = (BasicDBObject) JSON.parse(response);

				if (repo.get("fork").equals(false)) {
					return true;
				} else {
					System.out.println("fork");
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}

	public boolean validateContributor(String contributorURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(contributorURL);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream(), "utf-8"));
			response = reader.readLine();

			if (response != null && response != "[]") {
				JsonArray contributorList = new JsonParser().parse(response)
						.getAsJsonArray();
				if (contributorList.size() >= 10) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}

	/*public boolean validateCommit(String commitURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(commitURL);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream(), "utf-8"));
			response = reader.readLine();

			if (response != null && response != "[]") {
				JsonArray commitList = new JsonParser().parse(response)
						.getAsJsonArray();
				if (commitList.size() >= 10) {
					return true;
				} else {
					if (filtercondition.find().size() == 1) {
						DBObject object = filtercondition.find().next();
						DBObject updata1 = new BasicDBObject();
						DBObject update2 = new BasicDBObject();
						updata1.put("commitfail", Integer.parseInt(object.get(
								"commitfail").toString()) + 1);
						update2.put("$set", updata1);
						filtercondition.update(object, update2);
					} else {
						DBObject object = new BasicDBObject();
						object.put("forkfail", 0);
						object.put("contributorfail", 0);
						object.put("commitfail", 1);
						object.put("issuefail", 0);
						object.put("pullfail", 0);
						object.put("others", 0);
						object.put("yearfail", 0);
						filtercondition.save(object);
					}
					return false;
				}
			} else {
				if (filtercondition.find().size() == 1) {
					DBObject object = filtercondition.find().next();
					DBObject updata1 = new BasicDBObject();
					DBObject update2 = new BasicDBObject();
					updata1.put("commitfail", Integer.parseInt(object.get(
							"commitfail").toString()) + 1);
					update2.put("$set", updata1);
					filtercondition.update(object, update2);
				} else {
					DBObject object = new BasicDBObject();
					object.put("forkfail", 0);
					object.put("contributorfail", 0);
					object.put("commitfail", 1);
					object.put("issuefail", 0);
					object.put("pullfail", 0);
					object.put("others", 0);
					object.put("yearfail", 0);
					filtercondition.save(object);
				}
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			System.exit(0);
			return false;
		}
	}*/

	public boolean validateIssue(String issueURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(issueURL);
			if (urlConnection.getResponseCode() == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				String result = "";
				while ((response = reader.readLine()) != null) {
					result = result + response;
				}

				if (result
						.contains("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")) {
					String str = result
							.split("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")[1]
							.split(" Closed")[0].replace(" ", "");
					if (str.contains(",")) {
						str = str.replace(",", "");
					}
					System.out.println(str);
					if (Integer.parseInt(str) >= 20) {
						closedissue = Integer.parseInt(str);
						System.out.println(closedissue);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}

	public boolean validatePull(String pullURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(pullURL);
			if (urlConnection.getResponseCode() == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				String result = "";
				while ((response = reader.readLine()) != null) {
					result = result + response;
				}
				//System.out.println(result);
				if (result.contains("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")) {
					String str = result
							.split("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")[1]
							.split(" Closed")[0].replace(" ", "");
					if (str.contains(",")) {
						str = str.replace(",", "");
					}
					System.out.println(str);
					if (Integer.parseInt(str) >= 200) {
						closedpull = Integer.parseInt(str);
						System.out.println(closedpull);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}
	
	public boolean validateJava(String URL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(URL);
			if (urlConnection.getResponseCode() == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				String result = "";
				while ((response = reader.readLine()) != null) {
					result = result + response;
				}

				if (result
						.contains("<div class=\"repository-lang-stats-graph js-toggle-lang-stats\" title=\"Click for language details\" data-ga-click=\"Repository, language bar stats toggle, location:repo overview\">")) {
					if(result.contains("aria-label=\"Java ")){
						String str = result
								.split("<div class=\"repository-lang-stats-graph js-toggle-lang-stats\" title=\"Click for language details\" data-ga-click=\"Repository, language bar stats toggle, location:repo overview\">")[1]
								.split("</div>")[0].split("aria-label=\"Java ")[1].split("%\" ")[0];
						System.out.println(Double.parseDouble(str));
						if (Double.parseDouble(str) >= 50.0) {
							javaPercent = Double.parseDouble(str);
							return true;
						} else {
							return false;
						}
					}else{
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}
}
	/*public boolean validateYear(String created_at,String pushed_at){
		if(Integer.parseInt(pushed_at.split("-")[0]) > (Integer.parseInt(created_at.split("-")[0]) + 5)){
			return true;
		}else if(Integer.parseInt(pushed_at.split("-")[0]) == (Integer.parseInt(created_at.split("-")[0]) + 5) && Integer.parseInt(pushed_at.split("-")[1]) > Integer.parseInt(created_at.split("-")[1])){
			return true;
		}else if(Integer.parseInt(pushed_at.split("-")[0]) == (Integer.parseInt(created_at.split("-")[0]) + 5) && Integer.parseInt(pushed_at.split("-")[1]) == Integer.parseInt(created_at.split("-")[1]) && Integer.parseInt(pushed_at.split("-")[2].split("T")[0]) >= Integer.parseInt(created_at.split("-")[2].split("T")[0])){
			return true;
		}else {
			if (filtercondition.find().size() == 1) {
				DBObject object = filtercondition.find().next();
				DBObject updata1 = new BasicDBObject();
				DBObject update2 = new BasicDBObject();
				updata1.put("yearfail", Integer.parseInt(object.get(
						"yearfail").toString()) + 1);
				update2.put("$set", updata1);
				filtercondition.update(object, update2);
			} else {
				DBObject object = new BasicDBObject();
				object.put("forkfail", 0);
				object.put("contributorfail", 0);
				object.put("commitfail", 0);
				object.put("issuefail", 0);
				object.put("pullfail", 0);
				object.put("others", 0);
				object.put("yearfail", 1);
				filtercondition.save(object);
			}
			return false;
		}
	} 
}*/
// System.out.println("----------------------------------------" +
// Integer.parseInt(repo.get("id").toString()) + ":" + repo.get("full_name"));
// repository.save(repo);

package githubCrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import utility.GetURLConnection;
import utility.MongoInfo;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class RepoFilter1 {
	Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
	DB db = mongo.getDB("NewProject");
	DBCollection repository = db.getCollection("repo");
	DBCollection repocondition = db.getCollection("repocondition");
	int id = 0;
	String repoURL = "https://api.github.com/repositories?since=";
	HttpURLConnection urlConnection = null;
	BufferedReader reader = null;
	String response = "";
	DBObject repo = null;
	double javaPercent = 0;
	int closedissue = 0;
	int closedpull = 0;
	int contributor = 0;
	int methodEnd = 0;

	public static void main(String[] args) {
		RepoFilter1 repoFilter1 = new RepoFilter1();
		try {
			FileReader reader = new FileReader(new File("IDLog1.txt"));
			BufferedReader bufferedReader = new BufferedReader(reader);
			repoFilter1.setId(Integer.parseInt(bufferedReader.readLine()));
			bufferedReader.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		repoFilter1.filter();
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public void filter() {
		System.out.println("Start filter repositories-----------------------");
		while (id < 29000000) {
			try {
				urlConnection = GetURLConnection.getUrlConnection(repoURL + id);
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				response = reader.readLine();

				if (response != null && response != "[]") {
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						String concrete = object.get("url").toString();
						System.out.println(object.get("full_name"));
						
						if(validateFork(concrete)){
							String javaURL = "https://github.com/" + repo.get("full_name").toString();
							if(validateJava(javaURL)){
								String pullURL = "https://github.com/" + repo.get("full_name").toString() + "/pulls";
								if(validatePull(pullURL)){
									String issueURL = "https://github.com/" + repo.get("full_name").toString() + "/issues";
									if(validateIssue(issueURL)){
										String contributorURL = "https://api.github.com/repos/" + repo.get("full_name").toString() + "/contributors?page=1";
										if(validateContributor(contributorURL)){
											DBObject repocon = new BasicDBObject();
											repocon.put("java", javaPercent);
											repocon.put("closepull", closedpull);
											repocon.put("closeissue", closedissue);
											repocon.put("fn", repo.get("full_name").toString());
											
											repository.save(repo);
											repocondition.save(repocon);
											System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~������ˮ�ҵ���~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
										}
									}
								}
							}
						}
						
						if(methodEnd == 0){
							FileWriter fileWriter = new FileWriter("IDLog1.txt");
							fileWriter.write(repo.get("id").toString());
							fileWriter.flush();
							fileWriter.close();
						}else{
							i = jsonArray.size();
						}
						
					}
					
					if(methodEnd == 0){
						DBObject object = (BasicDBObject) JSON.parse(jsonArray.get(
								jsonArray.size() - 1).toString());
						id = Integer.parseInt(object.get("id").toString());
						System.out
								.println("***********************************one page over,now id = "
										+ id);
					}else{
						id = 123456789;
					}
				}
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				id = 123456789;
			}
		}
	}

	public boolean validateFork(String concreteURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(concreteURL);
			int responseCode = urlConnection.getResponseCode();
			if (responseCode == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				response = reader.readLine();
				repo = (BasicDBObject) JSON.parse(response);

				if (repo.get("fork").equals(false)) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}

	public boolean validateContributor(String contributorURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(contributorURL);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream(), "utf-8"));
			response = reader.readLine();

			if (response != null && response != "[]") {
				JsonArray contributorList = new JsonParser().parse(response)
						.getAsJsonArray();
				if (contributorList.size() >= 10) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}

	/*public boolean validateCommit(String commitURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(commitURL);
			reader = new BufferedReader(new InputStreamReader(
					urlConnection.getInputStream(), "utf-8"));
			response = reader.readLine();

			if (response != null && response != "[]") {
				JsonArray commitList = new JsonParser().parse(response)
						.getAsJsonArray();
				if (commitList.size() >= 10) {
					return true;
				} else {
					if (filtercondition.find().size() == 1) {
						DBObject object = filtercondition.find().next();
						DBObject updata1 = new BasicDBObject();
						DBObject update2 = new BasicDBObject();
						updata1.put("commitfail", Integer.parseInt(object.get(
								"commitfail").toString()) + 1);
						update2.put("$set", updata1);
						filtercondition.update(object, update2);
					} else {
						DBObject object = new BasicDBObject();
						object.put("forkfail", 0);
						object.put("contributorfail", 0);
						object.put("commitfail", 1);
						object.put("issuefail", 0);
						object.put("pullfail", 0);
						object.put("others", 0);
						object.put("yearfail", 0);
						filtercondition.save(object);
					}
					return false;
				}
			} else {
				if (filtercondition.find().size() == 1) {
					DBObject object = filtercondition.find().next();
					DBObject updata1 = new BasicDBObject();
					DBObject update2 = new BasicDBObject();
					updata1.put("commitfail", Integer.parseInt(object.get(
							"commitfail").toString()) + 1);
					update2.put("$set", updata1);
					filtercondition.update(object, update2);
				} else {
					DBObject object = new BasicDBObject();
					object.put("forkfail", 0);
					object.put("contributorfail", 0);
					object.put("commitfail", 1);
					object.put("issuefail", 0);
					object.put("pullfail", 0);
					object.put("others", 0);
					object.put("yearfail", 0);
					filtercondition.save(object);
				}
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			System.exit(0);
			return false;
		}
	}*/

	public boolean validateIssue(String issueURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(issueURL);
			if (urlConnection.getResponseCode() == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				String result = "";
				while ((response = reader.readLine()) != null) {
					result = result + response;
				}

				if (result
						.contains("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")) {
					String str = result
							.split("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")[1]
							.split(" Closed")[0].replace(" ", "");
					if (str.contains(",")) {
						str = str.replace(",", "");
					}
					System.out.println(str);
					if (Integer.parseInt(str) >= 20) {
						closedissue = Integer.parseInt(str);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}

	public boolean validatePull(String pullURL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(pullURL);
			if (urlConnection.getResponseCode() == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				String result = "";
				while ((response = reader.readLine()) != null) {
					result = result + response;
				}
				if (result.contains("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")) {
					String str = result
							.split("<svg aria-hidden=\"true\" class=\"octicon octicon-check\" height=\"16\" role=\"img\" version=\"1.1\" viewBox=\"0 0 12 16\" width=\"12\"><path d=\"M12 5L4 13 0 9l1.5-1.5 2.5 2.5 6.5-6.5 1.5 1.5z\"></path></svg>")[1]
							.split(" Closed")[0].replace(" ", "");
					if (str.contains(",")) {
						str = str.replace(",", "");
					}
					System.out.println(str);
					if (Integer.parseInt(str) >= 200) {
						closedpull = Integer.parseInt(str);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}
	
	public boolean validateJava(String URL) {
		try {
			urlConnection = GetURLConnection.getUrlConnection(URL);
			if (urlConnection.getResponseCode() == 200) {
				reader = new BufferedReader(new InputStreamReader(
						urlConnection.getInputStream(), "utf-8"));
				String result = "";
				while ((response = reader.readLine()) != null) {
					result = result + response;
				}

				if (result
						.contains("<div class=\"repository-lang-stats-graph js-toggle-lang-stats\" title=\"Click for language details\" data-ga-click=\"Repository, language bar stats toggle, location:repo overview\">")) {
					if(result.contains("aria-label=\"Java ")){
						String str = result
								.split("<div class=\"repository-lang-stats-graph js-toggle-lang-stats\" title=\"Click for language details\" data-ga-click=\"Repository, language bar stats toggle, location:repo overview\">")[1]
								.split("</div>")[0].split("aria-label=\"Java ")[1].split("%\" ")[0];
						System.out.println(Double.parseDouble(str));
						if (Double.parseDouble(str) >= 50.0) {
							javaPercent = Double.parseDouble(str);
							return true;
						} else {
							return false;
						}
					}else{
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			methodEnd = 1;
			return false;
		}
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import userInfoFetch.UserDeal;
import utility.GetAuthorization;
import utility.GetURLConnection;
import utility.ValidateInternetConnection;

import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.util.JSON;

public class RepositoryCrawler {

	public DBObject crawlRepository(String fullName){
		System.out.println("Start crawl repository------------------------");
		String repositoryURL = "https://api.github.com/repos/" + fullName;
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(repositoryURL);
		BufferedReader reader = null;
		String response = "";
		DBObject repo = null;
		int responseCode = 200;
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(repositoryURL);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try{
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			}catch(Exception e){
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(repositoryURL);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			try {
				repo = (BasicDBObject) JSON.parse(response);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("can not translate it to json----------------------------");
			}
			
			DBObject owner = (BasicDBObject)repo.get("owner");
			UserDeal.fetchUser(owner.get("login").toString(), Integer.parseInt(owner.get("id").toString()));
		}
		return repo;
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class StargazerCrawler {

	public void crawlStargazers(String fullName){
		System.out.println("Start crawl stargazers------------------------");
		int index = 1;
		String stargazersURL = "https://api.github.com/repos/" + fullName + "/stargazers?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(stargazersURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection stargazercache = db.getCollection(GetHostName.getHostName() + "stargazercache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(stargazersURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(stargazersURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						stargazercache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(stargazersURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(stargazersURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(stargazersURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class SubscriberCrawler {

	public void crawlSubscribers(String fullName){
		System.out.println("Start crawl subscribers------------------------");
		int index = 1;
		String subscribersURL = "https://api.github.com/repos/" + fullName + "/subscribers?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(subscribersURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection subscribercache = db.getCollection(GetHostName.getHostName() + "subscribercache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(subscribersURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(subscribersURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						subscribercache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(subscribersURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(subscribersURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(subscribersURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class TagCrawler {

	public void crawlTags(String fullName){
		System.out.println("Start crawl tags------------------------");
		int index = 1;
		String tagsURL = "https://api.github.com/repos/" + fullName + "/tags?page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(tagsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		DBCollection tagcache = db.getCollection(GetHostName.getHostName() + "tagcache");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(tagsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(tagsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						DBObject object = (BasicDBObject) JSON.parse(jsonArray
								.get(i).toString());
						object.put("fn", fullName);
						tagcache.save(object);
					}
				}catch(Exception e){
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(tagsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(tagsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(tagsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import utility.GetAuthorization;
import utility.GetURLConnection;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.util.JSON;

public class TreeCrawler {
	private static String treeStructure = "";
	private static int fileNumber = 0;
	private static int repoSize = 0;
	
	public DBObject crawlTree(String fullName){
		System.out.println("Start crawl tree------------------------");
		String treeURL = "https://api.github.com/repos/" + fullName + "/contents";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(treeURL);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		DBObject tree = null;
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(treeURL);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(treeURL);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			if (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					treeStructure = "{'name':" + "'" + fullName + "'"
							+ ",'children':[";
					for (int i = 0; i < jsonArray.size(); i++) {
						if (jsonArray.get(i).getAsJsonObject().get("type")
								.getAsString().equals("file")) {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "'}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "'},";
							}
							fileNumber = fileNumber + 1;
							repoSize = repoSize + jsonArray.get(i).getAsJsonObject().get("size").getAsInt();
						} else {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("_links") != null && jsonArray.get(i).getAsJsonObject().get("_links").getAsJsonObject().get("git") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("_links").getAsJsonObject()
											.get("git").getAsString());
								}
								treeStructure = treeStructure + "]}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("name").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("_links") != null && jsonArray.get(i).getAsJsonObject().get("_links").getAsJsonObject().get("git") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("_links").getAsJsonObject()
											.get("git").getAsString());
								}
								treeStructure = treeStructure + "]},";
							}
						}
					}
					treeStructure = treeStructure + "]}";

					DBObject object = new BasicDBObject();
					object.put("tree", treeStructure);
					object.put("filenumber", fileNumber);
					object.put("reposize", repoSize);
					object.put("fn", fullName);
					tree = object;
				}catch(Exception e){
					//e.printStackTrace();
					System.out.println("can not translate it to json----------------------------");
				}
			}
		}
		
		return tree;
	}
	
	public void analyseTree(String treeURL){
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(treeURL);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(treeURL);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(treeURL);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			if (response != null && !response.equals("[]")){
				try{
					JsonObject jsonObject = new JsonParser().parse(response).getAsJsonObject();
					JsonArray jsonArray = new JsonParser().parse(jsonObject.get("tree").toString()).getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						if (jsonArray.get(i).getAsJsonObject().get("type")
								.getAsString().equals("blob")) {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "'}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "'},";
							}
							fileNumber = fileNumber + 1;
							repoSize = repoSize + jsonArray.get(i).getAsJsonObject().get("size").getAsInt();
						} else {
							if (i == jsonArray.size() - 1) {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("url") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("url").getAsString());
								}
								treeStructure = treeStructure + "]}";
							} else {
								treeStructure = treeStructure
										+ "{'name':"
										+ "'"
										+ jsonArray.get(i).getAsJsonObject()
												.get("path").getAsString()
										+ "','children':[";
								if(jsonArray.get(i).getAsJsonObject().get("url") != null){
									analyseTree(jsonArray.get(i).getAsJsonObject()
											.get("url").getAsString());
								}
								treeStructure = treeStructure + "]},";
							}
						}
					}
				}catch(Exception e){
					//e.printStackTrace();
					System.out.println("can not translate it to json----------------------------");
				}
			}
		}
	}
}

package githubCrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCallback;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.WriteConcern;

import utility.GetAuthorization;
import utility.GetHostName;
import utility.GetURLConnection;
import utility.MessageSender;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

public class TTTTTTTTTTTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*IssueCrawler issueCrawler = new IssueCrawler();
		System.out.println(issueCrawler.crawlIssues("Komodo/KomodoEdit").size());*/
		/*Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV1");
		DBCollection repository = db.getCollection("repository");
		DBCollection language = db.getCollection("languages");
		
		DBCursor cursor = repository.find();
		while(cursor.hasNext()){
			LanguageCrawler languageCrawler = new LanguageCrawler();
			DBObject object = languageCrawler.crawlLanguages(cursor.next().get("full_name").toString());
			if(object != null){
			language.save(object);
			}
		}*/
		
		//commitscache.drop();
		
		/*DBObject object = new BasicDBObject();
		object.put("sda", "sda");
		System.out.println(commitscache.find(object).count());*/
		/*TreeCrawler treeCrawler = new TreeCrawler();
		System.out.println(treeCrawler.crawlTree("charliesome/jsos").toString());*/
		
		/*CommitCrawler commitCrawler = new CommitCrawler();
		commitCrawler.crawlCommits("gitminingOrg/DataCrawler");*/
		
		/*DBCursor cursor = commitscache.find();
		while(cursor.hasNext()){
			System.out.println(cursor.next().get("commit").toString());
		}*/

		/*GitCrawler gitCrawler = new GitCrawler();
		gitCrawler.crawl("gitminingOrg/DataCrawler");*/
		
		
		/*HttpURLConnection urlConnection = GetURLConnection.getUrlConnection("https://github.com/mbostock/d3/pulls");
		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
			String response = "";
			String result = "";
			while((response = reader.readLine()) != null){
				result = result + response;
			}
			//System.out.println(result);
			if(result.contains("<span class=\"octicon octicon-check\"></span>")){
				String str = result.split("<span class=\"octicon octicon-git-pull-request\"></span>")[2].split(" Open")[0].replace(" ", "");
				if(str.contains(",")){
					str = str.replace(",", "");
				}
				System.out.println("open:" + str);
				System.out.println("closed:" + result.split("<span class=\"octicon octicon-check\"></span>")[1].split(" Closed")[0].replace(" ", ""));
			}else{
				System.out.println("open:0");
				System.out.println("closed:0");
			}
			
			//System.out.println(result.split("<span class=\"octicon octicon-check\"></span>")[1].split(" Closed")[0].replace(" ", ""));
			//System.out.println(result.contains("<span class=\"octicon octicon-check\"></span>"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		/*Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV1");
		DBCollection test = db.getCollection("test");
		DBObject object = test.find().next();
		DBObject object2 = new BasicDBObject();
		DBObject object3 = new BasicDBObject();
		object2.put("id", 20000);
		object3.put("$set", object2);
		
		test.update(object, object3);*/
		
		/*DownloadRepository downloadRepository = new DownloadRepository();
		downloadRepository.downloadRepository("moment/moment");*/
		/*Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ttttest");
		DBCollection abc = db.getCollection("abc");
		DBObject commit = new BasicDBObject();
		ArrayList<DBObject> files = new ArrayList<DBObject>();
		String message = "";
		int temp = 0;
		try {
			Process process = Runtime.getRuntime().exec("git log --stat",null,new File("H:\\GitRepo\\highcharts"));
			BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(),"utf-8"));
			String str = "";
			while((str = reader.readLine()) != null){
				if(str.startsWith("commit")){
					if(temp != 0){
						if(files.size() > 0){
							commit.put("files", files);
						}
						abc.save(commit);
					}
					temp ++;
					message = "";
					files.clear();
					commit = new BasicDBObject();
					commit.put("sha", str.split("commit ")[1]);
				}else if(str.startsWith("Merge")){
					commit.put("merge", str.split("Merge: ")[1]);
				}else if(str.startsWith("Author")){
					DBObject committer = new BasicDBObject();
					committer.put("name", str.split("Author: ")[1].split(" <")[0]);
					committer.put("email", str.split("<")[1].split(">")[0]);
					commit.put("committer", committer);
				}else if(str.startsWith("Date")){
					commit.put("Date", str.split("Date:   ")[1]);
				}else if(str == ""){
			
				}else if(str.contains("|") && (str.endsWith("+") || str.endsWith("-"))){
					DBObject file = new BasicDBObject();
					System.out.println(str.split(" ").length);
					file.put("filename", str.split(" ")[1]);
					if(str.contains("+") && str.endsWith("-")){
						file.put("status", "modified");
					}else if (str.endsWith("+")) {
						file.put("status", "added");
					}else if (str.endsWith("-")) {
						file.put("status", "removed");
					}
					file.put("changes", str.split(" ")[str.split(" ").length - 2]);
					files.add(file);
				}else if (str.contains("|") && str.endsWith("bytes")) {
					DBObject file = new BasicDBObject();
					file.put("filename", str.split(" ")[1]);
					int start = Integer.parseInt(str.split(" -> ")[0].split("Bin ")[1]);
					int end = Integer.parseInt(str.split(" -> ")[1].split(" bytes")[0]);
					if(start == 0 && end > 0){
						file.put("status", "added");
					}else if(end == 0 && start > 0){
						file.put("status", "removed");
					}else{
						file.put("status", "modified");
					}
					file.put("changes", 0);
					files.add(file);
				}else if(str.contains("file changed,") || str.contains("files changed,")){
					DBObject stats = new BasicDBObject();
					stats.put("filenumber", str.split(" file")[0].split(" ")[1]);
					if(str.contains("+") && str.contains("-")){
						stats.put("additions", str.split(", ")[1].split(" insertion")[0]);
						stats.put("deletions", str.split(", ")[2].split(" deletion")[0]);
						stats.put("total", (Integer.parseInt(str.split(", ")[1].split(" insertion")[0]) + Integer.parseInt(str.split(", ")[2].split(" deletion")[0]))+"");
					}else if(str.contains("+") && !str.contains("-")){
						stats.put("additions", str.split(", ")[1].split(" insertion")[0]);
						stats.put("deletions", "0");
						stats.put("total", str.split(", ")[1].split(" insertion")[0]);
					}else{
						System.out.println(str);
						stats.put("additions", "0");
						stats.put("deletions", str.split(", ")[1].split(" deletion")[0]);
						stats.put("total", str.split(", ")[1].split(" deletion")[0]);
					}
					commit.put("stats", stats);
				}else{
					message = message + str.replace("    ", "") + " ";
					commit.put("message", message);
				}
			}
			commit.put("message", message);
			if(files.size() > 0){
				commit.put("files", files);
			}
			abc.save(commit);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		/*Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ttttest");
		DBCollection abc = db.getCollection("abc");
		ArrayList<DBObject> files = new ArrayList<DBObject>();
		DBObject object1 = new BasicDBObject();
		object1.put("value", "");
		DBObject object2 = new BasicDBObject();
		object2.put("value", "456");
		files.add(object1);
		files.add(object2);
		
		DBObject object3 = new BasicDBObject();
		object3.put("files", files);
		abc.save(object3);*/
		
		/*HttpURLConnection urlConnection = GetURLConnection.getUrlConnection("https://github.com/checkstyle/checkstyle");
		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
			String response = "";
			String result = "";
			
			while((response = reader.readLine()) != null){
				result = result + response;
			}
			
			//System.out.println(result.split(("<span class=\"num text-emphasized\">"))[4].split("</span>")[0]);
			System.out.println(result.split("<div class=\"repository-lang-stats-graph js-toggle-lang-stats\" title=\"Click for language details\">")[1].split("</div>")[0].split("aria-label=\"Java ")[1].split("\" ")[0]);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		/*Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("NewProject");
		DBCollection pulls = db.getCollection("pulls");
		DBCursor cursor = pulls.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		CommitCrawler crawler = new CommitCrawler();
		
		while(cursor.hasNext()){
			crawler.crawlCommits(cursor.next().get("commits_url").toString());
		}*/
		
		/*String string = "asasdasda,asABsd sda. as'das sdas sdass as as+as ";
		System.out.println(string.replaceAll("[^a-zA-Z'0-9]", "*"));
		
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection repo = db.getCollection("repository");
		DBCursor repos = repo.find();
		repos.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		
		while(repos.hasNext()){
			DBObject object = repos.next();
			if(object.get("description") != null){
				//System.out.println(object.get("description").toString().replaceAll("[^a-zA-Z'0-9]", " ").replaceAll("\\s+", " "));
				String description = object.get("description").toString().replaceAll("[^a-zA-Z0-9]", " ").replaceAll("\\s+", " ");
				for(int i = 0 ; i < description.split(" ").length ; i ++){
					String word = description.split(" ")[i].toLowerCase();
					if(map.containsKey(word)){
						map.put(word, map.get(word) + 1);
					}else{
						map.put(word, 1);
					}
				}
			}
		}
		
		for(String key : map.keySet()){
			System.out.println(key + ":" + map.get(key));
		}*/
		/*String[] repo = {"zfsonlinux/zfs","zfsonlinux/spl","rdp/google_hash","fiorix/txredisapi","mojombo/semver.org","bixo/bixo","gmallard/stompserver_ng","pytroll/mpop","plataformatec/show_for","cowboyd/redjs","lifo/cramp","hugoduncan/criterium","stolowski/QComicBook","django-pci/django-axes","milesj/uploader","bashu/django-watermark","mleibman/SlickGrid","fluffle/goirc","fastestforward/heroku_san","NESCent/plhdb","evilstreak/markdown-js","hexorx/countries","ligi/gobandroid","jhy/jsoup","djberg96/win32-process","movitto/rjr","jkuhnert/ognl","dkogan/feedgnuplot","gfx/mousex-getopt","pycassa/pycassa","JeremySkinner/FluentValidation","dmacvicar/ruby-sfcc","patzy/glop","igrigorik/em-websocket","pelle/clauth","resque/resque-scheduler","silveira/openpixels","pinax/pinax-blog","felix-lang/fbuild","ruby-rdf/rdf","memowe/contenticious","mopidy/mopidy","rspec/rspec-rails"};
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection pullcache = db.getCollection(GetHostName.getHostName() + "pullcache");
		DBCollection issuecache = db.getCollection(GetHostName.getHostName() + "issuecache");
		DBCollection pulls = db.getCollection("pullscp");
		DBCollection issues = db.getCollection("issuescp");
		
		for(int i = 0 ; i < repo.length ; i ++){
			pullcache.drop();
			issuecache.drop();
			
			PullCrawler pullCrawler = new PullCrawler();
			IssueCrawler issueCrawler = new IssueCrawler();
			issueCrawler.crawlIssues(repo[i]);
			pullCrawler.crawlPulls(repo[i]);
			
			DBCursor issuecursor = issuecache.find();
			issuecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issuecursor.hasNext()) {
				issues.save(issuecursor.next());
			}
			issuecursor.close();
			
			DBCursor pullcursor = pullcache.find();
			pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (pullcursor.hasNext()) {
				pulls.save(pullcursor.next());
			}
			pullcursor.close();
		}*/
		
		IssueCrawler issueCrawler = new IssueCrawler();
		issueCrawler.crawlIssues("wordpress-mobile/WordPress-Android");
	}

}

package hehe;

import utility.MongoInfo;

import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.Mongo;

public class CrawlerA {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] repo = {"rails/rails","vslavik/poedit"};
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection pullcache = db.getCollection("pullcacheA");
		DBCollection issuecache = db.getCollection("issuecacheA");
		DBCollection pulls = db.getCollection("pullscp");
		DBCollection issues = db.getCollection("issuescp");
		
		for(int i = 0 ; i < repo.length ; i ++){
			pullcache.drop();
			issuecache.drop();
			
			PullCrawlerA pullCrawler = new PullCrawlerA();
			IssueCrawlerA issueCrawler = new IssueCrawlerA();
			issueCrawler.crawlIssues(repo[i]);
			pullCrawler.crawlPulls(repo[i]);
			
			DBCursor issuecursor = issuecache.find();
			issuecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issuecursor.hasNext()) {
				issues.save(issuecursor.next());
			}
			issuecursor.close();
			
			DBCursor pullcursor = pullcache.find();
			pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (pullcursor.hasNext()) {
				pulls.save(pullcursor.next());
			}
			pullcursor.close();
		}
	}

}

package hehe;

import utility.MongoInfo;

import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.Mongo;

public class CrawlerB {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] repo = {"c9s/App-gh","joshsh/sesametools","jbr/sibilant","r1k0/kigen"};//"pouchdb/pouchdb"
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection pullcache = db.getCollection("pullcacheB");
		DBCollection issuecache = db.getCollection("issuecacheB");
		DBCollection pulls = db.getCollection("pullscp");
		DBCollection issues = db.getCollection("issuescp");
		
		for(int i = 0 ; i < repo.length ; i ++){
			pullcache.drop();
			issuecache.drop();
			
			PullCrawlerB pullCrawler = new PullCrawlerB();
			IssueCrawlerB issueCrawler = new IssueCrawlerB();
			issueCrawler.crawlIssues(repo[i]);
			pullCrawler.crawlPulls(repo[i]);
			
			DBCursor issuecursor = issuecache.find();
			issuecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (issuecursor.hasNext()) {
				issues.save(issuecursor.next());
			}
			issuecursor.close();
			
			DBCursor pullcursor = pullcache.find();
			pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
			while (pullcursor.hasNext()) {
				pulls.save(pullcursor.next());
			}
			pullcursor.close();
		}
	}
}

package hehe;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class IssueCrawlerA {
	public void crawlIssues(String fullName){
		System.out.println("Start crawl issues------------------------");
		int index = 1;
		String issuesURL = "https://api.github.com/repos/" + fullName + "/issues?state=all&page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection issuecache = db.getCollection("issuecacheA");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			System.exit(0);
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				System.exit(0);
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							issuecache.save(object);
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
						
					}
				}catch(Exception e){
					System.exit(0);
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(issuesURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					System.exit(0);
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package hehe;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class IssueCrawlerB {
	public void crawlIssues(String fullName){
		System.out.println("Start crawl issues------------------------");
		int index = 1;
		String issuesURL = "https://api.github.com/repos/" + fullName + "/issues?state=all&page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection issuecache = db.getCollection("issuecacheB");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			System.exit(0);
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				System.exit(0);
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							issuecache.save(object);
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
						
					}
				}catch(Exception e){
					System.exit(0);
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(issuesURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					System.exit(0);
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(issuesURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package hehe;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class PullCrawlerA {
	public void crawlPulls(String fullName){
		System.out.println("Start crawl pulls------------------------");
		int index = 1;
		String pullsURL = "https://api.github.com/repos/" + fullName + "/pulls?state=all&page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection pullcache = db.getCollection("pullcacheA");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			System.exit(0);
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				System.exit(0);
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							pullcache.save(object);
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
						
					}
				}catch(Exception e){
					System.exit(0);
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(pullsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					System.exit(0);
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package hehe;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;

import utility.GetHostName;
import utility.GetURLConnection;
import utility.MongoInfo;
import utility.ValidateInternetConnection;

import com.google.gson.JsonArray;
import com.google.gson.JsonParser;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.util.JSON;

public class PullCrawlerB {
	public void crawlPulls(String fullName){
		System.out.println("Start crawl pulls------------------------");
		int index = 1;
		String pullsURL = "https://api.github.com/repos/" + fullName + "/pulls?state=all&page=";
		HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
		BufferedReader reader = null;
		String response = "";
		int responseCode = 200;
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection pullcache = db.getCollection("pullcacheB");
		
		try {
			responseCode = urlConnection.getResponseCode();
		} catch (Exception e) {
			System.exit(0);
			// TODO: handle exception
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
			try {
				responseCode = urlConnection.getResponseCode();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		if(responseCode == 200){
			try {
				reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
				response = reader.readLine();
			} catch (Exception e) {
				System.exit(0);
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				try{
					urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				}catch(Exception e2){
					e2.printStackTrace();
				}
			}
			
			while (response != null && !response.equals("[]")){
				try{
					JsonArray jsonArray = new JsonParser().parse(response)
							.getAsJsonArray();
					for (int i = 0; i < jsonArray.size(); i++) {
						String concreteURL = jsonArray.get(i).getAsJsonObject()
								.get("url").toString();
						urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
						
						try {
							reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
							response = reader.readLine();
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							while(ValidateInternetConnection.validateInternetConnection() == 0){
								System.out.println("Wait for connecting the internet---------------");
								try {
									Thread.sleep(30000);
								} catch (InterruptedException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							}
							System.out.println("The internet is connected------------");
							try{
								urlConnection = GetURLConnection.getUrlConnection(concreteURL.substring(1,concreteURL.length() - 1));
								reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
								response = reader.readLine();
							}catch(Exception e2){
								e2.printStackTrace();
							}
						}
						
						try {
							DBObject object = (BasicDBObject) JSON.parse(response);
							object.put("fn", fullName);
							pullcache.save(object);
						} catch (Exception e) {
							System.exit(0);
							// TODO: handle exception
							System.out.println("can not translate it to json----------------------------");
						}
						
					}
				}catch(Exception e){
					System.exit(0);
					System.out.println("can not translate it to json----------------------------");
				}
				
				System.out.println(pullsURL + index);
				index = index + 1;
				urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
				
				try {
					reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
					response = reader.readLine();
				} catch (Exception e) {
					System.exit(0);
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					try{
						urlConnection = GetURLConnection.getUrlConnection(pullsURL + index);
						reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
						response = reader.readLine();
					}catch(Exception e2){
						e2.printStackTrace();
					}
				}
			}
		}
		
	}
}

package hehe;

import githubCrawler.AssigneeCrawler;
import githubCrawler.ContributorCrawler;
import githubCrawler.PullCrawler;
import utility.GetHostName;
import utility.MongoInfo;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;

public class RepoReFilter {
	
	public static void main(String[] args){
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("NewProject");
		DB db1 = mongo.getDB("Experiment");
		DBCollection repocondition = db.getCollection("repocondition");
		DBCursor rc = repocondition.find();
		rc.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		
		AssigneeCrawler assigneeCrawler = new AssigneeCrawler();
		ContributorCrawler contributorCrawler = new ContributorCrawler();
		PullCrawler pullCrawler = new PullCrawler();
		
		DBCollection assigneecache = db1.getCollection(GetHostName.getHostName() + "assigneecache");
		DBCollection contributorcache = db1.getCollection(GetHostName.getHostName() + "contributorcache");
		DBCollection pullcache = db1.getCollection(GetHostName.getHostName() + "pullcache");
		DBCollection usercache = db1.getCollection(GetHostName.getHostName() + "usercache");
		DBCollection assignee = db1.getCollection("assignees");
		DBCollection contributor = db1.getCollection("contributors");
		DBCollection pull = db1.getCollection("pulls");
		DBCollection user = db1.getCollection("user");
		DBCollection repocondition1 = db1.getCollection("repocondition");
		DBCollection mergedpr = db1.getCollection("mergedpr");
		
		DBCursor assCursor = assigneecache.find();
		assCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		int count = 0;
		int insider = 0;
		int outsider = 0;
		int contributornum = 0;
		int mpr = 0;
		int judge1 = 0;
		
		while(rc.hasNext()){
			DBObject object = rc.next();
			if(object.get("fn").equals("Activiti/Activiti")){
				judge1 = 1;
			}
			if(judge1 == 1){
				if(Integer.parseInt(object.get("closepull").toString()) != Integer.parseInt(object.get("closeissue").toString())){
					assigneecache.drop();
					contributorcache.drop();
					pullcache.drop();
					usercache.drop();
					count = 0;
					
					assigneeCrawler.crawlAssignees(object.get("fn").toString());
					contributorCrawler.crawlContributors(object.get("fn").toString());
					pullCrawler.crawlPulls(object.get("fn").toString());
					
					assCursor = assigneecache.find();
					while(assCursor.hasNext()){
						DBObject test = new BasicDBObject();
						test.put("login", assCursor.next().get("login"));
						if(contributorcache.find(test).size() > 0){
							count ++;
							//System.out.println(count);
						}
					}
					insider = assigneecache.find().size();
					outsider = contributorcache.find().size() - count;
					contributornum = contributorcache.find().size();
					
					if(outsider >= insider){
						DBObject test1 = new BasicDBObject();
						test1.put("merged", true);
						
						mpr = pullcache.find(test1).size();
						if(mpr / 1.0 / pullcache.find().size() >= 0.1){
							DBObject rc1 = new BasicDBObject();
							rc1.put("java", object.get("java"));
							rc1.put("closepull", object.get("closepull"));
							rc1.put("closeissue", object.get("closeissue"));
							rc1.put("mpr", mpr);
							rc1.put("outsider", outsider);
							rc1.put("insider", insider);
							rc1.put("contributor", contributornum);
							rc1.put("fn", object.get("fn"));
							repocondition1.save(rc1);
							
							DBCursor assigneecursor = assigneecache.find();
							assigneecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
							while (assigneecursor.hasNext()) {
								assignee.save(assigneecursor.next());
							}
							assigneecursor.close();
							
							DBCursor contributorcursor = contributorcache.find();
							contributorcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
							while (contributorcursor.hasNext()) {
								contributor.save(contributorcursor.next());
							}
							contributorcursor.close();
							
							DBCursor userCursor = usercache.find();
							userCursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
							while(userCursor.hasNext()){
								DBObject object111 = userCursor.next();
								DBObject judge = new BasicDBObject();
								judge.put("login", object111.get("login").toString());
								if(user.find(judge).limit(1).size() == 0){
									user.save(object111);
								}
							}
							userCursor.close();
							
							DBCursor pullcursor = pullcache.find();
							pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
							while (pullcursor.hasNext()) {
								DBObject pulltest = pullcursor.next();
								if(pulltest.get("merged").toString().equals("true")){
									DBObject object2 = new BasicDBObject();
									object2.put("pr_id", pulltest.get("id"));
									object2.put("pr_number", pulltest.get("number"));
									object2.put("patch_url", pulltest.get("patch_url"));
									object2.put("diff_url", pulltest.get("diff_url"));
									object2.put("fn", pulltest.get("fn"));
									mergedpr.save(object2);
									pull.save(pulltest);
								}else{
									pull.save(pulltest);
								}
							}
							pullcursor.close();
						}
					}			
				}
			}
		}
	}
}

package hehe;

import org.bson.Document;

import userInfoFetch.UserDeal;
import utility.GetHostName;
import utility.MongoInfo;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.client.MongoCollection;

public class Test {
	public static void main(String[] args){
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		
		DBCollection oldCollection = db.getCollection("assignees");
		DBCollection user = db.getCollection("user");
		int index = 0;
		
		DBCursor cursor = oldCollection.find();
		cursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		while(cursor.hasNext()){
			DBObject object = cursor.next();
			String login = object.get("login").toString();
			//System.out.println(reponame);
			DBObject temp = new BasicDBObject();
			temp.put("login", login);
			index ++;
			if(user.find(temp).size() == 1){
				//System.out.print(index + " ");
			}else{
				System.err.println(login);
			}
		}
	}
}
/*owenchen
19930301owenchen*/

package hehe;

public class TTest {
	private int index = 0;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new TTest().new Fuck().fuck();
	}

	class Fuck{
		public void fuck(){
			index = 2;
		}
	}
}

package historyDownload;

import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.zip.GZIPInputStream;

public class DecompressFile {

	public boolean decompress(String inFileName) {
		try {   
			//judge if a *.gz file
			if (!getExtension(inFileName).equalsIgnoreCase("gz")) {   
                System.err.println("File name must have extension of \".gz\"");   
                System.exit(1);   
            }   

            System.out.println("Opening the compressed file.");  
            
            //init gzstream, fos
            GZIPInputStream in = null;   
            try {   
                in = new GZIPInputStream(new FileInputStream(inFileName));   
            } catch(FileNotFoundException e) {   
                System.err.println("File not found. " + inFileName);     
            }   
  
            System.out.println("Open the output file.");   
            String outFileName = getFileName(inFileName);   
            FileOutputStream out = null;   
           try {   
                out = new FileOutputStream(outFileName);   
            } catch (FileNotFoundException e) {   
                System.err.println("Could not write to file. " + outFileName);   
                System.exit(1);   
            }   
  
            System.out.println("Transfering bytes from compressed file to" +outFileName);   
            byte[] buf = new byte[1024];   
            int len;   
            try{
                while((len = in.read(buf)) > 0) {   
                    out.write(buf, 0, len);   
                } 	
            }catch(NullPointerException e){
            	
            }
  
            System.out.println("success decompress");   
            in.close();   
            out.close();   
        } catch (IOException e) {   
            e.printStackTrace();  
			try {
				FileWriter fw = new FileWriter("history log",true);
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(inFileName+"\n");
				bw.flush();
				bw.close();
				fw.close();
			} catch (Exception e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
            return false;
        }
		return true;   
	}
	
	public static String getFileName(String f) {   
        String fname = "";   
        int i = f.lastIndexOf('.');   
  
        if (i > 0 &&  i < f.length() - 1) {   
            fname = f.substring(0,i);   
        }        
        return fname;   
    }  
	
    public static String getExtension(String f) {   
        String ext = "";   
        int i = f.lastIndexOf('.');   
  
        if (i > 0 &&  i < f.length() - 1) {   
            ext = f.substring(i+1);   
        }        
        return ext;   
    }  
}

package historyDownload;

import java.io.BufferedInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;

public class DownloadFile {
	/**
	 * make sure if file exists
	 * 
	 * @param pathAndFile
	 * @return
	 */
	private boolean fileExist(String pathAndFile) {
		File file = new File(pathAndFile);
		if (file.exists())
			return true;
		else
			return false;
	}

	// file downloaded size
	private long fileSize(String pathAndFile) {
		File file = new File(pathAndFile);
		return file.length();
	}

	// change file name ,remove .tp
	private void fileRename(String fName, String nName) {
		File file = new File(fName);
		file.renameTo(new File(nName));
		file.delete();
	}

	public boolean download(String urlString, String fileName) {
		// init parameters
		URL url = null;
		HttpURLConnection urlc = null;
		DataOutputStream dos = null;
		BufferedInputStream bis = null;
		FileOutputStream fos = null;

		// where to store
		String localFile = fileName;

		// when uncompleted .tp
		String localFile_bak = localFile + ".tp";

		long fileSize = 0;
		long start = System.currentTimeMillis();
		int len = 0;
		byte[] bt = new byte[1024];
		RandomAccessFile raFile = null;

		// file total size
		long TotalSize = 0;
		try {
			url = new URL(urlString);
			urlc = (HttpURLConnection) url.openConnection();
			try{
				long possible = Long.parseLong(urlc.getHeaderField("Content-Length"));
				TotalSize = possible;
			}catch(Exception e){
				TotalSize = 0;
			}
			System.out.println("file size:" + TotalSize);
			
			urlc = (HttpURLConnection) url.openConnection();
			// if file exists and name is .tp, means download uncompleted,
			// continue
			if (fileExist(localFile_bak)) {
				System.out.println("文件续传中...");
				// get uncomplete file size
				fileSize = fileSize(localFile_bak);
				System.out.println("fileSize:" + fileSize);
				// User-Agent
				// urlc.setRequestProperty("User-Agent","NetFox");
				// set continue place
				urlc.setRequestProperty("RANGE", "bytes=" + fileSize + "-");
				// urlc.setRequestProperty("RANGE",
				// "bytes="+fileSize);//这样写不行，不能少了这个"-".
				// set receive info
				urlc.setRequestProperty("Accept",
						"image/gif,image/x-xbitmap,application/msword,*/*");
				raFile = new RandomAccessFile(localFile_bak, "rw");// 随机方位读取
				raFile.seek(fileSize);// 定位指针到fileSize位置
				bis = new BufferedInputStream(urlc.getInputStream());
				while ((len = bis.read(bt)) > 0) {// 循环获取文件
					raFile.write(bt, 0, len);
				}
				System.out.println("file continue finished！");
			} else {
				// first time download , .tp
				fos = new FileOutputStream(localFile_bak);
				dos = new DataOutputStream(fos);
				bis = new BufferedInputStream(urlc.getInputStream());
				System.out.println("receiving file first time...");
				int test = 0;
				// fetch file
				while ((len = bis.read(bt)) > 0) {
					dos.write(bt, 0, len);
					test++;
				}
			}
			System.out.println("total time："
					+ (System.currentTimeMillis() - start) / 1000 + "s");
			if (bis != null)
				bis.close();
			if (dos != null)
				dos.close();
			if (fos != null)
				fos.close();
			if (raFile != null)
				raFile.close();
			System.out.println("localFile_bak:" + fileSize(localFile_bak));
			// complete & rename
			if (fileSize(localFile_bak) == TotalSize) {
				fileRename(localFile_bak, localFile);
			}
		} catch (Exception e) {
			urlc.disconnect();//先断开，下面再连接，否则下面会报已经连接的错误
			e.printStackTrace();
			return false;
		}
		return true;
	}
}

package historyDownload;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashSet;
import java.util.Set;

import org.bson.Document;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

import utility.MongoInfo;
import utility.MysqlInfo;

public class HisFileFilter {

	public static Set<String> repos = new HashSet<String>();
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		initRepos();
		HisFileFilter hisFileFilter = new HisFileFilter();
		hisFileFilter.handleDateFormat();
//		for (int i = 2013; i < 2016; i++) {
//			File file = new File("/Users/owenchen/Desktop/"+i+"_FWMevent.res");
//			hisFileFilter.filterHistory(file);
//		}
		
	}
	
	public static void initRepos(){
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase db = mongoClient.getDatabase("Experiment");
		FindIterable<Document> exist = db.getCollection("repocondition").find();
		for (Document document : exist) {
			String json = document.toJson();
			JsonParser parser = new JsonParser();
			JsonElement element = parser.parse(json);
			String repo = element.getAsJsonObject().get("fn").getAsString();
			repos.add(repo);
		}
		System.out.println(repos.size()+"repos to filter");
		mongoClient.close();
	}
	
	public void handleDateFormat() throws Exception{
		Connection connection = MysqlInfo.getMysqlConnection();
		String search = "select id,time from HistoryEvent";
		
		String sql = "update HistoryEvent set time = ? where id = ?";
		PreparedStatement stmt = connection.prepareStatement(search);
		ResultSet resultSet = stmt.executeQuery();
		while(resultSet.next()){
			String time = resultSet.getString("time");
			int id = resultSet.getInt("id");
			if(time.contains("/") || time.length() > 19){
				System.out.println(time);
				time = time.substring(0, 19).replaceAll("/", "-");
				stmt = connection.prepareStatement(sql);
				stmt.setString(1, time);
				stmt.setInt(2, id);
				stmt.execute();
			}
		}
		resultSet.close();
		stmt.close();
		connection.close();
		
	}
	
	public void filterHistory(File file) throws Exception{
		Connection connection = MysqlInfo.getMysqlConnection();
		String sql = "insert into HistoryEvent(full_name,type,time,person,action) values(?,?,?,?,?);";
		PreparedStatement stmt = connection.prepareStatement(sql);
		connection.setAutoCommit(false);
		
		FileReader fileReader = new FileReader(file);
		BufferedReader br = new BufferedReader(fileReader);
		String line = "";
		while ((line=br.readLine()) != null) {
			String[] items = line.split(",");
			if(items.length < 5){
				line = line + br.readLine();
				items = line.split(",");
			}
			String full_name = items[0];
			String type = items[1];
			String time = items[2].replaceAll("T", " ").replaceAll("Z", "");
			System.out.println(time);
			if(repos.contains(full_name)){
				String person = items[3];
				String action = items[4];
				System.out.println("-------------------------------------------");
				stmt.setString(1, full_name);
				stmt.setString(2, type);
				stmt.setString(3, time);
				stmt.setString(4, person);
				stmt.setString(5, action);
				stmt.execute();
			}
			
		}
		connection.commit();
		stmt.close();
		connection.close();
	}

}

package historyDownload;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;

public class HistoryDriver {
	public static void main(String[] args) throws FileNotFoundException, IOException {
		HistoryDriver historyDriver = new HistoryDriver();
		Properties properties = new Properties();
		String path = Thread.currentThread().getContextClassLoader()
				.getResource("config.properties").getPath();
		properties.load(new FileInputStream(new File(path)));
		String start = properties.getProperty("date.start");
		String end = properties.getProperty("date.end");
		historyDriver.filterData(start, end);
	}

	public void filterData(String start, String end) {
		String hour =start;
		try {
			Properties properties = new Properties();
			String path = Thread.currentThread().getContextClassLoader()
					.getResource("config.properties").getPath();
			properties.load(new FileInputStream(new File(path)));
			String tmpFilePlace = properties.getProperty("tmp.file.place");
			//tmpFilePlace = "~/Desktop/";
			HistoryFilter.init();
			DownloadFile downloadFile = new DownloadFile();
			DecompressFile decompressFile = new DecompressFile();
			while (!hour.equals(end)) {
				System.out.println("aa");
				try{
					if (HistoryFilter.validate(hour)) {
						String url = "http://data.githubarchive.org/" + hour
								+ ".json.gz";
						String gzoutput = tmpFilePlace+ hour + ".json.gz";
						String jsonoutput = tmpFilePlace+ hour + ".json";
//						boolean download = downloadFile.download(url, gzoutput);
//						if (!download) {
//							System.err.println("下载失败" + gzoutput);							
//							try {
//								FileWriter fw = new FileWriter("history log",true);
//								BufferedWriter bw = new BufferedWriter(fw);
//								bw.write(hour+"\n");
//								bw.flush();
//								bw.close();
//								fw.close();
//							} catch (Exception e2) {
//								// TODO: handle exception
//								e2.printStackTrace();
//							}	
//							hour = getNextHour(hour);
//							Thread.sleep(120000);
//							continue;
//						}
						File gzFile = new File(gzoutput);
						File jsonFile = new File(jsonoutput);
						if(jsonFile.exists()){
							HistoryFilter.hashFilter(jsonFile, hour);
						}else if(gzFile.exists()){
							boolean decompress = decompressFile.decompress(gzoutput);
							if (!decompress) {
								System.err.println("解压失败" + gzoutput);
								hour = getNextHour(hour);
								continue;
							}
							HistoryFilter.hashFilter(jsonFile, hour);
							jsonFile.delete();
						}else{
							System.err.println(gzoutput+"数据缺失");
						}
					}					
				}catch(Exception e){
					try {
						FileWriter fw = new FileWriter("history log",true);
						BufferedWriter bw = new BufferedWriter(fw);
						bw.write(hour+"\n");
						bw.flush();
						bw.close();
						fw.close();
						e.printStackTrace();
					} catch (Exception e2) {
						// TODO: handle exception
						e2.printStackTrace();
					}					
				}

				hour = getNextHour(hour);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static String getNextHour(String input) {
		String result = "";
		String[] monthName = { "00", "01", "02", "03", "04", "05", "06", "07",
				"08", "09", "10", "11", "12" };
		String[] dayName = { "00", "01", "02", "03", "04", "05", "06", "07",
				"08", "09", "10", "11", "12", "13", "14", "15", "16", "17",
				"18", "19", "20", "21", "22", "23", "24", "25", "26", "27",
				"28", "29", "30", "31" };
		int[] days = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

		String[] items = input.split("-");
		int year = Integer.parseInt(items[0]);
		int month = Integer.parseInt(items[1]);
		int day = Integer.parseInt(items[2]);
		int hour = Integer.parseInt(items[3]);

		// February 29 days
		if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
			days[2] = 29;
		}

		hour++;
		if (hour > 23) {
			hour = hour - 24;
			day++;
		}
		if (day > days[month]) {
			day = 1;
			month++;
		}
		if (month > 12) {
			month = 1;
			year++;
		}

		result = year + "-" + monthName[month] + "-" + dayName[day] + "-"
				+ hour;
		return result;
	}
}

package historyDownload;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;

public class HistoryDriverBefore2013 {
	public static void main(String[] args) throws FileNotFoundException, IOException {
		HistoryDriverBefore2013 historyDriver = new HistoryDriverBefore2013();
		Properties properties = new Properties();
		String path = Thread.currentThread().getContextClassLoader()
				.getResource("config.properties").getPath();
		properties.load(new FileInputStream(new File(path)));
		String start = properties.getProperty("date.start");
		String end = properties.getProperty("date.end");
		historyDriver.filterData(start, end);
	}

	public void filterData(String start, String end) {
		String hour =start;
		try {
			Properties properties = new Properties();
			String path = Thread.currentThread().getContextClassLoader()
					.getResource("config.properties").getPath();
			properties.load(new FileInputStream(new File(path)));
			String tmpFilePlace = properties.getProperty("tmp.file.place");
			//tmpFilePlace = "~/Desktop/";
			HistoryFilterBefore2013.init();
			DownloadFile downloadFile = new DownloadFile();
			DecompressFile decompressFile = new DecompressFile();
			while (!hour.equals(end)) {
				System.out.println("aa");
				try{
					if (HistoryFilterBefore2013.validate(hour)) {
						String url = "http://data.githubarchive.org/" + hour
								+ ".json.gz";
						String gzoutput = tmpFilePlace+ hour + ".json.gz";
						String jsonoutput = tmpFilePlace+ hour + ".json";
						File gzFile = new File(gzoutput);
						File jsonFile = new File(jsonoutput);
						if(jsonFile.exists()){
							HistoryFilterBefore2013.hashFilter(jsonFile, hour);
						}else if(gzFile.exists()){
							boolean decompress = decompressFile.decompress(gzoutput);
							if (!decompress) {
								System.err.println("解压失败" + gzoutput);
								hour = getNextHour(hour);
								continue;
							}
							HistoryFilterBefore2013.hashFilter(jsonFile, hour);
							jsonFile.delete();
						}else{
							System.err.println(gzoutput+"数据缺失");
						}
					}					
				}catch(Exception e){
					try {
						FileWriter fw = new FileWriter("history log",true);
						BufferedWriter bw = new BufferedWriter(fw);
						bw.write(hour+"\n");
						bw.flush();
						bw.close();
						fw.close();
						e.printStackTrace();
					} catch (Exception e2) {
						// TODO: handle exception
						e2.printStackTrace();
					}					
				}

				hour = getNextHour(hour);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static String getNextHour(String input) {
		String result = "";
		String[] monthName = { "00", "01", "02", "03", "04", "05", "06", "07",
				"08", "09", "10", "11", "12" };
		String[] dayName = { "00", "01", "02", "03", "04", "05", "06", "07",
				"08", "09", "10", "11", "12", "13", "14", "15", "16", "17",
				"18", "19", "20", "21", "22", "23", "24", "25", "26", "27",
				"28", "29", "30", "31" };
		int[] days = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

		String[] items = input.split("-");
		int year = Integer.parseInt(items[0]);
		int month = Integer.parseInt(items[1]);
		int day = Integer.parseInt(items[2]);
		int hour = Integer.parseInt(items[3]);

		// February 29 days
		if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
			days[2] = 29;
		}

		hour++;
		if (hour > 23) {
			hour = hour - 24;
			day++;
		}
		if (day > days[month]) {
			day = 1;
			month++;
		}
		if (month > 12) {
			month = 1;
			year++;
		}

		result = year + "-" + monthName[month] + "-" + dayName[day] + "-"
				+ hour;
		return result;
	}
}

package historyDownload;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashSet;

import org.bson.Document;

import utility.MongoInfo;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class HistoryFilter {
	private static HashSet<Integer> repoIdSet = new HashSet<Integer>();
	public static void init(){
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase db = mongoClient.getDatabase("NewProject");
		FindIterable<Document> exist = db.getCollection("repo").find();
		for (Document document : exist) {
			String json = document.toJson();
			JsonParser parser = new JsonParser();
			JsonElement element = parser.parse(json);
			int repo_id = element.getAsJsonObject().get("id").getAsInt();
			repoIdSet.add(repo_id);
		}
		System.out.println(repoIdSet.size()+"repos to filter");
		mongoClient.close();
	}
	
	public static boolean validate(String hour){
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase db = mongoClient.getDatabase("historyevents2");
		FindIterable<Document> iterable = db.getCollection("hour").find(new Document("hour", hour));
		if (iterable.first() != null) {
			System.out.println(hour + " exists!");
			mongoClient.close();
			return false;
		}
		mongoClient.close();
		return true;
	}
	
	public static void hashFilter(File file,String hour){
		try{
			MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
			MongoDatabase db = mongoClient.getDatabase("historyevents2");
			
			Document document = new Document();
			document.append("hour", hour);
			document.append("finish", false);
			db.getCollection("hour").insertOne(document);
			
			FileReader fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			String line = "";
			while ((line = br.readLine()) != null) {
				JsonParser parser = new JsonParser();
				JsonObject event = parser.parse(line).getAsJsonObject();
				int repoId = 0;
				if(event.has("repo")){
//					String eventString = event.toString();
//					String id = eventString.split(":")[3].split(",")[0];
//					repoId = Integer.parseInt(id);
					System.out.println(event.get("repo").toString());
					repoId = event.get("repo").getAsJsonObject().get("id").getAsInt();
				}else if(event.has("repository")){
					repoId = event.get("repository").getAsJsonObject().get("id").getAsInt();
				}
				
				if(repoId!=0 && repoIdSet.contains(repoId)){
					db.getCollection("spec_events").insertOne(Document.parse(line));
				}
			}
			db.getCollection("hour").updateOne(new Document("hour",hour),new Document("$set",new Document("finish","true")));
			br.close();
			fr.close();
			mongoClient.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
}

package historyDownload;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashSet;

import org.bson.Document;

import utility.MongoInfo;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class HistoryFilterBefore2013 {
	private static HashSet<String> repoSet = new HashSet<String>();
	public static void init(){
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase db = mongoClient.getDatabase("NewProject");
		FindIterable<Document> exist = db.getCollection("repo").find();
		for (Document document : exist) {
			String json = document.toJson();
			JsonParser parser = new JsonParser();
			JsonElement element = parser.parse(json);
			String repo = element.getAsJsonObject().get("full_name").getAsString();
			repoSet.add(repo);
		}
		System.out.println(repoSet.size()+"repos to filter");
		mongoClient.close();
	}
	
	public static boolean validate(String hour){
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase db = mongoClient.getDatabase("historyevents2");
		FindIterable<Document> iterable = db.getCollection("hour").find(new Document("hour", hour));
		if (iterable.first() != null) {
			System.out.println(hour + " exists!");
			mongoClient.close();
			return false;
		}
		mongoClient.close();
		return true;
	}
	
	public static void hashFilter(File file,String hour){
		try{
			MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
			MongoDatabase db = mongoClient.getDatabase("historyevents2");
			
			Document document = new Document();
			document.append("hour", hour);
			document.append("finish", false);
			db.getCollection("hour").insertOne(document);
			
			FileReader fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			String line = "";
			boolean quote = false;
			int level = 0;
			int start =0;
			while ((line = br.readLine()) != null) {
				for(int i=0; i< line.length(); i++){
					if(line.charAt(i)=='"'){
						quote = quote?false:true;
					}
					if(!quote){
						if(line.charAt(i)=='{'){
							level++;
						}
						if(line.charAt(i)=='}'){
							level--;
						}						
					}

					if(level == 0){
						String jsonString = line.substring(start, i+1);
						start=i+1;
						JsonParser parser = new JsonParser();
						JsonObject event = parser.parse(jsonString).getAsJsonObject();
						String full_name = null;
						if(event.has("repo")){
//							String eventString = event.toString();
//							String id = eventString.split(":")[3].split(",")[0];
//							repoId = Integer.parseInt(id);
							System.out.println(event.get("repo").toString());
							String owner = event.get("repo").getAsJsonObject().get("owner").getAsString();
							String name = event.get("repo").getAsJsonObject().get("name").getAsString();
							full_name = owner+"/"+name;
						}else if(event.has("repository")){
							String owner = event.get("repository").getAsJsonObject().get("owner").getAsString();
							String name = event.get("repository").getAsJsonObject().get("name").getAsString();
							full_name = owner+"/"+name;
						}
						
						if(full_name!=null && repoSet.contains(full_name)){
							db.getCollection("spec_events").insertOne(Document.parse(jsonString).append("full_name", full_name));
						}
					}
				}

			}
			db.getCollection("hour").updateOne(new Document("hour",hour),new Document("$set",new Document("finish","true")));
			br.close();
			fr.close();
			mongoClient.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
}

package metrics22;

public class Assign {
	int start;
	int length;
	String expression;
	public Assign(int start, int length, String expression) {
		super();
		this.start = start;
		this.length = length;
		this.expression = expression;
	}
	public int getStart() {
		return start;
	}
	public void setStart(int start) {
		this.start = start;
	}
	public int getLength() {
		return length;
	}
	public void setLength(int length) {
		this.length = length;
	}
	public String getExpression() {
		return expression;
	}
	public void setExpression(String expression) {
		this.expression = expression;
	}
	
}

package metrics22;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.Assignment;
import org.eclipse.jdt.core.dom.Block;
import org.eclipse.jdt.core.dom.BlockComment;
import org.eclipse.jdt.core.dom.CatchClause;
import org.eclipse.jdt.core.dom.Expression;
import org.eclipse.jdt.core.dom.ExpressionStatement;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.ForStatement;
import org.eclipse.jdt.core.dom.IfStatement;
import org.eclipse.jdt.core.dom.LineComment;
import org.eclipse.jdt.core.dom.MemberRef;
import org.eclipse.jdt.core.dom.MemberValuePair;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.MethodInvocation;
import org.eclipse.jdt.core.dom.MethodRef;
import org.eclipse.jdt.core.dom.MethodRefParameter;
import org.eclipse.jdt.core.dom.Modifier;
import org.eclipse.jdt.core.dom.NormalAnnotation;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.eclipse.jdt.core.dom.TypeDeclarationStatement;
import org.eclipse.jdt.core.dom.TypeParameter;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
import org.eclipse.jdt.core.dom.WhileStatement;

public class ClassVisitor extends ASTVisitor {
	String content;
	List<Integer> lineEnd = new ArrayList<Integer>();
	public ClassVisitor(String content, List<Integer> lineEnd) {
		super();
		this.content = content;
		this.lineEnd = lineEnd;
	}

	List<String> className = new ArrayList<String>();
	List<Integer> classStart = new ArrayList<Integer>();
	List<String> classFieldNames = new ArrayList<String>();
	List<String> methodsNames = new ArrayList<String>();
	List<Integer> methodsStart = new ArrayList<Integer>();
	List<Assign> assigns = new ArrayList<Assign>();
	List<VarDeclare> varDeclares = new ArrayList<VarDeclare>();
	List<SpecialStmt> specialStmts = new ArrayList<SpecialStmt>();
	List<String> methodsParameterNames = new ArrayList<String>();
	List<metrics22.Expression> express=new ArrayList<metrics22.Expression>();
	
//////////////////////////////////////////// level class /////////////////////////////////////////////////
	@Override
	/**
	 * class name fetch
	 */
	public boolean visit(TypeDeclaration node) {
		// TODO Auto-generated method stub
		classStart.add(node.getStartPosition());
		node.getLength();
		className.add(node.getName().getIdentifier());
		return super.visit(node);
	}
	
	@Override
	public boolean visit(FieldDeclaration node) {
		// TODO Auto-generated method stub
		for (Object obj: node.fragments()) {  
            VariableDeclarationFragment v = (VariableDeclarationFragment)obj;  
            classFieldNames.add(v.getName().getIdentifier());
            VarDeclare varDeclare = new VarDeclare(v.getName().getIdentifier(), node.getStartPosition(), node.getLength(), node.toString());
            varDeclares.add(varDeclare);
		}  
        Assign assign = new Assign(node.getStartPosition(), node.getLength(), node.toString());
        assigns.add(assign);
		return super.visit(node);
	}
////////////////////////////////////////////level class /////////////////////////////////////////////////
	


////////////////////////////////////////////level method /////////////////////////////////////////////////
	@Override
	public boolean visit(MethodDeclaration node) {
		// TODO Auto-generated method stub
		methodsNames.add(node.getName().getIdentifier());
		methodsStart.add(node.getStartPosition());
		List<SingleVariableDeclaration> parameters = node.parameters();
		for (SingleVariableDeclaration singleVariableDeclaration : parameters) {
			String name = singleVariableDeclaration.getName().toString();
			methodsParameterNames.add(name);
		}
		Block block = node.getBody();
		return super.visit(node);
	}
////////////////////////////////////////////level method /////////////////////////////////////////////////

////////////////////////////////////////////level statement /////////////////////////////////////////////////
	@Override
	public boolean visit(ExpressionStatement node) {
		// TODO Auto-generated method stub
		metrics22.Expression e=new metrics22.Expression(node.getStartPosition(), node.getLength(), node.toString());
		express.add(e);
		return super.visit(node);
	}
	/**
	 * Assignment绫伙紙璧嬪�艰〃杈惧紡锛�
	 */
	@Override
	public void endVisit(Assignment node) {
		// TODO Auto-generated method stub
		Expression expressionLeft = node.getLeftHandSide();
		Expression expressionRight = node.getRightHandSide();
		Assign assign = new Assign(node.getStartPosition(), node.getLength(), node.toString());
        assigns.add(assign);
		super.endVisit(node);
	}

	@Override
	public void endVisit(MethodInvocation node) {
		// TODO Auto-generated method stub
		super.endVisit(node);
	}
	
	@Override
	public boolean visit(VariableDeclarationStatement node) {
		// TODO Auto-generated method stub
		List<VariableDeclarationFragment >frags = node.fragments();
		for (VariableDeclarationFragment frg : frags) {
            VarDeclare varDeclare = new VarDeclare(frg.getName().getIdentifier(), node.getStartPosition(), node.getLength(), node.toString());
            varDeclares.add(varDeclare);
		}
        Assign assign = new Assign(node.getStartPosition(), node.getLength(), node.toString());
        assigns.add(assign);
		return super.visit(node);
	}
	
	
	
@Override
	public void endVisit(CatchClause node) {
		// TODO Auto-generated method stub
		SpecialStmt specialStmt = new SpecialStmt(node.toString(), node.getStartPosition(), node.getLength(), "catch");
		specialStmts.add(specialStmt);
		super.endVisit(node);
	}

	@Override
	public boolean visit(ForStatement node) {
		// TODO Auto-generated method stub
		SpecialStmt specialStmt = new SpecialStmt(node.toString(), node.getStartPosition(), node.getLength(), "for");
		specialStmts.add(specialStmt);
		return super.visit(node);
	}

	@Override
	public boolean visit(IfStatement node) {
		// TODO Auto-generated method stub
		SpecialStmt specialStmt = new SpecialStmt(node.toString(), node.getStartPosition(), node.getLength(), "if");
		specialStmts.add(specialStmt);
		return super.visit(node);
	}

	@Override
	public boolean visit(WhileStatement node) {
		// TODO Auto-generated method stub
		SpecialStmt specialStmt = new SpecialStmt(node.toString(), node.getStartPosition(), node.getLength(), "while");
		specialStmts.add(specialStmt);
		return super.visit(node);
	}

	////////////////////////////////////////////level statement /////////////////////////////////////////////////
	@Override
	public boolean visit(TypeDeclarationStatement node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}



	@Override
	public boolean visit(Block node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(MemberRef node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(MemberValuePair node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(MethodInvocation node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(NormalAnnotation node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(SimpleName node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(Modifier node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(BlockComment node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(LineComment node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}


	@Override
	public boolean visit(TypeParameter node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(MethodRef node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public boolean visit(MethodRefParameter node) {
		// TODO Auto-generated method stub
		return super.visit(node);
	}

	@Override
	public void endVisit(IfStatement node) {
		Map<Object, Object> map = node.properties();
		Set<Object> keys = map.keySet();
		for (Object object : keys) {
			System.out.println(object + "   " + map.get(object));
		}
		super.endVisit(node);
	}

}

package metrics22;

import java.util.List;

public class Driver {

	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		if (args.length != 2) {
			System.out.println("r u ****ing kidding me?");
			return;
		}
		List<String> files = FileNameReader.getFileNames(args[1]);
		String type = args[0];
		Metric1 metric1=new Metric1();
		String metric1result=metric1.getMetrics1Result(type, files);
		Metrics2 metrics2 = new Metrics2();
		String metrics2Result = metrics2.getMetrics2Result(type, files);
		Metrcis3 metrcis3 = new Metrcis3();
		String metrics3Result = metrcis3.getMetrics3Result(files);
		System.out.print(metric1result+metrics2Result+metrics3Result);
	}

}

package metrics22;

public class Expression {
	private String expression;
	private int start;
	private int length;

	public Expression(int start, int length, String expression) {
		this.start = start;
		this.length = length;
		this.expression = expression;
	}

	public int getLength() {
		return length;
	}

	public void setLength(int length) {
		this.length = length;
	}

	public int getStart() {
		return start;
	}

	public void setStart(int start) {
		this.start = start;
	}

	public String getExpression() {
		return expression;
	}

	public void setExpression(String expression) {
		this.expression = expression;
	}
}

package metrics22;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

public class FileNameReader {
	public static List<String> getFileNames(String filePath) throws Exception{
		List<String> names = new ArrayList<String>();
		
		File file = new File(filePath);
		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);
		
		String line = "";
		while((line = br.readLine()) != null){
			names.add(line);
		}
		
		br.close();
		fr.close();
		
		return names;
	}
}

package metrics22;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class FileStringReader {
	public String getFileContent(String fileName) throws IOException {
		// init content
		String content = null;
		// read file
		BufferedInputStream bufferedInputStream = new BufferedInputStream(
				new FileInputStream(fileName));
		byte[] input = new byte[bufferedInputStream.available()];
		bufferedInputStream.read(input);
		bufferedInputStream.close();
		content = new String(input);
		// push into content
		return content;
	}

	public String removeUselessStmt(String content) throws IOException {
		String result = content.replaceAll("\\}", "");
		result = result.replaceAll("\\{", "\\{\\}");
		result = "public class ASTRANGE121NAME{\n" + result + "\n}";
		return result;
	}

	public String removeUselessStmtMetric5(String content) throws IOException {
		// String result = content.replaceAll("\\}", "");
		// result = result.replaceAll("\\{", "\\{\\}");
		String result = "public class ASTRANGE121NAME{\npublic static void main(String[] args){\n"
				+ content + "}\n}";
		return result;
	}
}

package metrics22;

import java.util.ArrayList;
import java.util.List;

public class LineIdentifier {
	public static List paserLineEnd(String content){
		List<Integer> lines = new ArrayList<Integer>();
		int length = content.length();
		//check if chatAt i is \n
		for(int i=0; i<length; i++){
			if(content.charAt(i)=='\n'){
				lines.add(i);
			}
		}
		return lines;
	}
}

package metrics22;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;

public class Metrcis3 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//String string = "b";
		//System.out.println(string.contains("\"[\\d\\D]*;//[\\d\\D]*\""));
		//Pattern pattern = Pattern.compile("[^abc]");
		//Matcher matcher = pattern.matcher(string);
		//System.out.println(matcher.matches());
		
		List<String> list = new ArrayList<String>();
		list.add("C:\\Users\\Administrator\\Desktop\\DB\\hazelcast_559");
		//list.add("I:\\EEEEEEEEEEclipse\\DataCrawler\\src\\main\\java\\githubCrawler\\GitCrawler.java");
		Metrcis3 codeAnalysis = new Metrcis3();
		//codeAnalysis.commentRatio(list);
		//codeAnalysis.commentMethod(list);
		//codeAnalysis.classLen(list);
		//codeAnalysis.funcLen(list);
		//codeAnalysis.blankB4cmt(list);
		//codeAnalysis.blankAfterCmt(list);
		//codeAnalysis.blankBetweenCAndC(list);
		try {
			System.out.println(codeAnalysis.getMetrics3Result(list));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public String getMetrics3Result(List<String> fileNames) throws Exception{
		String result = "";
		int[] commentRatio = commentRatio(fileNames);
		int[] commentMethod = commentMethod(fileNames);
		int[] classLen = classLen(fileNames);
		int[] funcLen = funcLen(fileNames);
		int[] blankB4cmt = blankB4cmt(fileNames);
		int[] blankAfterCmt = blankAfterCmt(fileNames);
		int[] blankBetweenCAndC = blankBetweenCAndC(fileNames);
		
		if(commentRatio[0] == 0){
			result = result + "#,";
		}else{
			result = result + (commentRatio[1] / 1.0 / commentRatio[0]) + ",";
		}
		
		if(blankBetweenCAndC[0] == 0){
			result = result + "#,";
		}else{
			result = result + (blankBetweenCAndC[1] / 1.0 / blankBetweenCAndC[0]) + ",";
		}
		
		if((commentMethod[0] + commentMethod[1]) == 0){
			result = result + "#,";
		}else{
			result = result + (commentMethod[0] / 1.0 / (commentMethod[0] + commentMethod[1])) + ",";
		}
		
		if(blankB4cmt[0] == 0){
			result = result + "#,";
		}else{
			result = result + (blankB4cmt[1] / 1.0 / blankB4cmt[0]) + ",";
		}
		
		if(blankAfterCmt[0] == 0){
			result = result + "#,";
		}else{
			result = result + (blankAfterCmt[1] / 1.0 / blankAfterCmt[0]) + ",";
		}
		
		if(classLen[0] == 0){
			result = result + "#,";
		}else{
			result = result + (classLen[1] / 1.0 / classLen[0]) + ",";
		}
		
		if(funcLen[0] == 0){
			result = result + "#";
		}else{
			result = result + (funcLen[1] / 1.0 / funcLen[0]);
		}
		
		
		return result;
	} 
	
	public int[] commentRatio(List<String> fileNames){
		int N = 0;
		int M = 0;
		int[] result = new int[2];
		int quotationState = 0;
		boolean hasComment = false;
		String commetState = "close";
		
		for(int k = 0 ; k < fileNames.size() ; k ++){
			quotationState = 0;
			hasComment = false;
			commetState = "close";
			try {
				FileReader reader = new FileReader(new File(fileNames.get(k)));
				BufferedReader bufferedReader = new BufferedReader(reader);
				String string = "";
				while((string = bufferedReader.readLine()) != null){
					N ++;
					hasComment = false;
					if(string.length() == 0){
						if (commetState == "open") {
							M ++;
						}
					}else{
						for(int i = 0 ; i < string.length() ; i ++){
							if(commetState.equals("close") && string.charAt(i) == '"' &&  i > 0 && string.charAt(i - 1) != '\\' && string.charAt(i - 1) != '\''){
								if(quotationState == 0){
									quotationState = 1;
								}else{
									quotationState = 0;
								}
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								i = string.length();
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '*'){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								commetState = "open";
								i ++ ;
							}else if(quotationState == 0 && string.charAt(i) == '*' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								commetState = "close";
								i ++;
							}else if(commetState.equals("open")){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
							}
						}
					}
				}
				bufferedReader.close();
				reader.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		result[0] = N;
		result[1] = M;
		return result;
	}
	
	public int[] commentMethod(List<String> fileNames){
		int N1 = 0;
		int N2 = 0;
		int[] result = new int[2];
		int quotationState = 0;
		boolean hasComment = false;
		String commetState = "close";
		
		for(int k = 0 ; k < fileNames.size() ; k ++){
			quotationState = 0;
			hasComment = false;
			commetState = "close";
			try {
				FileReader reader = new FileReader(new File(fileNames.get(k)));
				BufferedReader bufferedReader = new BufferedReader(reader);
				String string = "";
				while((string = bufferedReader.readLine()) != null){
					for(int i = 0 ; i < string.length() ; i ++){
						if(commetState.equals("close") && string.charAt(i) == '"' && i > 0 && string.charAt(i - 1) != '\\' && string.charAt(i - 1) != '\''){
							if(quotationState == 0){
								quotationState = 1;
							}else{
								quotationState = 0;
							}
						}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
							N1 ++;
							i = string.length();
						}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '*'){
							N2 ++;
							commetState = "open";
							i ++ ;
						}else if(quotationState == 0 && string.charAt(i) == '*'  && string.length() > i + 1 && string.charAt(i + 1) == '/'){
							//N2 ++;
							commetState = "close";
							i ++;
						}
					}
				}
				bufferedReader.close();
				reader.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		result[0] = N1;
		result[1] = N2;
		return result;
	}
	
	public int[] classLen(List<String> fileNames){
		int quotationState = 0;
		String commetState = "close";
		boolean inClass = false;
		int N = 0;
		int M = 0;
		int[] result = new int[2];
		int number = 0;
		int leftNumber = 0;
		
		for(int k = 0 ; k < fileNames.size() ; k ++){
			number = 0;
			leftNumber = 0;
			quotationState = 0;
			commetState = "close";
			inClass = false;
			
			FileStringReader fileStringReader = new FileStringReader();
			String content = null;
			try {
				content = fileStringReader.getFileContent(fileNames.get(k));
				// content = fileStringReader.getFileContent("wc");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//
			ASTParser astParser = ASTParser.newParser(AST.JLS3);
			astParser.setSource(new String(content).toCharArray());
			astParser.setKind(ASTParser.K_COMPILATION_UNIT);
			CompilationUnit result1 = (CompilationUnit) (astParser.createAST(null));
			// astParser.setKind(ASTParser.K_STATEMENTS);
			// Block result = (Block)astParser.createAST(null);
			ClassVisitor testVisitor = new ClassVisitor(content, LineIdentifier.paserLineEnd(content));
			result1.accept(testVisitor);
			
			List<String> className = testVisitor.className;
			List<Integer> classStart = testVisitor.classStart;
			
			for(int j = 0 ; j < className.size() ; j ++){
				N ++;
				int index = 0;
				number = 0;
				leftNumber = 0;
				quotationState = 0;
				commetState = "close";
				inClass = false;
				try {
					FileReader reader = new FileReader(new File(fileNames.get(k)));
					BufferedReader bufferedReader = new BufferedReader(reader);
					String string = "";
					while((string = bufferedReader.readLine()) != null){
						for(int i = 0 ; i < string.length() ; i ++){
							if(index == classStart.get(j)){
								inClass = true;
							}
							if(inClass){
								if(commetState.equals("close") && string.charAt(i) == '"' && i > 0 && string.charAt(i - 1) != '\\' && string.charAt(i - 1) != '\''){
									if(quotationState == 0){
										quotationState = 1;
									}else{
										quotationState = 0;
									}
								}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
									i = string.length();
								}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '*'){
									commetState = "open";
									i ++ ;
								}else if(quotationState == 0 && string.charAt(i) == '*' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
									commetState = "close";
									i ++;
								}else if(commetState.equals("open")){
									
								}else if(quotationState == 0 && commetState.equals("close") && string.charAt(i) == '{'){
									leftNumber ++;
									number ++;
								}else if(quotationState == 0 && commetState.equals("close") && string.charAt(i) == '}'){
									number -- ;
								}
								if(leftNumber > 0 && number == 0){
									M ++;
									inClass = false;
								}
							}
							index ++;
						}
						index = index + 2;
						if(inClass){
							M ++;
						}
					}
					bufferedReader.close();
					reader.close();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}
		result[0] = N;
		result[1] = M;
		return result;
	}
	
	public int[] funcLen(List<String> fileNames){
		int quotationState = 0;
		String commetState = "close";
		boolean inClass = false;
		int N = 0;
		int M = 0;
		int[] result = new int[2];
		int number = 0;
		int leftNumber = 0;
		
		for(int k = 0 ; k < fileNames.size() ; k ++){
			number = 0;
			leftNumber = 0;
			quotationState = 0;
			commetState = "close";
			inClass = false;
			
			FileStringReader fileStringReader = new FileStringReader();
			String content = null;
			try {
				content = fileStringReader.getFileContent(fileNames.get(k));
				// content = fileStringReader.getFileContent("wc");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//
			ASTParser astParser = ASTParser.newParser(AST.JLS3);
			astParser.setSource(new String(content).toCharArray());
			astParser.setKind(ASTParser.K_COMPILATION_UNIT);
			CompilationUnit result1 = (CompilationUnit) (astParser.createAST(null));
			// astParser.setKind(ASTParser.K_STATEMENTS);
			// Block result = (Block)astParser.createAST(null);
			ClassVisitor testVisitor = new ClassVisitor(content, LineIdentifier.paserLineEnd(content));
			result1.accept(testVisitor);
			
			List<String> methodsNames = testVisitor.methodsNames;
			List<Integer> methodsStart = testVisitor.methodsStart;
			
			for(int j = 0 ; j < methodsNames.size() ; j ++){
				N ++;
				int index = 0;
				number = 0;
				leftNumber = 0;
				quotationState = 0;
				commetState = "close";
				inClass = false;
				try {
					FileReader reader = new FileReader(new File(fileNames.get(k)));
					BufferedReader bufferedReader = new BufferedReader(reader);
					String string = "";
					while((string = bufferedReader.readLine()) != null){
						for(int i = 0 ; i < string.length() ; i ++){
							if(index == methodsStart.get(j)){
								inClass = true;
							}
							if(inClass){
								//System.out.print(string.charAt(i));
								if(commetState.equals("close") && string.charAt(i) == '"' && i > 0 && string.charAt(i - 1) != '\\' && string.charAt(i - 1) != '\''){
									if(quotationState == 0){
										quotationState = 1;
									}else{
										quotationState = 0;
									}
								}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
									i = string.length();
								}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '*'){
									commetState = "open";
									i ++ ;
								}else if(quotationState == 0 && string.charAt(i) == '*' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
									commetState = "close";
									i ++;
								}else if(commetState.equals("open")){
									
								}else if(quotationState == 0 && commetState.equals("close") && string.charAt(i) == '{'){
									leftNumber ++;
									number ++;
								}else if(quotationState == 0 && commetState.equals("close") && string.charAt(i) == '}'){
									number -- ;
								}
								if(leftNumber > 0 && number == 0){
									M ++;
									inClass = false;
								}
							}
							index ++;
						}
						//System.out.print("\n");
						index = index + 2;
						if(inClass){
							M ++;
						}
					}
					bufferedReader.close();
					reader.close();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		result[0] = N;
		result[1] = M;
		return result;
	}
	
	public int[] blankB4cmt(List<String> fileNames){
		int N = 0;
		int M = 0;
		int n = 0;
		int m = 0;
		int[] result = new int[2];
		int quotationState = 0;
		boolean hasComment = false;
		String commetState = "close";
		HashMap<Integer, Boolean> commentLine = new HashMap<Integer, Boolean>();
		ArrayList<Integer> blank = new ArrayList<Integer>();
		
		for(int k = 0 ; k < fileNames.size() ; k ++){
			N = 0;
			M = 0;
			quotationState = 0;
			hasComment = false;
			commetState = "close";
			commentLine.clear();
			blank.clear();
			try {
				FileReader reader = new FileReader(new File(fileNames.get(k)));
				BufferedReader bufferedReader = new BufferedReader(reader);
				String string = "";
				while((string = bufferedReader.readLine()) != null){
					N ++;
					hasComment = false;
					if(string.length() == 0){
						if (commetState == "open") {
							M ++;
						}
					}else{
						for(int i = 0 ; i < string.length() ; i ++){
							if(commetState.equals("close") && string.charAt(i) == '"' && i > 0 && string.charAt(i - 1) != '\\' && string.charAt(i - 1) != '\''){
								if(quotationState == 0){
									quotationState = 1;
								}else{
									quotationState = 0;
								}
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								n ++;
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								i = string.length();
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '*'){
								n ++;
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								commetState = "open";
								i ++ ;
							}else if(quotationState == 0 && string.charAt(i) == '*' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								commetState = "close";
								i ++;
							}else if(commetState.equals("open")){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
							}
						}
					}
					
					String line = string.replaceAll("\\s+", "");
					if(line.length() == 0 && commetState.equals("close")){
						blank.add(N);
					}
					
					if(line.startsWith("//") || line.startsWith("/*")){
						commentLine.put(N, true);
					}
				}
				
				for(int i = 0 ; i < blank.size() ; i ++){
					if(commentLine.containsKey(blank.get(i) + 1)){
						m ++;
					}
				}
				
				bufferedReader.close();
				reader.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		result[0] = n;
		result[1] = m;
		return result;
	}
	
	public int[] blankAfterCmt(List<String> fileNames){
		int N = 0;
		int M = 0;
		int n = 0;
		int m = 0;
		int[] result = new int[2];
		int quotationState = 0;
		boolean hasComment = false;
		String commetState = "close";
		HashMap<Integer, Boolean> commentLine = new HashMap<Integer, Boolean>();
		ArrayList<Integer> blank = new ArrayList<Integer>();
		
		for(int k = 0 ; k < fileNames.size() ; k ++){
			N = 0;
			M = 0;
			quotationState = 0;
			hasComment = false;
			commetState = "close";
			commentLine.clear();
			blank.clear();
			try {
				FileReader reader = new FileReader(new File(fileNames.get(k)));
				BufferedReader bufferedReader = new BufferedReader(reader);
				String string = "";
				while((string = bufferedReader.readLine()) != null){
					N ++;
					hasComment = false;
					if(string.length() == 0){
						if (commetState == "open") {
							M ++;
						}
					}else{
						for(int i = 0 ; i < string.length() ; i ++){
							if(commetState.equals("close") && string.charAt(i) == '"' && i > 0 && string.charAt(i - 1) != '\\' && string.charAt(i - 1) != '\''){
								if(quotationState == 0){
									quotationState = 1;
								}else{
									quotationState = 0;
								}
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								n ++;
								if(!hasComment){
									M ++;
								}
								commentLine.put(N, true);
								hasComment = true;
								i = string.length();
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '*'){
								n ++;
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								commetState = "open";
								i ++ ;
							}else if(quotationState == 0 && string.charAt(i) == '*' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
								commetState = "close";
								i ++;
							}else if(commetState.equals("open")){
								if(!hasComment){
									M ++;
								}
								hasComment = true;
							}
						}
					}
					
					String line = string.replaceAll("\\s+", "");
					if(line.length() == 0 && commetState.equals("close")){
						blank.add(N);
					}
					
					if(line.endsWith("*/")){
						commentLine.put(N, true);
					}
				}
				
				for(int i = 0 ; i < blank.size() ; i ++){
					if(commentLine.containsKey(blank.get(i) - 1)){
						m ++;
					}
				}
				
				bufferedReader.close();
				reader.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		result[0] = n;
		result[1] = m;
		return result;
	}
	
	public int[] blankBetweenCAndC(List<String> fileNames){
		int N = 0;
		int M = 0;
		int P = 0;
		int[] result = new int[2];
		int quotationState = 0;
		boolean hasComment = false;
		String commetState = "close";
		HashMap<Integer, Integer> commentHashMap = new HashMap<Integer, Integer>();
		HashMap<Integer, Boolean> code = new HashMap<Integer, Boolean>();
		
		for(int k = 0 ; k < fileNames.size() ; k ++){
			quotationState = 0;
			hasComment = false;
			commetState = "close";
			commentHashMap.clear();
			code.clear();
			try {
				FileReader reader = new FileReader(new File(fileNames.get(k)));
				BufferedReader bufferedReader = new BufferedReader(reader);
				String string = "";
				while((string = bufferedReader.readLine()) != null){
					String noComment = "";
					String containComment = "";
					boolean judge = false;
					N ++;
					hasComment = false;
					if(string.length() == 0){
						if (commetState == "open") {
						}
					}else{
						for(int i = 0 ; i < string.length() ; i ++){
							if(commetState.equals("close") && string.charAt(i) == '"' &&  i > 0 && string.charAt(i - 1) != '\\' && string.charAt(i - 1) != '\''){
								if(quotationState == 0){
									quotationState = 1;
								}else{
									quotationState = 0;
								}
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								if(!hasComment){
								}
								if(commentHashMap.containsKey(N)){
									commentHashMap.put(N, commentHashMap.get(N) + 1);
								}else{
									commentHashMap.put(N, 1);
								}
								containComment = containComment + "//";
								hasComment = true;
								i = string.length();
							}else if(commetState.equals("close") && quotationState == 0 && string.charAt(i) == '/' && string.length() > i + 1 && string.charAt(i + 1) == '*'){
								if(!hasComment){
								}
								judge = true;
								if(commentHashMap.containsKey(N)){
									commentHashMap.put(N, commentHashMap.get(N) + 1);
								}else{
									commentHashMap.put(N, 1);
								}
								containComment = containComment + "/*";
								hasComment = true;
								commetState = "open";
								i ++ ;
							}else if(quotationState == 0 && string.charAt(i) == '*' && string.length() > i + 1 && string.charAt(i + 1) == '/'){
								if(!hasComment){
								}
								if(!judge){
									if(commentHashMap.containsKey(N)){
										commentHashMap.put(N, commentHashMap.get(N) + 1);
									}else{
										commentHashMap.put(N, 1);
									}
								}
								containComment = containComment + "*/";
								hasComment = true;
								commetState = "close";
								i ++;
							}else if(commetState.equals("open")){
								if(!hasComment){
								}
								hasComment = true;
							}else{
								noComment = noComment + string.charAt(i);
								containComment = containComment + string.charAt(i);
							}
						}
					}
					if(noComment.replaceAll("\\s+", "").length() > 0){
						code.put(N, true);
					}
					Pattern pattern1 = Pattern.compile("[\\d\\D]*[^/\\s] /[^\\s][\\d\\D]*");
					Pattern pattern2 = Pattern.compile("[\\d\\D]*/ [^/\\s][\\d\\D]*");
					if(pattern1.matcher(containComment.replaceAll("\\s+", " ")).matches()){
						P ++;
					}
					if(pattern2.matcher(containComment.replaceAll("\\s+", " ")).matches()){
						P ++;
					}
				}
				for(int key : commentHashMap.keySet()){
					if(code.containsKey(key)){
						M = M + commentHashMap.get(key);
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		result[0] = M;
		result[1] = P;
		return result;
	}
}

package metrics22;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;

public class Metric1 {
	// public static void main(String[] args) throws IOException {
	// Metric1 analysis = new Metric1();
	// ClassVisitor visitor = analysis.ASTsearch();
	// FileStringReader fileStringReader = new FileStringReader();
	// String content = null;
	// try {
	// content = fileStringReader.getFileContent("StructureParser.java");
	// // content = fileStringReader.getFileContent("wc");
	// } catch (IOException e) {
	// // TODO Auto-generated catch block
	// e.printStackTrace();
	// }
	// String result = analysis.getMetrics1Result("java",visitor);
	// System.out.println(result);
	// }

	public String getMetrics1Result(String type, List<String> fileNames)
			throws Exception {
		String content = null;
		ClassVisitor visitor = null;

		int no11 = 0, no12 = 0, no21 = 0, no22 = 0, no31 = 0, no32 = 0, no41 = 0, no42 = 0, no51 = 0, no52 = 0, no61 = 0, no62 = 0, no71 = 0, no72 = 0;

		for (String file : fileNames) {
			content = getContent(file);
			String mycontent = content;
			if (!type.equals("java")) {
				mycontent = new FileStringReader().removeUselessStmtMetric5(content);
			}
			visitor = ASTsearch(mycontent);
//			int[] no1 = empltyLine(content, type);
//			no11 += no1[0];
//			no12 += no1[1];
//
//			int[] no2 = indentationRatio(content);
//			no21 += no2[0];
//			no22 += no2[1];
//
//			int[] no3 = bracketUse(visitor);
//			no31 += no3[0];
//			no32 += no3[1];
//
//			int[] no4 = braceUse(content);
//			no41 += no4[0];
//			no42 += no4[1];

			int[] no5 = singleUseBrace(visitor);
			no51 += no5[0];
			no52 += no5[1];

//			int[] no6 = complexCut(visitor);
//			no61 += no6[0];
//			no62 += no6[1];
//
//			int[] no7 = caseUse(content);
//			no71 += no7[0];
//			no72 += no7[1];
		}

		StringBuffer result = new StringBuffer();

//		if (no12 == 0) {
//			result.append("#,");
//		} else {
//			double re = 1.0 * no11 / no12;
//			result.append(String.format("%.2f", re) + ",");
//		}
//
//		int notemp2 = no21 + no22;
//
//		if (notemp2 == 0) {
//			result.append("#:#,");
//		} else {
//			double re1 = 1.0 * no21 / notemp2;
//			double re2 = 1.0 * no22 / notemp2;
//			result.append(String.format("%.2f", re1) + ":"
//					+ String.format("%.2f", re2) + ",");
//		}
//
//		if (no32 == 0) {
//			result.append("#,");
//		} else {
//			double re3 = 1.0 * no31 / no32;
//			result.append(String.format("%.2f", re3) + ",");
//		}
//
//		int notemp4 = no41 + no42;
//
//		if (notemp4 == 0) {
//			result.append("#:#,");
//		} else {
//			double re4 = 1.0 * no41 / notemp4;
//			double re44 = 1.0 * no42 / notemp4;
//			result.append(String.format("%.2f", re4) + ":"
//					+ String.format("%.2f", re44) + ",");
//		}

		int notemp5 = no51 + no52;

		if (notemp5 == 0) {
			result.append("#,");
		} else {
			double re5 = 1.0 * no51 / notemp5;
			result.append(String.format("%.2f", re5) + ",");
		}

//		if (no62 == 0) {
//			result.append("#,");
//		} else {
//			double re6 = 1.0 * no61 / no62;
//			result.append(String.format("%.2f", re6) + ",");
//		}
//
//		if (no72 == 0) {
//			result.append("#,");
//		} else {
//			double re7 = 1.0 * no71 / no72;
//			result.append(String.format("%.2f", re7) + ",");
//		}

		return result.toString();

	}

	public static String getContent(String file) {
		FileStringReader fileStringReader = new FileStringReader();
		String content = null;
		try {
			content = fileStringReader.getFileContent(file);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return content;
	}

	/**
	 * ast search
	 * 
	 * @return
	 */
	public static ClassVisitor ASTsearch(String content) {
		//
		ASTParser astParser = ASTParser.newParser(AST.JLS3);
		astParser.setSource(new String(content).toCharArray());
		astParser.setKind(ASTParser.K_COMPILATION_UNIT);
		CompilationUnit result = (CompilationUnit) (astParser.createAST(null));
		ClassVisitor testVisitor = new ClassVisitor(content,
				LineIdentifier.paserLineEnd(content));
		result.accept(testVisitor);
		return testVisitor;
	}

	/**
	 * No. 1 calculate percentage of empty line
	 * 
	 * @param content
	 *            the whole text
	 * @return percentage of empty line
	 */
	public int[] empltyLine(String content, String type) {
		double result = 0.0;
		// empty line count
		int emptyLine = 0;
		// sum of all lines
		int sumline = 0;
		if (content.trim().equals("")) {
			return new int[] { emptyLine, sumline };
		}
		String[] lines = content.split("\n");

		for (String line : lines) {
			// remove blank
			line = line.trim();
			if (line.length() < 1) {
				emptyLine++;
			}
		}
		sumline = lines.length;
		return new int[] { emptyLine, sumline };
	}

	/**
	 * No. 2 calculate tab and empty use
	 * 
	 * @param content
	 *            the whole text
	 * @return tab percentage & empty percentage
	 */
	public int[] indentationRatio(String content) {
		double[] result = { 0.0, 0.0 };
		// empty line count
		int tabCount = 0;
		// sum of all lines
		int emptyCount = 0;
		if (content.trim().equals("")) {
			return new int[] { tabCount, emptyCount };
		}
		String[] lines = content.split("\n");
		for (String line : lines) {
			// remove blank
			// line = line.trim();
			if (line.trim().length() > 1) {

				int tempindex = 0;
				char[] templine=line.toCharArray();
				while (templine[tempindex]=='\t'
						|| templine[tempindex]=='\40') {
					tempindex++;
				}
				line=line.substring(0, tempindex);
				if (line.contains("\t")) {
					tabCount++;
				}
				if (line.contains("\40")) {
					emptyCount++;
				}
			}
		}
		// if (tabCount + emptyCount == 0) {
		// result[0] = -1;
		// result[1] = -1;
		// return result;
		// }
		// result[0] = 1.0 * tabCount / (tabCount + emptyCount);
		// result[1] = 1.0 * emptyCount / (tabCount + emptyCount);
		return new int[] { tabCount, emptyCount };
	}

	/**
	 * No. 3 calculate （）
	 * 
	 * @param content
	 *            the whole text
	 * @return percentage of（）when complicate lines
	 */
	public int[] bracketUse(ClassVisitor vistor) {
		double result = 0.0;
		// bracket line count
		int bracketCount = 0;
		// sum of complicate lines
		int sumCount = 0;
		ArrayList<Character> opers = new ArrayList<Character>();
		opers.add('+');
		opers.add('-');
		opers.add('*');
		opers.add('/');
		opers.add('%');
		opers.add('>');
		opers.add('<');
		opers.add('^');
		List<Expression> expressions = vistor.express;
		for (Expression ass : expressions) {
			String express = ass.getExpression();
			if (express.contains("=")) {
				express = express.substring(express.indexOf("=") + 1);
			}
			int operator = 0;
			for (int i = 1; i < (express.length() - 1); i++) {
				if (opers.contains(express.charAt(i))
						&& (!opers.contains(express.charAt(i + 1)))
						&& (!opers.contains(express.charAt(i - 1)))) {
					operator++;
				}
			}
			if (operator > 1) {
				sumCount++;
				if (express.contains("(")) {
					bracketCount++;
				}
			}
		}
		List<SpecialStmt> specialStmts = vistor.specialStmts;
		for (SpecialStmt specialStmt : specialStmts) {
			if (!specialStmt.type.equals("for")) {
				int temp = 0;
				int operator = 0;
				String express = specialStmt.getStmt();
				if (express.contains("{")) {
					express = express.substring(0, express.indexOf("{"));
				} else if (express.contains(")")) {
					express = express.substring(0, express.lastIndexOf(")"));
				}
				for (int i = 0; i < express.length(); i++) {
					if (opers.contains(express.charAt(i))) {
						operator++;
					}
					if (express.charAt(i) == '(') {
						temp++;
					}
				}
				if (operator > 1) {
					sumCount++;
					if (temp > 1) {
						bracketCount++;
					}
				}
			}
		}
		// if (sumCount == 0) {
		// return -1;
		// }
		// result = 1.0 * bracketCount / sumCount;
		return new int[] { bracketCount, sumCount };
	}

	/**
	 * No. 4 calculate use of {
	 * 
	 * @param content
	 *            the whole text
	 * @return end percentage & head percentage
	 */
	public int[] braceUse(String content) {
		// { at the end of line
		int lastCount = 0;
		// { at the head of line
		int firstCount = 0;
		if (content.trim().equals("")) {
			return new int[] { lastCount, firstCount };
		}
		String[] lines = content.split("\n");
		for (String line : lines) {
			line = line.trim();
			if (line.length() > 0) {
				if (line.substring(0, 1).equals("{")) {
					firstCount++;
				} else if (line.substring(line.length() - 1).equals("{")) {
					lastCount++;
				}
			}
		}
		// if (lastCount + firstCount == 0) {
		// result[0] = -1;
		// result[1] = -1;
		// return result;
		// }
		// result[0] = 1.0 * lastCount / (lastCount + firstCount);
		// result[1] = 1.0 * firstCount / (lastCount + firstCount);
		return new int[] { lastCount, firstCount };
	}

	/**
	 * No. 5 calculate if use{} when one single brace
	 * 
	 * @param content
	 *            the whole text
	 * @return percentage of {} when one brace
	 */
	public int[] singleUseBrace(ClassVisitor vistor) {
		double result = 0.0;
		// at the next of case
		int useCount = 0;
		// sum of all case
		int nouseCount = 0;

		List<SpecialStmt> specialStmts = vistor.specialStmts;
		for (SpecialStmt mystmt : specialStmts) {
			String expression = mystmt.stmt;
			int index = expression.indexOf("{");
			if (index >= 0) {
				expression = expression.substring(index);
				String[] temps = expression.trim().split(";");
				if (temps.length == 2) {
					useCount++;
				}
			} else {
				nouseCount++;
			}
		}
		// if (useCount + nouseCount == 0) {
		// return -1;
		// }
		// result = 1.0 * useCount / (useCount + nouseCount);
		return new int[] { useCount, nouseCount };
	}

	/**
	 * No. 6 calculate if cut lines when complex
	 * 
	 * @param content
	 *            the whole text
	 * @return percentage of cut lines
	 */
	public int[] complexCut(ClassVisitor vistor) {
		double result = 0.0;
		// at the next of case
		int cutCount = 0;
		// sum of all case
		int complexCount = 0;
		List<Assign> assigns = vistor.assigns;
		List<SpecialStmt> specialStmts = vistor.specialStmts;
		for (Assign ass : assigns) {
			String expre = ass.getExpression();
			if (expre.trim().length() >= 80) {
				complexCount++;
				if ((expre.indexOf("\n") > 0)
						&& (expre.indexOf("\n") < (expre.length() - 1))) {
					cutCount++;
				}
			}
		}
		for (SpecialStmt special : specialStmts) {
			String expre = special.getStmt();
			if (expre.trim().length() >= 80) {
				complexCount++;
				if (expre.indexOf("\n") < (expre.length() - 1)) {
					cutCount++;
				}
			}
		}
		// if (complexCount == 0) {
		// return -1;
		// }
		// result = 1.0 * cutCount / complexCount;
		return new int[] { cutCount, complexCount };
	}

	/**
	 * No. 7 calculate if param is at the next of case
	 * 
	 * @param content
	 *            the whole text
	 * @return percentage of next use
	 */
	public int[] caseUse(String content) {
		double result = 0.0;
		// at the next of case
		int nextline = 0;
		// sum of all case
		int caseline = 0;
		String[] lines = content.split("\n");
		for (String line : lines) {
			line = line.trim();
			int index = line.indexOf("case");
			if ((line.length() > 1) && (!line.substring(0, 2).equals("//"))
					&& (index >= 0)) {
				caseline++;
				if (!line.substring(line.length() - 1).equals(":")) {
					nextline++;
				}
			}
		}
		// if (caseline == 0) {
		// return -1;
		// }
		// result = 1.0 * nextline / caseline;
		return new int[] { nextline, caseline };
	}
}

package metrics22;

import java.io.IOException;
import java.util.List;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.Block;
import org.eclipse.jdt.core.dom.CompilationUnit;

public class Metrics2 {

	public static void main(String[] args) throws Exception {
		args = new String[] { "java", "wc" };
		if (args.length != 2) {
			System.out.println("r u ****ing kidding me?");
			return;
		}
		List<String> files = FileNameReader.getFileNames(args[1]);
		String type = args[0];
		Metrics2 metrics2 = new Metrics2();
		System.out.println(metrics2.getMetrics2Result(type, files));
	}

	public String getMetrics2Result(String type, List<String> fileNames) {
		try {
			String content = null;
			ClassVisitor visitor = null;

			int no81 = 0, no82 = 0, no91 = 0, no92 = 0, no111 = 0, no112 = 0, no121 = 0, no122 = 0, no131 = 0, no132 = 0, no14 = 0, no151 = 0, no152 = 0;
			if (type.equals("java")) {

				for (String file : fileNames) {
					content = getContent(file);
					visitor = ASTsearch(content);
//					int[] no8 = no8singleLen(content);
//					no81 += no8[0];
//					no82 += no8[1];
//
//					int[] no9 = no9spaceNum(content);
//					no91 += no9[0];
//					no92 += no9[1];
//
//					int[] no11 = no11assignSpaceUse(visitor);
//					no111 += no11[0];
//					no112 += no11[1];
//
//					int[] no12 = no12operatorPerStmt(content);
//					no121 += no12[0];
//					no122 += no12[1];

					int[] no13 = no13varsPerLine(visitor);
					no131 += no13[0];
					no132 += no13[1];

					no14 = no14 == 1 ? 1 : no14singleCharVarUs(visitor);

					int[] no15 = no15averageVarLength(visitor);
					no151 += no15[0];
					no152 += no15[1];
				}
			} else {

				for (String file : fileNames) {
					content = getContent(file);
					String astContent = new FileStringReader()
							.removeUselessStmt(content);
					visitor = ASTsearch(astContent);
//					int[] no8 = no8singleLen(content);
//					no81 += no8[0];
//					no82 += no8[1];
//
//					int[] no9 = no9spaceNum(content);
//					no91 += no9[0];
//					no92 += no9[1];
//
//					int[] no11 = no11assignSpaceUse(visitor);
//					no111 += no11[0];
//					no112 += no11[1];
//
//					int[] no12 = no12operatorPerStmt(content);
//					no121 += no12[0];
//					no122 += no12[1];

					int[] no13 = no13varsPerLine(visitor);
					no131 += no13[0];
					no132 += (no13[1] - 1);

					no14 = no14 == 1 ? 1 : no14singleCharVarUs(visitor);

					int[] no15 = no15averageVarLength(visitor);
					no151 += no15[0];
					no152 += no15[1];
				}

			}

			String result = "";
//
//			if (no82 == 0) {
//				result += "#,";
//			} else {
//				result += (1.0 * no81 / no82) + ",";
//			}
//
//			if (no92 == 0) {
//				result += "#,";
//			} else {
//				result += (1.0 * no91 / no92) + ",";
//			}
//
//			result += "#,";
//
//			if (no112 == 0) {
//				result += "#,";
//			} else {
//				result += (1.0 * no111 / no112) + ",";
//			}
//
//			if (no122 == 0) {
//				result += "#,";
//			} else {
//				result += (1.0 * no121 / no122) + ",";
//			}
			if (no132 == 0) {
				result += "#,";
			} else {
				result += (1.0 * no131 / no132) + ",";
			}
			result += no14 + ",";
			if (no152 == 0) {
				result += "#,";
			} else {
				result += (1.0 * no151 / no152) + ",";
			}
			return result;
		} catch (Exception e) {
			// TODO: handle exception
			return "鏂囦欢鏈夐棶棰�";
		}

	}

	public static String getContent(String file) {
		FileStringReader fileStringReader = new FileStringReader();
		String content = null;
		try {
			content = fileStringReader.getFileContent(file);
			// content = fileStringReader.getFileContent("wc");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return content;
	}

	/**
	 * ast search
	 * 
	 * @return
	 */
	public static ClassVisitor ASTsearch(String content) {
		//
		ASTParser astParser = ASTParser.newParser(AST.JLS3);
		astParser.setSource(new String(content).toCharArray());
		astParser.setKind(ASTParser.K_COMPILATION_UNIT);
		CompilationUnit result = (CompilationUnit) (astParser.createAST(null));
		// astParser.setKind(ASTParser.K_STATEMENTS);
		// Block result = (Block)astParser.createAST(null);
		ClassVisitor testVisitor = new ClassVisitor(content,
				LineIdentifier.paserLineEnd(content));
		result.accept(testVisitor);
		return testVisitor;
	}

	/**
	 * ast search
	 * 
	 * @return
	 */
	public static ClassVisitor ASTsearchBlock(String content) {
		ASTParser astParser = ASTParser.newParser(AST.JLS3);
		astParser.setSource(new String(content).toCharArray());
		astParser.setKind(ASTParser.K_STATEMENTS);
		Block result = (Block) astParser.createAST(null);
		ClassVisitor testVisitor = new ClassVisitor(content,
				LineIdentifier.paserLineEnd(content));
		result.accept(testVisitor);
		return testVisitor;
	}

	/**
	 * No. 8 calculate average length of each non-empty line
	 * 
	 * @param content
	 *            the whole text
	 * @return average length
	 */
	public int[] no8singleLen(String content) {
		double result = 0.0;
		// non-empty line count
		int lineCount = 0;
		// length sum of all lines
		int lengthSum = 0;
		String[] lines = content.split("\n");
		for (String line : lines) {
			// remove blank and 3 kinds of lines
			line = line.trim();
			if (!(line.length() < 1 || line.equals("//") || line.equals("{") || line
					.equals("}"))) {
				lengthSum += line.length();
				lineCount++;
			}
		}

		return new int[] { lengthSum, lineCount };
	}

	/**
	 * No. 9 calculate how many spaces
	 * 
	 * @param contentthe
	 *            whole text
	 * @return average space count
	 */
	public int[] no9spaceNum(String content) {
		double result = 0.0;
		// inner space sum of all lines
		int space = 0;
		String[] lines = content.split("\n");
		// non-empty line count
		int lineCount = lines.length;
		for (String line : lines) {
			// remove blank and 3 kinds of lines
			line = line.trim();
			if (!(line.length() < 1 || line.equals("//") || line.equals("{") || line
					.equals("}"))) {
				int length = line.length();
				line = line.replaceAll(" ", "");
				int length2 = line.length();
				space += (length - length2);
			}
		}
		return new int[] { space, lineCount };
	}

	/**
	 * No. 10 calculate average statements count of each code line
	 * 
	 * @param content
	 * @return average statements count
	 */
	public int no10stmtsPerLine(String content, ClassVisitor visitor) {
		return -1;
	}

	/**
	 * No.11 whether there is space beside '='
	 * 
	 * @param visitor
	 *            ASTVisitor
	 * @return
	 */
	public int[] no11assignSpaceUse(ClassVisitor visitor) {
		List<Assign> assigns = visitor.assigns;
		int totalAssign = 0;
		int spaceAssign = 0;
		for (Assign assign : assigns) {
			// contains '=' , then need to count
			if (assign.getExpression().contains("=")) {
				totalAssign++;
				String expression = visitor.content.substring(assign.start,
						assign.start + assign.length);
				int equal = expression.indexOf('=');

				char former = expression.charAt(equal - 1);
				// figure out if use space beside
				if (expression.charAt(equal - 1) == ' '
						&& expression.charAt(equal + 1) == ' ') {
					spaceAssign++;
				}
				// if like +=,-=,/=
				else if (!((former >= 'a' && former <= 'z')
						|| (former >= 'A' && former <= 'Z')
						|| (former >= '0' && former <= '9') || former == '$' || former == '_')) {
					if (expression.charAt(equal - 2) == ' '
							&& expression.charAt(equal + 1) == ' ') {
						spaceAssign++;
					}
				}
			}
		}
		double result = -1.0;
		if (totalAssign > 0) {
			result = 1.0 * spaceAssign / totalAssign;
		}
		return new int[] { spaceAssign, totalAssign };
	}

	/**
	 * No.12 operator per stmt
	 * 
	 * @param visitor
	 * @return
	 */
	public int[] no12operatorPerStmt(String content) {
		try {
			int operatorCount = 0;
			content = ' ' + content;
			int length = content.length();

			boolean quote = false;
			// this is annotation1
			boolean annotation1 = false;
			/* this is annotation2 */
			boolean annotation2 = false;

			for (int i = 0; i < length; i++) {
				if (annotation1) {
					if (content.charAt(i) == '\n') {
						annotation1 = false;
					}
				}
				if (annotation2) {
					if (content.charAt(i) == '*' && i < length - 1
							&& content.charAt(i + 1) == '/') {
						annotation2 = false;
					}
				}
				if (!annotation1 && !annotation2) {
					if (!quote && content.charAt(i) == '/' && i < length - 1
							&& content.charAt(i + 1) == '/') {
						annotation1 = true;
					} else if (!quote && content.charAt(i) == '/'
							&& i < length - 1 && content.charAt(i + 1) == '*') {
						annotation2 = true;
					} else if (content.charAt(i) == '"') {
						quote = quote ? false : true;
					} else if (!quote) {

						// //////////////////////////////////starting finding
						// operator////////////////////////////////////
						if (content.charAt(i) == '!') {
							operatorCount++;
							if (i < content.length() - 1
									&& content.charAt(i + 1) == '=') {
								i++;
							}
						} else if (content.charAt(i) == '~') {
							operatorCount++;
						} else if (content.charAt(i) == '+') {
							operatorCount++;
							if (i < content.length() - 1
									&& content.charAt(i + 1) == '='
									|| content.charAt(i + 1) == '+') {
								i++;
							}
						} else if (content.charAt(i) == '-') {
							operatorCount++;
							if (i < content.length() - 1
									&& content.charAt(i + 1) == '='
									|| content.charAt(i + 1) == '-') {
								i++;
							}
						} else if (content.charAt(i) == '*'
								|| content.charAt(i) == '/'
								|| content.charAt(i) == '%'
								|| content.charAt(i) == '='
								|| content.charAt(i) == '^') {
							operatorCount++;
							if (i < content.length() - 1
									&& content.charAt(i + 1) == '=') {
								i++;
							}
						} else if (content.charAt(i) == '?') {
							operatorCount++;
						} else if (content.charAt(i) == '&'
								|| content.charAt(i) == '|') {
							operatorCount++;
							if (i < content.length() - 1
									&& content.charAt(i + 1) == content
											.charAt(i)) {
								i++;
							}
						} else if (content.charAt(i) == '<'
								|| content.charAt(i) == '>') {
							operatorCount++;
							while (content.charAt(i + 1) == '<'
									|| content.charAt(i + 1) == '>'
									|| content.charAt(i + 1) == '=') {
								i++;
							}
						}
						// //////////////////////////////////////////////////////////////////////////////////////////////
					}
				}
			}
			int lineCount = 0;
			String[] lines = content.split("\n");
			for (String line : lines) {
				// remove blank and 3 kinds of lines
				line = line.trim();
				if (!(line.length() < 1 || line.equals("//")
						|| line.equals("{") || line.equals("}"))) {
					lineCount++;
				}
			}
			return new int[] { operatorCount, lineCount };
		} catch (Exception e) {
			return new int[] { 0, 0 };
		}
	}

	/**
	 * No.13 average var count each varDeclaring sentences has
	 * 
	 * @param visitor
	 *            Whole File Parse
	 * @return
	 */
	public int[] no13varsPerLine(ClassVisitor visitor) {
		int varDeclareLine = 0;
		List<VarDeclare> varDeclares = visitor.varDeclares;
		if (varDeclares == null || varDeclares.size() == 0) {
			return new int[] { 0, 0 };
		}

		List<Integer> lineEnd = visitor.lineEnd;

		int lineStart = 0;
		for (int i = 0; i < lineEnd.size(); i++) {
			if (i != 0) {
				lineStart = lineEnd.get(i - 1) + 1;
			}
			for (int j = 0; j < varDeclares.size(); j++) {
				int varStart = varDeclares.get(j).start;
				int varEnd = varDeclares.get(j).length + varStart - 1;
				// if varStart or varEnd in range [lineStart, lineEnd] then the
				// line has varDeclaration
				if ((varStart >= lineStart && varStart <= lineEnd.get(i))
						|| (varEnd >= lineStart && varEnd <= lineEnd.get(i))) {
					varDeclareLine++;
					break;
				}
			}
		}
		return new int[] { varDeclares.size(), varDeclareLine };
	}

	/**
	 * No.14 anaylse whether use single char var
	 * 
	 * @param visitor
	 * @return
	 */
	public int no14singleCharVarUs(ClassVisitor visitor) {
		List<String> methodParas = visitor.methodsParameterNames;
		List<VarDeclare> varDeclares = visitor.varDeclares;
		if (varDeclares == null) {
			return 0;
		}
		for (VarDeclare varDeclare : varDeclares) {
			if (varDeclare.var.length() == 1) {
				return 1;
			}
		}
		for (String para : methodParas) {
			if (para.length() == 1) {
				return 1;
			}
		}
		return 0;
	}

	/**
	 * No.14 anaylse whether use single char var
	 * 
	 * @param content
	 * @return
	 */
	public int no14singleCharVarUse(String content) {
		content = ' ' + content;
		int length = content.length();

		boolean quote = false;
		// this is annotation1
		boolean annotation1 = false;
		/* this is annotation2 */
		boolean annotation2 = false;

		for (int i = 0; i < length; i++) {
			if (annotation1) {
				if (content.charAt(i) == '\n') {
					annotation1 = false;
				}
			}
			if (annotation2) {
				if (content.charAt(i) == '*' && i < length - 1
						&& content.charAt(i + 1) == '/') {
					annotation2 = false;
				}
			}
			if (!annotation1 && !annotation2) {
				if (!quote && content.charAt(i) == '/' && i < length - 1
						&& content.charAt(i + 1) == '/') {
					annotation1 = true;
				} else if (!quote && content.charAt(i) == '/' && i < length - 1
						&& content.charAt(i + 1) == '*') {
					annotation2 = true;
				} else if (content.charAt(i) == '"') {
					quote = quote ? false : true;
				} else if (!quote) {
					if (singleCharVar(content.charAt(i))
							&& !varChar(content.charAt(i - 1))
							&& !varChar(content.charAt(i + 1))) {
						return 1;
					}
				}
			}
		}
		return 0;
	}

	public boolean singleCharVar(char a) {
		if ((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z') || a == '_') {
			return true;
		} else
			return false;
	}

	public boolean varChar(char a) {
		if ((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z')
				|| (a >= '0' && a <= '9') || a == '_' || a == '$') {
			return true;
		} else
			return false;
	}

	/**
	 * No.15 average length of each declared var
	 * 
	 * @param visitor
	 * @return
	 */
	public int[] no15averageVarLength(ClassVisitor visitor) {
		int totalLength = 0;
		List<VarDeclare> varDeclares = visitor.varDeclares;
		List<String> methodParas = visitor.methodsParameterNames;

		if (varDeclares == null || varDeclares.size() + methodParas.size() == 0) {
			return new int[] { 0, 0 };
		}
		for (VarDeclare varDeclare : varDeclares) {
			int length = varDeclare.var.length();
			totalLength += length;
		}
		for (String para : methodParas) {
			int length = para.length();
			totalLength += length;
		}

		return new int[] { totalLength,
				(varDeclares.size() + methodParas.size()) };
	}
}

package metrics22;

public class NormalStmt {
	String stmt;
	int start;
	int length;
}

package metrics22;

public class SpecialStmt {
	String stmt;
	int start;
	int length;
	String type;
	public String getStmt() {
		return stmt;
	}
	public void setStmt(String stmt) {
		this.stmt = stmt;
	}
	public int getStart() {
		return start;
	}
	public void setStart(int start) {
		this.start = start;
	}
	public int getLength() {
		return length;
	}
	public void setLength(int length) {
		this.length = length;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public SpecialStmt(String stmt, int start, int length, String type) {
		super();
		this.stmt = stmt;
		this.start = start;
		this.length = length;
		this.type = type;
	}
	
}

package metrics22;

import java.io.IOException;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;

public class StructureParser {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		FileStringReader fileStringReader = new FileStringReader();
		String content = null;
		try {
			content = fileStringReader.getFileContent("StructureParser.java");
			// content = fileStringReader.getFileContent("wc");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//
		ASTParser astParser = ASTParser.newParser(AST.JLS3);
		astParser.setSource(new String(content).toCharArray());
		astParser.setKind(ASTParser.K_COMPILATION_UNIT);
		CompilationUnit result = (CompilationUnit) (astParser.createAST(null));
		// astParser.setKind(ASTParser.K_STATEMENTS);
		// Block result = (Block)astParser.createAST(null);

		ClassVisitor testVisitor = new ClassVisitor(content, LineIdentifier.paserLineEnd(content));
		result.accept(testVisitor);
	}

}

package metrics22;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;

public class Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*FileStringReader fileStringReader = new FileStringReader();
		String content = null;
		try {
			content = fileStringReader.getFileContent("I:\\EEEEEEEEEEclipse\\DataCrawler\\src\\main\\java\\githubCrawler\\GitCrawler.java");
			// content = fileStringReader.getFileContent("wc");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//
		ASTParser astParser = ASTParser.newParser(AST.JLS3);
		astParser.setSource(new String(content).toCharArray());
		astParser.setKind(ASTParser.K_COMPILATION_UNIT);
		CompilationUnit result = (CompilationUnit) (astParser.createAST(null));
		// astParser.setKind(ASTParser.K_STATEMENTS);
		// Block result = (Block)astParser.createAST(null);
		ClassVisitor testVisitor = new ClassVisitor(content, LineIdentifier.paserLineEnd(content));
		result.accept(testVisitor);
		System.out.println(testVisitor.className + ":" + testVisitor.classStart);*/
		Test test = new Test();
		test.compareVersion("1.0", "1.1");
	}

	public int compareVersion(String version1, String version2) {
        if(!version1.contains(".") && !version2.contains(".")){
            if(Integer.parseInt(version1) > Integer.parseInt(version2)){
                return 1;
            }else if(Integer.parseInt(version1) < Integer.parseInt(version2)){
                return -1;
            }else{
                return 0;
            }
        }else if(version1.contains(".") && !version2.contains(".")){
            if(Integer.parseInt(version1.split(".")[0]) >= Integer.parseInt(version2)){
                return 1;
            }else{
                return -1;
            }
        }else{
        	System.out.println(version1.split(".").length);
            if(Integer.parseInt(version1.split(".")[0]) > Integer.parseInt(version2.split(".")[0])){
                return 1;
            }else if(Integer.parseInt(version1.split(".")[0]) < Integer.parseInt(version2.split(".")[0])){
                return -1;
            }else{
                String str1 = version1.split(".")[1];
                String str2 = version2.split(".")[1];
                if(str1.length() > str2.length()){
                    for(int i = 0 ; i < str2.length() ; i ++){
                        if(str1.charAt(i) > str2.charAt(i)){
                            return 1;
                        }else if(str1.charAt(i) < str2.charAt(i)){
                            return -1;
                        }
                    }
                    return 1;
                }else if(str1.length() < str2.length()){
                    for(int i = 0 ; i < str2.length() ; i ++){
                        if(str1.charAt(i) > str2.charAt(i)){
                            return 1;
                        }else if(str1.charAt(i) < str2.charAt(i)){
                            return -1;
                        }
                    }
                    return -1;
                }else{
                    for(int i = 0 ; i < str2.length() ; i ++){
                        if(str1.charAt(i) > str2.charAt(i)){
                            return 1;
                        }else if(str1.charAt(i) < str2.charAt(i)){
                            return -1;
                        }
                    }
                    return 0;
                }
            }
        }
    }
}

package metrics22;

public class VarDeclare {
	String var;
	int start;
	int length;
	String statement;
	public String getVar() {
		return var;
	}
	public void setVar(String var) {
		this.var = var;
	}
	public int getStart() {
		return start;
	}
	public void setStart(int start) {
		this.start = start;
	}
	public int getLength() {
		return length;
	}
	public void setLength(int length) {
		this.length = length;
	}
	public String getStatement() {
		return statement;
	}
	public void setStatement(String statement) {
		this.statement = statement;
	}
	public VarDeclare(String var, int start, int length, String statement) {
		super();
		this.var = var;
		this.start = start;
		this.length = length;
		this.statement = statement;
	}
	
}

package userInfoFetch;

import java.util.ArrayList;
import java.util.List;

import org.bson.Document;

import utility.HttpDeal;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

public class FetchOrgMembers {
	public List<Document> insertOrgMembers(int orgid,String org){
		System.out.println("fetch org member " +orgid);
		List<Document> result = new ArrayList<Document>();
		int page = 1;
		boolean effect = true; 
		try {
			//parse message
			String url = "https://api.github.com/orgs/"+org+"/members";
			
			while (effect) {
				//get auth account		
				String searchUrl = url+"?page="+page;
				page++;			
				//get response str
				String memberJson = HttpDeal.getResponse(searchUrl);
				//parse to json array
				JsonParser parser = new JsonParser();
				JsonArray reposArray = parser.parse(memberJson).getAsJsonArray();
				
				if (reposArray.size() == 0) {
					effect = false;
				}else{
					//parse array , generate follower info (add user,id)
					for (JsonElement jsonElement : reposArray) {
						String userRepo = jsonElement.toString();						
						Document document = Document.parse(userRepo);
						document.append("org_id", orgid);
						document.append("org", org);
						result.add(document);
					}		
				}
			}

			return result;
		} catch (Exception e) {
			return result;
		}
	}
}

package userInfoFetch;

import java.util.ArrayList;
import java.util.List;

import org.bson.Document;

import utility.HttpDeal;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

public class FetchUserFollowers {
	/**
	 * get followers of a user and insert into mongo
	 * @param message id,name,url
	 * @return
	 */
	public List<Document> insertFollowers(String message){
		System.out.println("fetch followers");
		List<Document> result = new ArrayList<Document>();
		int page = 1;
		boolean effect = true; 
		try {
			//parse message
			String[] urlItems = message.split(",");
			String id = urlItems[0];
			String name = urlItems[1];
			String url = urlItems[2];
			
			while (effect) {
				String searchUrl = url+"?page="+page;
				System.out.println(searchUrl);
				page++;
				//get response str
				String followJson = HttpDeal.getResponse(searchUrl);

				//parse to json array
				JsonParser parser = new JsonParser();
				JsonArray followersArray = parser.parse(followJson).getAsJsonArray();
				
				if (followersArray.size() == 0) {
					effect = false;
				}else{
					//parse array , generate follower info (add user,id)
					for (JsonElement jsonElement : followersArray) {
						String follower = jsonElement.toString();
						
						Document document = Document.parse(follower);
						document.append("follows_id", id);
						document.append("follows_name", name);
						result.add(document);
					}							
				}
			}

			return result;
		} catch (Exception e) {
			return result;
		}
	}
}

package userInfoFetch;

import org.bson.Document;

import utility.HttpDeal;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

public class FetchUserInfo {
	/**
	 * fetch user info insert into mongo
	 * 
	 * @param message
	 *            user_url
	 * @return
	 */
	public Document fecthUserInfo(String message) {
		System.out.println("fetch info");
		try {

			String url = message;
			String userJson = HttpDeal.getResponse(url);
			JsonParser parser = new JsonParser();
			JsonElement element = parser.parse(userJson);

			if (element.getAsJsonObject().get("id").getAsInt() > 0) {
				Document document = Document.parse(userJson);
				return document;
			}
			return null;
		} catch (Exception e) {
			return null;
		}

	}
}

package userInfoFetch;

import java.io.IOException;

import org.apache.http.client.ClientProtocolException;

import utility.HttpDeal;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.MessageProperties;

public class FetchUserPage {
	private static String FETCH_USER_URL = "https://api.github.com/users?since=";
	
	public void fetchUserPage(Channel channel,int start, int end, String queue_name) {
		int last_id = start;
		boolean effect = true;
		try {
			while(effect && last_id < end){
				String uri = FETCH_USER_URL+last_id;
				System.out.println(uri);
				String userJsons = HttpDeal.getResponse(uri);
				
				Gson gson = new Gson();
				JsonArray jsonArray = new JsonParser().parse(userJsons).getAsJsonArray();
				if (jsonArray.size() == 0) {
					effect = false;
				}else{
					for (JsonElement jsonElement : jsonArray) {
						int id = jsonElement.getAsJsonObject().get("id").getAsInt();
						String name = jsonElement.getAsJsonObject().get("login").getAsString();
						String infos = "user_info;"+jsonElement.getAsJsonObject().get("url").getAsString();
						String repos = "repo;"+jsonElement.getAsJsonObject().get("repos_url").getAsString();
						String followers = "follower;"+id+","+name + "," + jsonElement.getAsJsonObject().get("followers_url").getAsString();
						last_id = id;
						System.out.println(id);
						channel.basicPublish("", queue_name,MessageProperties.PERSISTENT_TEXT_PLAIN,infos.getBytes("UTF-8"));	
						channel.basicPublish("", queue_name,MessageProperties.PERSISTENT_TEXT_PLAIN,followers.getBytes("UTF-8"));
						//channel.basicPublish("", queue_name,MessageProperties.PERSISTENT_TEXT_PLAIN,repos.getBytes("UTF-8"));
					}				
				}
				//Thread.sleep(1000);
				
			
			}

		}catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}

package userInfoFetch;

import java.util.ArrayList;
import java.util.List;

import org.bson.Document;

import utility.HttpDeal;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

public class FetchUserRepos {
	public List<Document> insertUserRepos(String message){
		System.out.println("fetch repo");
		List<Document> result = new ArrayList<Document>();
		int page = 1;
		boolean effect = true; 
		try {
			//parse message
			String url = message;
			
			while (effect) {
				//get auth account		
				String searchUrl = url+"?page="+page;
				page++;			
				//get response str
				String followJson = HttpDeal.getResponse(searchUrl);
				//parse to json array
				JsonParser parser = new JsonParser();
				JsonArray reposArray = parser.parse(followJson).getAsJsonArray();
				
				if (reposArray.size() == 0) {
					effect = false;
				}else{
					//parse array , generate follower info (add user,id)
					for (JsonElement jsonElement : reposArray) {
						String userRepo = jsonElement.toString();						
						Document document = Document.parse(userRepo);
						result.add(document);
					}		
				}
			}

			return result;
		} catch (Exception e) {
			return result;
		}
	}
}

package userInfoFetch;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.bson.Document;

import utility.MongoInfo;

import com.mongodb.MongoClient;
import com.mongodb.WriteConcern;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.InsertManyOptions;

public class TestUser {
	private static Log log = LogFactory.getLog(TestUser.class.getName());
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(),27017);
		MongoDatabase database = mongoClient.getDatabase("ttttest");
		List<Document> documents = new ArrayList<Document>();
		for(int i=0 ;i<10000; i++){
			Document document = new Document();
			document.append("id", i);
			document.append("value", i+"papapa");
			System.out.println(i);
			documents.add(document);
		}
		database.getCollection("doTest").insertMany(documents);
		System.out.println("end");
		mongoClient.close();
	}

}

package userInfoFetch;
import java.util.List;

import org.bson.Document;

import utility.GetHostName;
import utility.MongoInfo;

import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class UserDeal {
	public static void fetchUser(String login, int id) {
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase db = mongoClient.getDatabase("Experiment");
		/*FindIterable<Document> exist = db.getCollection("usercache").find(new Document("id",id));
		FindIterable<Document> exist1 = db.getCollection("user").find(new Document("id",id));
		if (exist.first() != null) {
			System.out.println(id + " exists!");
			mongoClient.close();
			return;
		}
		
		if (exist1.first() != null) {
			System.out.println(id + " exists!");
			mongoClient.close();
			return;
		}*/
		
		String infos ="https://api.github.com/users/" + login;
		String repos ="https://api.github.com/users/" + login + "/repos";
		String followers = id + "," + login + ","
				+ "https://api.github.com/users/" + login
				+ "/followers";
		
		FetchUserInfo fetchUserInfo = new FetchUserInfo();
		Document user = fetchUserInfo.fecthUserInfo(infos);
		
		/*FetchUserFollowers fetchUserFollowers = new FetchUserFollowers();
		List<Document> followerList = fetchUserFollowers.insertFollowers(followers);
		
		FetchUserRepos fetchUserRepos = new FetchUserRepos();
		List<Document> repoList =fetchUserRepos.insertUserRepos(repos);	*/
		
		MongoCollection<Document> collection = db.getCollection(GetHostName.getHostName() + "usercache");
		MongoCollection<Document> collectionFollow = db.getCollection("followercache");
		MongoCollection<Document> collectionRepo = db.getCollection("userRepocache");
		
		System.out.println("save-----------------------");
		if(user != null){
			collection.insertOne(user);
		}
		/*if (followerList != null && !followerList.isEmpty()) {
			collectionFollow.insertMany(followerList);
		}
		if (repoList != null && !repoList.isEmpty()) {
			collectionRepo.insertMany(repoList);
		}*/
		
		mongoClient.close();
	}
}

package utility;


public class AccountUtil {
	public static String getLoginPassword(){
		String[] accounts = {
				"owenchen93:19930301owenchen",
				"owenchenx:19930301owenchen",
				"owencheny:19930301owenchen",
				"owenchenz:19930301owenchen",
				"ghcrawler3:zhao57252582",
				"ghcrawler1:zhao57252582",
				"ghcrawler2:zhao57252582",
				"Primer123:zhao57252582",
				
				
		};
		
		int random = (int) (Math.random() * accounts.length);
		return accounts[random];
	}
}

package utility;

import java.nio.charset.Charset;

import org.apache.commons.codec.binary.Base64;

public class GetAuthorization {
	
	public static String getAuthorization(){
		Charset charset = Charset.forName("UTF-8");
		String account = AccountUtil.getLoginPassword();
		String authorization = "Basic " + new String(Base64.encodeBase64(account.getBytes(charset)),charset);
		
		return authorization;
	}

}

package utility;

import java.net.InetAddress;
import java.net.UnknownHostException;

public class GetHostName {
	
	public static String getHostName(){
		String hostname = "";
		try {
			InetAddress address = InetAddress.getLocalHost();
			hostname = address.getHostName();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return hostname;
	}
}

package utility;

import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class GetURLConnection {
	
	public static HttpURLConnection getUrlConnection(String urlString){
		try {
			URL url = new URL(urlString);
			HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
			urlConnection.setConnectTimeout(10000);
			urlConnection.setReadTimeout(10000);
			String authorization = GetAuthorization.getAuthorization();
			urlConnection.setRequestProperty("Authorization", authorization);
			
			return urlConnection;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

}

package utility;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.nio.charset.Charset;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class HttpDeal {
	public static String getResponse(String url){
		try{
			/*HttpClient httpClient = HttpClients.createDefault();
			HttpGet get = new HttpGet(new URI(url));

			String authorization = AccountUtil.getLoginPassword();
			Charset charset = Charset.forName("UTF-8");
			String encodedAuthorization = "Basic "
					+ new String(Base64.encodeBase64(authorization
							.getBytes(charset)), charset);
			get.setHeader("Authorization", encodedAuthorization);
			HttpResponse response = httpClient.execute(get);*/
			HttpURLConnection urlConnection = GetURLConnection.getUrlConnection(url);
			BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(),"utf-8"));
			String userJsons = reader.readLine();
			return userJsons;			
		}catch(Exception e){
			e.printStackTrace();
			System.exit(0);;
		}
		return null;

	}
}

package utility;

import githubCrawler.GitCrawler;
import githubCrawler.GitrefCrawler;
import githubCrawler.IssueCrawler;
import githubCrawler.PullCrawler;
import githubCrawler.RepoCrawler;

import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.rabbitmq.client.AMQP.BasicProperties;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;

public class MessageReceiver {
	private static final String TASK_QUEUE_NAME = "fixpullandissue";

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
			ConnectionFactory factory = new ConnectionFactory();
			factory.setAutomaticRecoveryEnabled(true);
			factory.setHost("121.41.118.191");
			factory.setUsername("owen");
			factory.setPassword("owen");
			factory.setVirtualHost("/");
			factory.setPort(5672);
			Connection connection = factory.newConnection();
			final Channel channel = connection.createChannel();
			channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);

			int prefetch = 1;
			channel.basicQos(prefetch);

			final Consumer consumer = new DefaultConsumer(channel) {
				@Override
				public void handleDelivery(String consumerTag,
						Envelope envelope, BasicProperties properties,
						byte[] body) throws IOException {
					// TODO Auto-generated method stub
					String message = new String(body, "UTF-8");
					System.out.println(" [x] Received '" + message + "'");
					try {
						handleTaskA(message);
					} finally {
						System.out.println(" [x] Done");
						channel.basicAck(envelope.getDeliveryTag(), false);
					}
				}
			};
			channel.basicConsume(TASK_QUEUE_NAME, false, consumer);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			while(ValidateInternetConnection.validateInternetConnection() == 0){
				System.out.println("Wait for connecting the internet---------------");
				try {
					Thread.sleep(30000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			System.out.println("The internet is connected------------");
			
			//need server connection judgement
			MessageReceiver.main(null);
		}
	}
	
	public static void handleTaskA(String message) {
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("ghcrawlerV3");
		DBCollection pullcache = db.getCollection(GetHostName.getHostName() + "pullcache");
		DBCollection issuecache = db.getCollection(GetHostName.getHostName() + "issuecache");
		DBCollection pulls = db.getCollection("pullscp");
		DBCollection issues = db.getCollection("issuescp");
		
		pullcache.drop();
		issuecache.drop();
		
		PullCrawler pullCrawler = new PullCrawler();
		IssueCrawler issueCrawler = new IssueCrawler();
		issueCrawler.crawlIssues(message);
		pullCrawler.crawlPulls(message);
		
		DBCursor issuecursor = issuecache.find();
		issuecursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		while (issuecursor.hasNext()) {
			issues.save(issuecursor.next());
		}
		issuecursor.close();
		
		DBCursor pullcursor = pullcache.find();
		pullcursor.addOption(com.mongodb.Bytes.QUERYOPTION_NOTIMEOUT);
		while (pullcursor.hasNext()) {
			pulls.save(pullcursor.next());
		}
		pullcursor.close();
	}
		
	
	public static void handleTask(String message) {
		System.out.println(message);
		GitCrawler gitCrawler = new GitCrawler();
		
		Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
		DB db = mongo.getDB("Experiment");
		//DBCollection repolist = db.getCollection("repolist");
		DBCollection repository = db.getCollection("repository");
		DBCollection complete = db.getCollection("complete");
		DBObject judge = new BasicDBObject();
		judge.put("full_name", message);
		
		int number = 0;
		int rnumber = 0;
		
		if(repository.count() != 0){
			try {
				number = repository.find(judge).count();
			} catch (Exception e) {
				// TODO: handle exception
				while(ValidateInternetConnection.validateInternetConnection() == 0){
					System.out.println("Wait for connecting the internet---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The internet is connected------------");
				
				while(ValidateMongoConnection.validateMongoConnection() <= 0){
					System.out.println("Wait for connecting the mongo---------------");
					try {
						Thread.sleep(30000);
					} catch (InterruptedException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				System.out.println("The mongo is connected------------");
				
				number = repository.find(judge).count();
			}
		}
		
		if(number == 0){
			gitCrawler.crawl(message);
			/*DBObject object = new BasicDBObject();
			object.put("full_name", message);
			DBObject repo = repolist.find(object).next();
			
			DBObject before = new BasicDBObject();
			before.put("id", Integer.parseInt(repo.get("id").toString()));
			DBObject after = new BasicDBObject();
			after.put("id", Integer.parseInt(repo.get("id").toString()));
			after.put("full_name", repo.get("full_name").toString());
			after.put("state", "completed");
			repolist.update(before, after);*/
		}else{
			/*DBObject object = new BasicDBObject();
			object.put("full_name", message);
			DBObject repo = repolist.find(object).next();
			
			DBObject before = new BasicDBObject();
			before.put("id", Integer.parseInt(repo.get("id").toString()));
			DBObject after = new BasicDBObject();
			after.put("id", Integer.parseInt(repo.get("id").toString()));
			after.put("full_name", repo.get("full_name").toString());
			after.put("state", "completed");
			repolist.update(before, after);*/
			DBObject object = new BasicDBObject();
			object.put("full_name", message);
			if(complete.count() == 0){
				FileWriter fileWriter;
				try {
					fileWriter = new FileWriter("log1.txt",true);
					fileWriter.write(message + "\n");
					fileWriter.flush();
					fileWriter.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}else{
				try {
					rnumber = complete.find(object).count();
				} catch (Exception e) {
					// TODO: handle exception
					while(ValidateInternetConnection.validateInternetConnection() == 0){
						System.out.println("Wait for connecting the internet---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The internet is connected------------");
					
					while(ValidateMongoConnection.validateMongoConnection() <= 0){
						System.out.println("Wait for connecting the mongo---------------");
						try {
							Thread.sleep(30000);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					System.out.println("The mongo is connected------------");
					
					rnumber = complete.find(object).count();
				}
				
				if(rnumber == 0){
					FileWriter fileWriter;
					try {
						fileWriter = new FileWriter("log1.txt",true);
						fileWriter.write(message + "\n");
						fileWriter.flush();
						fileWriter.close();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
			}
		}
	}
}

package utility;

import java.io.IOException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.MessageProperties;

public class MessageSender {
	//private final static String TASK_QUEUE_NAME = "filter_repo_queue#1";
	private final static String TASK_QUEUE_NAME = "fixpullandissue";

	public void sendMessage(String message) {
		// TODO Auto-generated method stub
		try {
			ConnectionFactory factory = new ConnectionFactory();
			factory.setAutomaticRecoveryEnabled(true);
			factory.setHost("121.41.118.191");
			factory.setUsername("owen");
			factory.setPassword("owen");
			factory.setVirtualHost("/");
			factory.setPort(5672);
			Connection connection = factory.newConnection();
			Channel channel = connection.createChannel();
			channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);
			channel.basicPublish("", TASK_QUEUE_NAME,MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes("UTF-8"));
			channel.close();
			connection.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// GitHubPaShuJu
			e.printStackTrace();
		}
	}
}

package utility;

public class MongoInfo {
	public static String getMongoServerIp(){
		String remoteIP = "121.41.118.191";
		String localhost = "127.0.0.1";
		return remoteIP;
	}
}

package utility;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Properties;

public class MysqlInfo {
	public static Connection getMysqlConnection() throws Exception{
		//get items from resources/config.properties
		Properties properties = new Properties();
		String path = Thread.currentThread().getContextClassLoader().getResource("config.properties").getPath();
		properties.load(new FileInputStream(new File(path)));
		
		String mysqlIP = properties.getProperty("mysql.server.ip");
		String mysqlPort =  properties.getProperty("mysql.server.port");
		String dbName =  properties.getProperty("mysql.db.data");
		String loginName =  properties.getProperty("mysql.login.name");
		String password =  properties.getProperty("mysql.login.password");
		String url = "jdbc:mysql://"+mysqlIP+":"+mysqlPort+"/"+dbName+"?"
                + "user="+loginName+"&password="+password+"&useUnicode=true&characterEncoding=UTF8";
		
		//load class driver
		Class.forName("com.mysql.jdbc.Driver");
		
		//return connection
		Connection connection = DriverManager.getConnection(url);
		return connection;
	}
	
	public static int startRepo() throws Exception{
		Properties properties = new Properties();
		String path = Thread.currentThread().getContextClassLoader().getResource("config.properties").getPath();
		properties.load(new FileInputStream(new File(path)));
		String indexString = properties.getProperty("index");
		int index = Integer.parseInt(indexString);
		return index;
	}
}

package utility;

public class RepoSimple {
	public int id;
	public int fullname;
	public RepoSimple(int id, int fullname) {
		super();
		this.id = id;
		this.fullname = fullname;
	}
	
}

package utility;

import java.net.HttpURLConnection;
import java.net.URL;

public class ValidateInternetConnection {
	
	public static int validateInternetConnection(){
		try {
			URL url = new URL("https://www.baidu.com/");
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			return connection.getResponseCode();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			return 0;
		}
	}
}

package utility;

import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.Mongo;

public class ValidateMongoConnection {
	
	public static int validateMongoConnection(){
		try {
			Mongo mongo = new Mongo(MongoInfo.getMongoServerIp(), 27017);
			DB db = mongo.getDB("ghcrawler");
			DBCollection repository = db.getCollection("repository");
			DBCursor repoCursor = repository.find();
			return repoCursor.size();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			return -1;
		}
	}
}

package zwqneed;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import org.apache.commons.io.EndianUtils;
import org.bson.Document;

import utility.MongoInfo;
import utility.MysqlInfo;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class AnalyseDriver {

	public static String ownerType;
	public static String ownerLogin;
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		AnalyseDriver analyseDriver = new AnalyseDriver();
		List<String> repoStrings =analyseDriver.getRepos();
		
		int start = MysqlInfo.startRepo() - 1;
		for (int i=start; i<repoStrings.size(); i++) {
			String projectName = repoStrings.get(i);
			System.err.println("repo no." + i + " " + projectName + "start");
			analyseDriver.analyseRepoPull(projectName);
			System.err.println("repo no." + i + " " + projectName + "finish");
		}
	}
	
	public List<String> getRepos(){
		List<String> repos = new ArrayList<String>();
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase db = mongoClient.getDatabase("Experiment");
		FindIterable<Document> exist = db.getCollection("repocondition").find();
		for (Document document : exist) {
			String json = document.toJson();
			JsonParser parser = new JsonParser();
			JsonElement element = parser.parse(json);
			String repo = element.getAsJsonObject().get("fn").getAsString();
			repos.add(repo);
		}
		System.out.println(repos.size()+"repos to filter");
		mongoClient.close();
		
		return repos;
	}
	
	public void analyseRepoPull(String projectName) throws Exception{
		//test-------------------------------------
		//projectName = "pockethub/PocketHub";
		//test-------------------------------------
		PullRequestFetch pullRequestFetch = new PullRequestFetch();
		ProjectDataFetch projectDataFetch = new ProjectDataFetch();

		List<Document> pulls = pullRequestFetch.fetchClosedPullRequest(projectName);
		Document project = projectDataFetch.fetchProjectInfo(projectName);
		ownerType = project.get("owner",Document.class).getString("type");
		ownerLogin = project.get("owner",Document.class).getString("login");
		
		System.out.println(project);
		AnalyseDriver analyseDriver = new AnalyseDriver();
		analyseDriver.anaylseOpenPull(pulls, project);
		analyseDriver.analyseProjectHistoryData(pulls, project);
		
		for (Document document : pulls) {
//test-------------------------------------
//			if(document.getInteger("number") != 851){
//				continue;
//			}
//---------------------------------------------
			analyseDriver.analyseSubmitterCommitsData(document, project);
			analyseDriver.analyseSubmitterLevelData(document);
			PullRequest pullRequest = analyseDriver.pr_info(document);
			analyseDriver.analyseProjectLevelData(pullRequest, project);
			MongoQuery mongoQuery = new MongoQuery();
			mongoQuery.insert(pullRequest, DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.RESULT_COLLECTION);
		}
	}
	
	/**
	 * PR提交前当前open的PR数
	 * @param pulls
	 * @param project
	 * @throws ParseException
	 */
	public void anaylseOpenPull(List<Document> pulls,Document project) throws ParseException{
//		当前仍为open么有------------------------------
		PullRequestFetch pullRequestFetch = new PullRequestFetch();
		
		JsonParser parser = new JsonParser();
		JsonObject jsonObject = parser.parse(project.toJson()).getAsJsonObject();
		String repo_name = jsonObject.get("full_name").getAsString();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		List<Document> allPulls = pullRequestFetch.fetchALLPullRequest(repo_name);
		
		int pull_index = 0;
		int all_index = 0;
		List<Document> unendPulls = new ArrayList<Document>();
		while(pull_index < pulls.size() && all_index <allPulls.size()){
			Document pull = pulls.get(pull_index);	
			Date pull_time = sdf.parse(pull.getString("created_at").replaceAll("T", " ").replaceAll("Z", ""));
			
			Document allPull = allPulls.get(all_index);
			Date all_time = sdf.parse(allPull.getString("created_at").replaceAll("T", " ").replaceAll("Z", ""));
			if(all_time.before(pull_time)){
				unendPulls.add(allPull);
				all_index++;
			}else{
				for (int i=0; i<unendPulls.size(); i++) {
					Document document = unendPulls.get(i);
					if(document.getString("closed_at") != null){
						Date end_time = sdf.parse(document.getString("closed_at").replaceAll("T", " ").replaceAll("Z", ""));
						if(end_time.before(pull_time)){
							unendPulls.remove(i);
							i--;
						}
					}	
				}
				pull.append("open_pull", unendPulls.size());
				pull_index++;
			}	
		}
	}
	
	public void analyseProjectHistoryData(List<Document> pulls,Document project) throws Exception{
		JsonParser parser = new JsonParser();
		JsonObject jsonObject = parser.parse(project.toJson()).getAsJsonObject();
		String repo_name = jsonObject.get("full_name").getAsString();
		
		ProjectDataFetch projectDataFetch = new ProjectDataFetch();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		HistoryEventFetcher historyEventFetcher = new HistoryEventFetcher();
		List<Event> forkEvents = historyEventFetcher.getEvents(repo_name, "ForkEvent");
		
		forkEvents.add(new Event("", "", new Date(), "", ""));
		List<Event> starEvents = historyEventFetcher.getEvents(repo_name, "WatchEvent");
		starEvents.add(new Event("", "", new Date(), "", ""));
		
		//if owner himself is a user ,add it to insiders
		List<Event> memberEvents = historyEventFetcher.getEvents(repo_name, "MemberEvent");
		if(!ownerType.equals("Organization")){
			memberEvents.add(0,new Event(repo_name, "MemberEvent", new Date(0), ownerLogin, "Member"));
		}
		memberEvents.add(new Event("", "", new Date(), "", ""));
		
		HashSet<String> stargazers = new HashSet<String>();
		int pull_index = 0;
		int fork_index = 0;
		int star_index = 0;
		int member_index = 0;
		int member_count = 0;
		int start_count = 0;
		HashSet<String> members = new HashSet<String>();
		
		while(pull_index<pulls.size()){
			Document pull = pulls.get(pull_index);
			String pull_login = pull.get("user", Document.class).getString("login");
			Date pull_time = sdf.parse(pull.getString("created_at").replaceAll("T", " ").replaceAll("Z", ""));
			
			Event forkEvent = forkEvents.get(fork_index);
			Date fork_time = forkEvent.getTime();
			
			Event starEvent = starEvents.get(star_index);	
			Date star_time = starEvent.getTime();
			String stargazer = starEvent.getPerson();
			
			Event memberEvent = memberEvents.get(member_index);
			Date member_time = memberEvent.getTime();
			String login = memberEvent.getPerson();
			
			//all events after pull time , calculate once
			if(pull_time.before(member_time) && pull_time.before(star_time) && pull_time.before(fork_time)){
				pull.append("fork", fork_index);
				pull.append("star", start_count);
				pull.append("insider", member_count);
				System.out.println("History Event !!!!!!!!!"+fork_index+"!!!!"+start_count+"!!!!!!!!"+member_count+"!!!!!!!!!!!");
				if(members.contains(pull_login)){
					pull.append("is_insider", true);
				}else{
					pull.append("is_insider", false);
				}
				pull_index++;
			}else{
				if(!pull_time.before(member_time)){
					if(!members.contains(login)){
						member_count++;
						members.add(login);
					}
					member_index++;
				}
				
				if(!pull_time.before(star_time)){
					if(!stargazers.contains(stargazer)){
						start_count++;
						stargazers.add(stargazer);
					}
					star_index++;
				}
				
				if(!pull_time.before(fork_time)){
					fork_index++;
				}
			}
			
		}
		
	}
	
	/**
	 * calculate pr level data
	 * @param pullDocument
	 * @return
	 * @throws ParseException 
	 */
	public PullRequest pr_info(Document pullDocument) throws ParseException{
		PullRequest pullRequest = new PullRequest();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		//analyse pr base info
		String fn = pullDocument.getString("fn");
		int pull_id = pullDocument.getInteger("number",0);
		String login = pullDocument.get("user", Document.class).getString("login");
		String createString = pullDocument.getString("created_at");
		String closeString = pullDocument.getString("closed_at");
		boolean merged = pullDocument.getBoolean("merged");
		Date create = sdf.parse(createString.replaceAll("T", " ").replaceAll("Z", ""));
		Date close = sdf.parse(closeString.replaceAll("T", " ").replaceAll("Z", ""));
		double closeTime = 1.0 *(close.getTime()-create.getTime()) / 1000 / 60 /60/24;
		
		
		int commitNum = pullDocument.getInteger("commits");
		int finalChangeSize = pullDocument.getInteger("additions")+pullDocument.getInteger("deletions");
		int finalChangeFile = pullDocument.getInteger("changed_files");
		
		
		//anaylse related commits
		PullRequestFetch pullRequestFetch = new PullRequestFetch();
		List<Document> commits = pullRequestFetch.fetchPullCommits(fn, pull_id);
		HashSet<String> committers = new HashSet<String>();
		
		int codeChangeMax = 0;
		int codeChangeTotal = 0;
		int fileChangeTotal = 0;
		for (Document commit : commits) {
			JsonParser parser = new JsonParser();
			JsonObject jsonObject = parser.parse(commit.toJson()).getAsJsonObject();
			int add = jsonObject.get("stats").getAsJsonObject().get("additions").getAsInt();
			int delete = jsonObject.get("stats").getAsJsonObject().get("deletions").getAsInt();
			int codeChange = add+delete;
			codeChangeTotal+=codeChange;
			codeChangeMax =codeChangeMax>codeChange?codeChangeMax:codeChange;
			
			int change_file = jsonObject.get("files").getAsJsonArray().size();			
			fileChangeTotal+=change_file;
			if(!jsonObject.get("committer").isJsonNull() && jsonObject.get("committer").getAsJsonObject().has("login")){
				String commiter  = jsonObject.get("committer").getAsJsonObject().get("login").getAsString();
				if(!committers.contains(commiter)){
					committers.add(commiter);
				}
			}
		}
		int committer_num = committers.size();
		//get other items analysed by other funcs
		int fork = pullDocument.getInteger("fork");
		int star = pullDocument.getInteger("star");
		int insider = pullDocument.getInteger("insider");
		boolean is_insider = pullDocument.getBoolean("is_insider");
		int open_pull = pullDocument.getInteger("open_pull");
		
		int submitter_commits_num = pullDocument.getInteger("submitter_commits_num");
		int submitter_changed_line = pullDocument.getInteger("submitter_changed_line");
		int submitter_issue = pullDocument.getInteger("submitter_issue");
		int submitter_closed_PR = pullDocument.getInteger("submitter_closed_PR");
		int submitter_merged_PR = pullDocument.getInteger("submitter_merged_PR");
		double submitter_PR_close_avg_time = pullDocument.getDouble("submitter_PR_close_avg_time");
		
		pullRequest.setFn(fn);
		pullRequest.setId(pull_id);
		pullRequest.setCommitter(login);
		pullRequest.setCreated_time(createString);
		pullRequest.setIs_merged(merged);
		pullRequest.setTime_close(closeTime);
		
		pullRequest.setCommitter_num(committer_num);
		pullRequest.setCommit_num(commitNum);
		pullRequest.setChurn_final_size(finalChangeSize);
		pullRequest.setChurn_total_size(codeChangeTotal);
		pullRequest.setChurn_max_size(codeChangeMax);
		pullRequest.setChurn_file_num(fileChangeTotal);
		pullRequest.setFinal_churn_file_num(finalChangeFile);
		
		pullRequest.setProj_fork(fork);
		pullRequest.setProj_star(star);
		pullRequest.setProj_insider(insider);
		pullRequest.setIs_insider(is_insider);
		pullRequest.setProj_open_pr(open_pull);
		
		pullRequest.setScommit_num(submitter_commits_num);
		pullRequest.setSchurn_num(submitter_changed_line);
		pullRequest.setSissue_num(submitter_issue);
		pullRequest.setSclosedPR_num(submitter_closed_PR);
		pullRequest.setSmergedPR_num(submitter_merged_PR);
		pullRequest.setSclosedPR_avgtime(submitter_PR_close_avg_time);
		
		
		return pullRequest;
	}

	public void analyseProjectLevelData(PullRequest pullRequest, Document project){
		ProjectDataFetch projectDataFetch = new ProjectDataFetch();
		//get repo_create_time
		JsonParser parser = new JsonParser();
		JsonObject jsonObject = parser.parse(project.toJson()).getAsJsonObject();
		
		//calculate days from repo to pull
		String repo_create = jsonObject.get("created_at").getAsString().replaceAll("T", " ").replaceAll("Z", "");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		double from_days = 0;
		try {
			from_days = (sdf.parse(pullRequest.getCreated_time().replaceAll("T", " ").replaceAll("Z", "")).getTime()-sdf.parse(repo_create).getTime()) / 1000 / 60 / 60 /24;
			pullRequest.setProj_age(from_days);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 分析submiiter级别的PR数据
	 * @param pulls
	 * @param project
	 * @throws ParseException 
	 */
	public void analyseSubmitterCommitsData(Document pull,Document project) throws ParseException{
		String userName = pull.get("user", Document.class).getString("login");
		String fn = pull.getString("fn");
		int pull_id = pull.getInteger("number");
		boolean merged = (pull.containsKey("merged_at") && pull.get("merged_at") != null)?true:false;
		JsonParser parser = new JsonParser();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		int commits_num = 0;
		int changed_line = 0;
		
		
		JsonObject jsonObject = parser.parse(pull.toJson()).getAsJsonObject();
		String pull_create = jsonObject.get("created_at").getAsString().replaceAll("T", " ").replaceAll("Z", "");	
		String submitter = jsonObject.get("user").getAsJsonObject().get("login").getAsString();
		
		Date pullTime = sdf.parse(pull_create);	

		PullRequestFetch pullRequestFetch = new PullRequestFetch();
		List<Document> pullCommits = pullRequestFetch.fetchPullCommits(fn, pull_id);
		//////////////////////////////
		String early_time = "";
		for (Document commit : pullCommits) {
			JsonObject commitJson = parser.parse(commit.toJson()).getAsJsonObject();
			String commit_create = commitJson.get("commit").getAsJsonObject().get("committer").getAsJsonObject().get("date").getAsString().replaceAll("T", " ").replaceAll("Z", "");
			if(!commitJson.get("committer").isJsonNull()  && commitJson.get("committer").getAsJsonObject().has("login")){
				String commiter = commitJson.get("committer").getAsJsonObject().get("login").getAsString();
				if(commiter.equals(submitter)){
					if(early_time.equals("") || early_time.compareTo(commit_create) > 0){
						early_time = commit_create;
					}
				}
			}

		}
		if(!early_time.equals("")){
			pullTime = sdf.parse(early_time.replaceAll("T", " ").replaceAll("Z", ""));
		}
		
		SubmitterDataFetch submitterDataFetch = new SubmitterDataFetch();
		List<Document> commits = submitterDataFetch.fetchPullPersonalCommits(fn, userName);
		for (Document commit : commits) {
			JsonObject commitJson = parser.parse(commit.toJson()).getAsJsonObject();
			String commit_create = commitJson.get("commit").getAsJsonObject().get("committer").getAsJsonObject().get("date").getAsString().replaceAll("T", " ").replaceAll("Z", "");
			Date commitTime = sdf.parse(commit_create);
			
			String loginName = commitJson.get("committer").getAsJsonObject().get("login").getAsString();
			if(loginName.equals(userName) && commitTime.before(pullTime)){
				commits_num++;
				int additions = commitJson.get("stats").getAsJsonObject().get("additions").getAsInt();
				int deletions = commitJson.get("stats").getAsJsonObject().get("deletions").getAsInt();
				
				changed_line = changed_line + additions + deletions;
			}
		}
		
		pull.append("submitter_commits_num", commits_num);
		pull.append("submitter_changed_line", changed_line);
	}
	
	public void analyseSubmitterLevelData(Document pull) throws ParseException{
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String userName = pull.get("user", Document.class).getString("login");
		String fn = pull.getString("fn");
		Date pull_time = sdf.parse(pull.getString("created_at").replaceAll("T", " ").replaceAll("Z", ""));
		System.out.println(pull_time+"pull_time");
		SubmitterDataFetch submitterDataFetch = new SubmitterDataFetch();
		
		int issue = 0;
		List<Document> personalIssues = submitterDataFetch.fetchPersonalIssues(fn, userName);
		for (Document issueDocument : personalIssues) {
			Date create_time = sdf.parse(issueDocument.getString("created_at").replaceAll("T", " ").replaceAll("Z", ""));
			System.out.println(create_time+"create_time");
			if (create_time.before(pull_time)) {
				issue++;
			}else{
				
			}
		}
		
		int closedPR = 0;
		int mergedPR = 0;
		double closeTotalTime=0;
		double closeAvgTime = 0;
		List<Document> personalPulls = submitterDataFetch.fetchPersonalClosedPR(fn, userName);
		for (Document personalPull : personalPulls) {
			/////////////////////////////////////////////
			Date closeTime = sdf.parse(personalPull.getString("closed_at").replaceAll("T", " ").replaceAll("Z", ""));
			Date create_time = sdf.parse(personalPull.getString("created_at").replaceAll("T", " ").replaceAll("Z", ""));
			if (closeTime.before(pull_time)) {
				closedPR++;
				if(personalPull.getBoolean("merged")){
					mergedPR++;
				}		
				double closeHour = 1.0 *(closeTime.getTime()-create_time.getTime()) /1000 / 60 /60;
				closeTotalTime+=closeHour;
			}
		}
		if(closedPR > 0){
			closeAvgTime = closeTotalTime / closedPR;
		}
		
		pull.append("submitter_issue", issue);
		pull.append("submitter_closed_PR", closedPR);
		pull.append("submitter_merged_PR", mergedPR);
		pull.append("submitter_PR_close_avg_time", closeAvgTime);
		
	}
}

package zwqneed;

public class DBCollectionInfo {
	public final static String CRAWLER_DB = "Experiment";
	public final static String REPO_COLLECTION = "repository";
	public final static String PULL_COLLECTION = "pulls";
	public final static String COMMIT_COLLECTION = "commits";
	public final static String PULL_COMMIT_COLLECTION = "pullcommits";
	public final static String ISSUE_COLLECTION = "issues";
	public final static String RESULT_COLLECTION = "result";
	
	public final static String EVENT_DB = "historyevents2";
	public final static String EVENT_COLLECTION = "spec_events";
}

package zwqneed;

import java.util.Date;

public class Event {
	private String full_name;
	private String type;
	private Date time;
	private String person;
	private String action;
	public Event(String full_name, String type, Date time, String person,
			String action) {
		super();
		this.full_name = full_name;
		this.type = type;
		this.time = time;
		this.person = person;
		this.action = action;
	}
	public String getFull_name() {
		return full_name;
	}
	public void setFull_name(String full_name) {
		this.full_name = full_name;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public Date getTime() {
		return time;
	}
	public void setTime(Date time) {
		this.time = time;
	}
	public String getPerson() {
		return person;
	}
	public void setPerson(String person) {
		this.person = person;
	}
	public String getAction() {
		return action;
	}
	public void setAction(String action) {
		this.action = action;
	}
	
}

package zwqneed;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import utility.MysqlInfo;

public class HistoryEventFetcher {
	public List<Event> getEvents(String full_name, String type) throws Exception{
		List<Event> events = new ArrayList<Event>();
		Connection connection = MysqlInfo.getMysqlConnection();
		String sql = "SELECT * FROM HistoryEvent WHERE full_name = ? and type = ?";
		PreparedStatement stmt = connection.prepareStatement(sql);
		stmt.setString(1, full_name);
		stmt.setString(2, type);
		
		ResultSet resultSet = stmt.executeQuery();
		while(resultSet.next()){
			String timeString = resultSet.getString("time").substring(0, 19);
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date time = sdf.parse(timeString);
			String person = resultSet.getString("person");
			String action = resultSet.getString("action");
			
			Event event = new Event(full_name, type, time, person, action);
			events.add(event);
		}
		resultSet.close();
		stmt.close();
		connection.close();
		return events;
	}
}

package zwqneed;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bson.BsonString;
import org.bson.Document;

import utility.MongoInfo;

import com.google.gson.Gson;
import com.google.gson.JsonParser;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

public class MongoQuery {
	
	public List<Document> search(String db,String collection, Map<String,Object> filters){
		Document document = new Document();
		Set<String> keSet = filters.keySet();
		for (String string : keSet) {
			document.append(string, filters.get(string));
		}
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase database = mongoClient.getDatabase(db);
		FindIterable<Document> iterable = database
				.getCollection(collection).find(document);
		if(collection.contains("pulls")){
			iterable.sort(new Document("number",1));
		}
		
		System.out.println(".....");
		List<Document> documents = new ArrayList<Document>();
		iterable.into(documents);
		System.out.println(documents.size());
		mongoClient.close();
		return documents;
	}
	
	public Document searchOne(String db,String collection, Map<String,Object> filters){
		Document document = new Document();
		Set<String> keSet = filters.keySet();
		for (String string : keSet) {
			document.append(string, filters.get(string));
		}
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase database = mongoClient.getDatabase(db);
		FindIterable<Document> iterable = database
				.getCollection(collection).find(document).limit(1);
		Document document2 = iterable.first();
		mongoClient.close();
		System.out.println("*****");
		return document2;
	}
	
	public void insert(Object object,String db,String collection){
		Gson gson = new Gson();
		String json = gson.toJson(object);
		System.out.println(json);
		MongoClient mongoClient = new MongoClient(MongoInfo.getMongoServerIp(), 27017);
		MongoDatabase database = mongoClient.getDatabase(db);
		Document document = gson.fromJson(json, Document.class);
		database.getCollection(collection).insertOne(document);
		mongoClient.close();
	}
}

package zwqneed;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bson.Document;

public class ProjectDataFetch {
	
	public static void main(String[] args){
		ProjectDataFetch projectDataFetch = new ProjectDataFetch();
		projectDataFetch.fetchProjectInfo(27);
		projectDataFetch.fetchProjectStarEvent("mojombo/grit");
		PullRequestFetch pullRequestFetch = new PullRequestFetch();
		pullRequestFetch.fetchClosedPullRequest(27);
	}
	
	public List<Document> fetchProjectMemberEvent(int repo_id){
		System.out.println("fetchProjectMemberEvent");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("type", "MemberEvent");
		filters.put("repo.id", repo_id);
		List<Document> result = mongoQuery.search(DBCollectionInfo.EVENT_DB, DBCollectionInfo.EVENT_COLLECTION, filters);
		return result;
	}
	
	public List<Document> fetchProjectForkEvent(String repo_name){
		System.out.println("fetchProjectForkEvent");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("type", "ForkEvent");
		filters.put("repo.name", repo_name);
		List<Document> result = mongoQuery.search(DBCollectionInfo.EVENT_DB, DBCollectionInfo.EVENT_COLLECTION, filters);
		return result;
	}
	
	public List<Document> fetchProjectStarEvent(String repo_name){
		System.out.println("fetchProjectStarEvent");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("type", "WatchEvent");
		filters.put("repo.name", repo_name);
		List<Document> result = mongoQuery.search(DBCollectionInfo.EVENT_DB, DBCollectionInfo.EVENT_COLLECTION, filters);
		return result;
	}
	
	public List<Document> fetchProjectMemberEvent(String repo_name){
		System.out.println("fetchProjectMemberEvent");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("type", "MemberEvent");
		filters.put("repo.full_name", repo_name);
		List<Document> result = mongoQuery.search(DBCollectionInfo.EVENT_DB, DBCollectionInfo.EVENT_COLLECTION, filters);
		return result;
	}
	
	public Document fetchProjectInfo(int repo_id){
		System.out.println("fetchProjectInfo");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("id", repo_id);
		Document result = mongoQuery.searchOne(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.REPO_COLLECTION, filters);

		return result;
	}
	
	public Document fetchProjectInfo(String repo_name){
		System.out.println("fetchProjectInfo");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("full_name", repo_name);
		Document result = mongoQuery.searchOne(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.REPO_COLLECTION, filters);
		return result;
	}
}

package zwqneed;

public class PullRequest {
	int id=-1;
	String fn;
	String committer;
	String created_time;
	boolean is_merged;
	boolean is_insider;
	double time_close = -1;
	
	int committer_num = -1;
	int commit_num=-1;
	int churn_total_size=-1;
	int churn_final_size=-1;
	int churn_max_size=-1;
	int churn_file_num=-1;
	int final_churn_file_num=-1;
	
	int proj_loc=-1;
	double proj_age=-1;
	int proj_fork=-1;
	int proj_star=-1;
	int proj_insider=-1;
	int proj_open_pr = -1;
	
	int scommit_num=-1;
	int schurn_num=-1;
	int sissue_num=-1;
	int sclosedPR_num=-1;
	int smergedPR_num=-1;
	double sclosedPR_avgtime=-1;
	public int getCommit_num() {
		return commit_num;
	}
	public void setCommit_num(int commit_num) {
		this.commit_num = commit_num;
	}
	public int getChurn_total_size() {
		return churn_total_size;
	}
	public void setChurn_total_size(int churn_total_size) {
		this.churn_total_size = churn_total_size;
	}
	public int getChurn_final_size() {
		return churn_final_size;
	}
	public void setChurn_final_size(int churn_final_size) {
		this.churn_final_size = churn_final_size;
	}
	public int getChurn_max_size() {
		return churn_max_size;
	}
	public void setChurn_max_size(int churn_max_size) {
		this.churn_max_size = churn_max_size;
	}
	public int getChurn_file_num() {
		return churn_file_num;
	}
	public void setChurn_file_num(int churn_file_num) {
		this.churn_file_num = churn_file_num;
	}
	public int getFinal_churn_file_num() {
		return final_churn_file_num;
	}
	public void setFinal_churn_file_num(int final_churn_file_num) {
		this.final_churn_file_num = final_churn_file_num;
	}
	public int getProj_loc() {
		return proj_loc;
	}
	public void setProj_loc(int proj_loc) {
		this.proj_loc = proj_loc;
	}
	public int getProj_fork() {
		return proj_fork;
	}
	public void setProj_fork(int proj_fork) {
		this.proj_fork = proj_fork;
	}
	public int getProj_star() {
		return proj_star;
	}
	public void setProj_star(int proj_star) {
		this.proj_star = proj_star;
	}
	public int getProj_insider() {
		return proj_insider;
	}
	public void setProj_insider(int proj_insider) {
		this.proj_insider = proj_insider;
	}
	public int getProj_open_pr() {
		return proj_open_pr;
	}
	public void setProj_open_pr(int proj_open_pr) {
		this.proj_open_pr = proj_open_pr;
	}
	public int getScommit_num() {
		return scommit_num;
	}
	public void setScommit_num(int scommit_num) {
		this.scommit_num = scommit_num;
	}
	public int getSchurn_num() {
		return schurn_num;
	}
	public void setSchurn_num(int schurn_num) {
		this.schurn_num = schurn_num;
	}
	public int getSissue_num() {
		return sissue_num;
	}
	public void setSissue_num(int sissue_num) {
		this.sissue_num = sissue_num;
	}
	public int getSclosedPR_num() {
		return sclosedPR_num;
	}
	public void setSclosedPR_num(int sclosedPR_num) {
		this.sclosedPR_num = sclosedPR_num;
	}
	public int getSmergedPR_num() {
		return smergedPR_num;
	}
	public void setSmergedPR_num(int smergedPR_num) {
		this.smergedPR_num = smergedPR_num;
	}
	public String getFn() {
		return fn;
	}
	public void setFn(String fn) {
		this.fn = fn;
	}
	public String getCommitter() {
		return committer;
	}
	public void setCommitter(String committer) {
		this.committer = committer;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getCreated_time() {
		return created_time;
	}
	public void setCreated_time(String created_time) {
		this.created_time = created_time;
	}
	public boolean isIs_merged() {
		return is_merged;
	}
	public void setIs_merged(boolean is_merged) {
		this.is_merged = is_merged;
	}
	public double getTime_close() {
		return time_close;
	}
	public void setTime_close(double time_close) {
		this.time_close = time_close;
	}
	public boolean isIs_insider() {
		return is_insider;
	}
	public void setIs_insider(boolean is_insider) {
		this.is_insider = is_insider;
	}
	public double getProj_age() {
		return proj_age;
	}
	public void setProj_age(double proj_age) {
		this.proj_age = proj_age;
	}
	public double getSclosedPR_avgtime() {
		return sclosedPR_avgtime;
	}
	public void setSclosedPR_avgtime(double sclosedPR_avgtime) {
		this.sclosedPR_avgtime = sclosedPR_avgtime;
	}
	public int getCommitter_num() {
		return committer_num;
	}
	public void setCommitter_num(int committer_num) {
		this.committer_num = committer_num;
	}
	
	
}

package zwqneed;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bson.Document;

public class PullRequestFetch {
	public static void main(String[] args){
		PullRequestFetch pullRequestFetch = new PullRequestFetch();
		pullRequestFetch.fetchPullCommits("mojombo/grit", 1);
	}
	public void fetchClosedPullRequest(int repo_id){
		System.out.println("fetchClosedPullRequest");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("base.repo.id", repo_id);
		filters.put("state", "closed");
		List<Document> pulls = mongoQuery.search(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.PULL_COLLECTION, filters);
		System.out.println(pulls.size());
	}
	
	public List<Document> fetchClosedPullRequest(String repo_name){
		System.out.println("fetchClosedPullRequest");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("base.repo.full_name", repo_name);
		filters.put("state", "closed");
		List<Document> pulls = mongoQuery.search(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.PULL_COLLECTION, filters);
		System.out.println(pulls.size());
		return pulls;
	}
	
	public List<Document> fetchALLPullRequest(String repo_name){
		System.out.println("fetchALLPullRequest");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("base.repo.full_name", repo_name);
		List<Document> pulls = mongoQuery.search(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.PULL_COLLECTION, filters);
		System.out.println(pulls.size());
		return pulls;
	}
	
	public List<Document> fetchPullCommits(String repo_name, int pull_id){
		System.out.println("fetchPullCommits");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		System.out.println(repo_name);
		System.out.println(pull_id);
		filters.put("fn", repo_name);
		filters.put("pn", pull_id);
		List<Document> commits = mongoQuery.search(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.PULL_COMMIT_COLLECTION, filters);
		return commits;
	}
}

package zwqneed;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bson.Document;

public class SubmitterDataFetch {
	public List<Document> fetchPullPersonalCommits(String repo_name, String user_login){
		System.out.println("fetchPullPersonalCommits");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("fn", repo_name);
		filters.put("committer.login", user_login);
		List<Document> commits = mongoQuery.search(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.COMMIT_COLLECTION, filters);
		return commits;
	}
	
	public List<Document> fetchPersonalIssues(String repo_name, String user_login){
		System.out.println("fetchPersonalIssues");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("fn", repo_name);
		filters.put("user.login", user_login);
		List<Document> commits = mongoQuery.search(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.ISSUE_COLLECTION, filters);
		return commits;
	}
	
	public List<Document> fetchPersonalClosedPR(String repo_name, String user_login){
		System.out.println("fetchPersonalClosedPR");
		MongoQuery mongoQuery = new MongoQuery();
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("fn", repo_name);
		filters.put("user.login", user_login);
		filters.put("state", "closed");
		List<Document> commits = mongoQuery.search(DBCollectionInfo.CRAWLER_DB, DBCollectionInfo.PULL_COLLECTION, filters);
		return commits;
	}
}

import static org.junit.Assert.*;

import org.junit.Test;

import utility.AccountUtil;


public class Testttt {

	@Test
	public void test() {
		AccountUtil.getLoginPassword();
		//assertEquals(null, AccountUtil.getLoginPassword(), "owenchen93:19930301owenchen");
	}
}


From edf3791e6ebcff6e8e98c1dfed3ca3f83c0edca4 Mon Sep 17 00:00:00 2001
From: WonderCsabo <kozakcsabi@gmail.com>
Date: Fri, 29 Aug 2014 19:29:04 +0200
Subject: [PATCH 1/5] Add checkstyle

---
 .../annotations/AfterTextChange.java               |   6 +-
 .../androidannotations/annotations/AfterViews.java |   5 +-
 .../androidannotations/annotations/Background.java |  26 ++-
 .../org/androidannotations/annotations/EView.java  |   6 +-
 .../org/androidannotations/annotations/Extra.java  |  13 +-
 .../annotations/FragmentArg.java                   |   8 +-
 .../androidannotations/annotations/FromHtml.java   |   8 +-
 .../annotations/HttpsClient.java                   |   2 +-
 .../androidannotations/annotations/NoTitle.java    |   8 +-
 .../annotations/OnActivityResult.java              |  39 ++--
 .../androidannotations/annotations/OrmLiteDao.java |   6 +
 .../annotations/SeekBarTouchStart.java             |  11 +-
 .../annotations/SeekBarTouchStop.java              |  11 +-
 .../annotations/SupposeBackground.java             |  42 ++--
 .../annotations/SupposeUiThread.java               |  16 +-
 .../org/androidannotations/annotations/Touch.java  |  10 +-
 .../org/androidannotations/annotations/Trace.java  |   6 +-
 .../androidannotations/annotations/UiThread.java   |   7 +-
 .../annotations/res/AnimationRes.java              |   4 +-
 .../annotations/res/BooleanRes.java                |   4 +-
 .../annotations/res/ColorRes.java                  |   4 +-
 .../annotations/res/ColorStateListRes.java         |   4 +-
 .../annotations/res/DimensionPixelOffsetRes.java   |   4 +-
 .../annotations/res/DimensionPixelSizeRes.java     |   4 +-
 .../annotations/res/DimensionRes.java              |   4 +-
 .../annotations/res/DrawableRes.java               |   4 +-
 .../annotations/res/HtmlRes.java                   |   4 +-
 .../annotations/res/IntArrayRes.java               |   4 +-
 .../annotations/res/IntegerRes.java                |   4 +-
 .../annotations/res/LayoutRes.java                 |   4 +-
 .../annotations/res/MovieRes.java                  |   4 +-
 .../annotations/res/StringArrayRes.java            |   4 +-
 .../annotations/res/StringRes.java                 |   4 +-
 .../annotations/res/TextArrayRes.java              |   4 +-
 .../annotations/res/TextRes.java                   |   4 +-
 .../annotations/rest/Accept.java                   |   5 +-
 .../annotations/rest/Options.java                  |   3 +-
 .../annotations/rest/RequiresAuthentication.java   |  10 +-
 .../annotations/rest/RequiresCookie.java           |   7 +-
 .../annotations/rest/RequiresCookieInUrl.java      |   2 +-
 .../annotations/rest/RequiresHeader.java           |   5 +-
 .../androidannotations/annotations/rest/Rest.java  |  11 +-
 .../annotations/rest/SetsCookie.java               |   2 +-
 .../sharedpreferences/DefaultBoolean.java          |   4 +-
 .../sharedpreferences/DefaultFloat.java            |   4 +-
 .../annotations/sharedpreferences/DefaultInt.java  |   4 +-
 .../annotations/sharedpreferences/DefaultLong.java |   4 +-
 .../annotations/sharedpreferences/DefaultRes.java  |   4 +-
 .../sharedpreferences/DefaultString.java           |   4 +-
 .../annotations/sharedpreferences/Pref.java        |   6 +-
 .../annotations/sharedpreferences/SharedPref.java  |   4 +-
 .../androidannotations/api/BackgroundExecutor.java | 122 ++++++-----
 .../androidannotations/api/SdkVersionHelper.java   |   6 +-
 .../org/androidannotations/api/ViewServer.java     |  43 ++--
 .../api/rest/RestClientHeaders.java                |  40 ++--
 .../api/roboguice/RoboGuiceHelper.java             |   3 +
 .../sharedpreferences/SharedPreferencesCompat.java |  12 +-
 .../java/com/sun/codemodel/JSuperWildcard.java     |   6 +-
 .../AndroidAnnotationProcessor.java                |   1 -
 .../exception/ProcessingException.java             |   2 +-
 .../handler/AnnotationHandlers.java                |   2 +-
 .../androidannotations/handler/BeanHandler.java    |  21 +-
 .../handler/CheckedChangeHandler.java              |  22 +-
 .../handler/EActivityHandler.java                  |  16 +-
 .../handler/EApplicationHandler.java               |   8 +-
 .../androidannotations/handler/EBeanHandler.java   |  10 +-
 .../handler/EFragmentHandler.java                  |  21 +-
 .../handler/EIntentServiceHandler.java             |  34 +--
 .../handler/EProviderHandler.java                  |   8 +-
 .../handler/EReceiverHandler.java                  |   8 +-
 .../handler/EServiceHandler.java                   |   8 +-
 .../handler/EViewGroupHandler.java                 |  11 +-
 .../androidannotations/handler/EViewHandler.java   |   8 +-
 .../handler/EditorActionHandler.java               |  25 ++-
 .../androidannotations/handler/ExtraHandler.java   |  52 ++---
 .../handler/FocusChangeHandler.java                |  10 +-
 .../handler/FragmentArgHandler.java                |  27 ++-
 .../handler/IgnoredWhenDetachedHandler.java        |  22 +-
 .../handler/InstanceStateHandler.java              |  25 +--
 .../handler/ItemLongClickHandler.java              |  25 ++-
 .../handler/ItemSelectHandler.java                 |  24 ++-
 .../handler/OnActivityResultHandler.java           |  36 ++--
 .../androidannotations/handler/PrefHandler.java    |   6 +-
 .../handler/ReceiverActionHandler.java             |   3 +-
 .../handler/ReceiverHandler.java                   |   3 +-
 .../handler/RootContextHandler.java                |  79 +++++++
 .../handler/RootContextHanlder.java                |  79 -------
 .../handler/ServiceActionHandler.java              | 239 +++++++++++----------
 .../handler/SharedPrefHandler.java                 |   2 +-
 .../handler/SupposeBackgroundHandler.java          |  18 +-
 .../handler/SupposeUiThreadHandler.java            |  12 +-
 .../androidannotations/handler/TouchHandler.java   |  23 +-
 .../androidannotations/handler/TraceHandler.java   |  12 +-
 .../handler/UiThreadHandler.java                   |  20 +-
 .../handler/ViewByIdHandler.java                   |  15 +-
 .../handler/ViewsByIdHandler.java                  |  30 +--
 .../handler/WakeLockHandler.java                   |   4 +-
 .../handler/rest/DeleteHandler.java                |   6 +-
 .../handler/rest/HeadHandler.java                  |   8 +-
 .../handler/rest/OptionsHandler.java               |   8 +-
 .../handler/rest/PutHandler.java                   |   2 +-
 .../handler/rest/RestHandler.java                  |  30 +--
 .../handler/rest/RestMethodHandler.java            |  13 +-
 .../handler/rest/RestServiceHandler.java           |  44 ++--
 .../helper/APTCodeModelHelper.java                 |  73 ++++---
 .../helper/ActionBarSherlockHelper.java            |   5 +-
 .../helper/ActivityIntentBuilder.java              |  16 +-
 .../androidannotations/helper/AndroidManifest.java |   4 +
 .../helper/AnnotationArrayParamExtractor.java      |  13 +-
 .../helper/AnnotationHelper.java                   |  38 ++--
 .../helper/AnnotationParamExtractor.java           |  20 +-
 .../androidannotations/helper/BundleHelper.java    |  73 +++----
 .../org/androidannotations/helper/CaseHelper.java  |  15 +-
 .../org/androidannotations/helper/FileHelper.java  |   3 +
 .../androidannotations/helper/IntentBuilder.java   |  38 ++--
 .../androidannotations/helper/OptionsHelper.java   |   2 +-
 .../helper/RestAnnotationHelper.java               |  45 ++--
 .../helper/ServiceIntentBuilder.java               |   3 +-
 .../androidannotations/helper/ValidatorHelper.java |   4 +-
 .../helper/ValidatorParameterHelper.java           |  23 +-
 .../androidannotations/holder/EActivityHolder.java |  85 ++++----
 .../org/androidannotations/holder/EBeanHolder.java |  11 +-
 .../holder/EComponentHolder.java                   |   8 +-
 .../holder/EComponentWithViewSupportHolder.java    |  36 +++-
 .../androidannotations/holder/EFragmentHolder.java |  49 ++---
 .../holder/EIntentServiceHolder.java               |  80 +++----
 .../androidannotations/holder/EServiceHolder.java  |  33 +--
 .../org/androidannotations/holder/EViewHolder.java |   6 +-
 .../androidannotations/holder/FoundViewHolder.java |   6 +-
 .../holder/HasIntentBuilder.java                   |   9 +-
 .../holder/OnActivityResultHolder.java             |  14 +-
 .../holder/ReceiverRegistrationHolder.java         |  20 +-
 .../androidannotations/holder/RoboGuiceHolder.java |   3 +
 .../holder/SharedPrefHolder.java                   |  13 +-
 .../androidannotations/logger/LoggerContext.java   |  10 +-
 .../androidannotations/logger/LoggerFactory.java   |   3 +
 .../logger/appender/FileAppender.java              |  17 +-
 .../androidannotations/process/ModelProcessor.java |  27 ++-
 .../androidannotations/process/ProcessHolder.java  |   3 +
 .../androidannotations/rclass/IRInnerClass.java    |   2 +-
 .../rclass/ManifestPackageExtractor.java           |   4 +-
 .../androidannotations/ebean/SomeGenericBean.java  |   4 +-
 .../eviewgroup/SomeGenericViewGroup.java           |   5 +-
 .../eviewgroup/SomeGenericViewGroupExt.java        |   3 +-
 .../receiver/ActivityWithInvalidRegisterAt.java    |   3 +-
 .../receiver/ActivityWithTwoSameNameMethod.java    |   5 +-
 .../receiver/ActivityWithValidReceiver.java        |   5 +-
 .../receiver/FragmentWithValidReceiver.java        |   5 +-
 .../receiver/ReceiverRegistrationTest.java         |   4 +-
 .../receiver/ServiceWithInvalidReceiver.java       |   5 +-
 .../receiver/ServiceWithValidReceiver.java         |   5 +-
 AndroidAnnotations/checkstyle-checks.xml           | 117 ++++++++++
 AndroidAnnotations/functional-test-1-5/pom.xml     |   5 +
 .../actionbarsherlock/app/SherlockFragment.java    |  67 +++---
 .../main/java/com/actionbarsherlock/view/Menu.java |   4 +-
 .../test15/ActivityWithGenerics.java               |  17 +-
 .../test15/AwaitingResultActivity.java             |  17 +-
 .../test15/AwaitingResultFragment.java             |  26 +--
 .../org/androidannotations/test15/CustomData.java  |  17 +-
 .../test15/FragmentArguments.java                  |   5 +-
 .../test15/ItemClicksHandledActivity.java          |  23 +-
 .../test15/MultiFindViewActivity.java              |   9 +-
 .../test15/ebean/ThreadControlledBean.java         |   8 +-
 .../test15/efragment/MyFragment.java               |  21 +-
 .../test15/efragment/MyListFragment.java           |  12 +-
 .../eintentservice/IntentServiceHandledAction.java |   2 +-
 .../test15/eprovider/MyProvider.java               |  20 +-
 .../test15/eservice/MyService.java                 |  16 +-
 .../test15/eviewgroup/CustomFrameLayout.java       |  30 +--
 .../eviewgroup/CustomFrameLayoutActivity.java      |   8 +-
 .../ActivityWithInnerEnhancedClasses.java          |  10 +-
 .../innerclasses/BeanWithInnerEnhancedClasses.java |   5 +-
 .../instancestate/MyGenericParcelableBean.java     |  24 ++-
 .../instancestate/MyGenericSerializableBean.java   |  19 +-
 .../test15/instancestate/MyParcelableBean.java     |  20 +-
 .../test15/instancestate/MySerializableBean.java   |  20 +-
 .../instancestate/SaveInstanceStateActivity.java   |  14 +-
 .../test15/menu/OptionsMenuActivity.java           |  18 +-
 .../test15/menu/OptionsMenuFragment.java           |  12 +-
 .../test15/menu/OptionsMenuSubActivity.java        |   3 +
 .../test15/menu/OptionsMenuSupportFragment.java    |  12 +-
 .../test15/ormlite/OrmLiteBean.java                |   4 -
 .../test15/prefs/InnerPrefs.java                   |   2 +-
 .../androidannotations/test15/res/ResActivity.java |  14 +-
 .../org/androidannotations/test15/rest/Event.java  |  20 +-
 .../test15/rest/HttpMethodsService.java            |   3 +-
 .../test15/roboguice/MapActivityWithRoboGuice.java |   4 -
 .../test15/roboguice/SampleRoboApplication.java    |   3 +-
 .../test15/sherlock/MySherlockActivity.java        |  22 +-
 .../test15/sherlock/MySherlockFragment.java        |  11 +-
 .../test15/trace/TracedActivity.java               |  12 +-
 .../test15/ThreadActivityTest.java                 |  93 ++++----
 .../test15/eintentservice/MyIntentServiceTest.java |   4 +-
 .../test15/menu/OptionsMenuActivityTest.java       |   2 +-
 .../test15/sherlock/MySherlockActivityTest.java    |   2 +-
 AndroidAnnotations/pom.xml                         |  38 +++-
 196 files changed, 1903 insertions(+), 1461 deletions(-)
 create mode 100644 AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHandler.java
 delete mode 100644 AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHanlder.java
 create mode 100644 AndroidAnnotations/checkstyle-checks.xml

diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
index e06a828..f448bb0 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.text.Editable;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -25,8 +23,8 @@
 /**
  * <p>
  * This annotation is intended to be used on methods to receive events defined
- * by {@link android.text.TextWatcher#afterTextChanged(Editable s)} after the
- * text is changed on the targeted TextView or subclass of TextView.
+ * by {@link android.text.TextWatcher#afterTextChanged(android.text.Editable s)}
+ * after the text is changed on the targeted TextView or subclass of TextView.
  * </p>
  * <p>
  * The annotation value should be one or several R.id.* fields that refers to
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterViews.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterViews.java
index 9d3fd54..b2939af 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterViews.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterViews.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.app.Activity;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -25,7 +23,8 @@
 /**
  * <p>
  * Methods annotated with @{@link AfterViews} will be called after
- * {@link Activity#setContentView(int)} is called by the generated activity.
+ * {@link android.app.Activity#setContentView(int) setContentView(int)} is
+ * called by the generated activity.
  * </p>
  * <p>
  * This occurs AFTER <code>setContentView(View)</code> which is called at the
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
index b3f63f7..e59a2c2 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
@@ -19,8 +19,6 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import java.util.concurrent.Future;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 
 /**
  * <p>
@@ -30,7 +28,9 @@
  * The annotated method MUST return void and MAY contain parameters.
  * </p>
  * <p>
- * The generated code is based on {@link org.androidannotations.api.BackgroundExecutor} methods.
+ * The generated code is based on
+ * {@link org.androidannotations.api.BackgroundExecutor BackgroundExecutor}
+ * methods.
  * </p>
  * 
  * <h2>Cancellation</h2>
@@ -66,20 +66,25 @@
  * <b>Note</b>: Cancellation may or may not be successful. If the task wasn't
  * executed yet, it will be removed from the pool. But it could fail if task has
  * already completed, has already been cancelled, or could not be cancelled for
- * some other reason. See {@link Future#cancel(boolean)} for more information.
+ * some other reason. See {@link java.util.concurrent.Future#cancel(boolean)
+ * Future#cancel(boolean)} for more information.
  * </p>
  * 
  * <h2>Execution flow</h2>
  * <p>
- * By default, all tasks will be put in a {@link ScheduledThreadPoolExecutor}
- * with a core pool size of <code>2 * numberOfCpu</code>. Which means that
- * background methods will be executed in <b>PARALLEL</b>. You can change this
- * by calling <code>BackgroundExecutor.setExecutor(...)</code>.
+ * By default, all tasks will be put in a
+ * {@link java.util.concurrent.ScheduledThreadPoolExecutor
+ * ScheduledThreadPoolExecutor} with a core pool size of
+ * <code>2 * numberOfCpu</code>. Which means that background methods will be
+ * executed in <b>PARALLEL</b>. You can change this by calling
+ * <code>BackgroundExecutor.setExecutor(...)</code>.
  * </p>
  * <p>
  * If you want execute ALL background methods SEQUENTIALLY, the best way is to
- * change the executor of {@link org.androidannotations.api.BackgroundExecutor} to a
- * {@link ScheduledThreadPoolExecutor} with a core pool size of <code>1</code>.
+ * change the executor of {@link org.androidannotations.api.BackgroundExecutor
+ * BackgroundExecutor} to a
+ * {@link java.util.concurrent.ScheduledThreadPoolExecutor
+ * ScheduledThreadPoolExecutor} with a core pool size of <code>1</code>.
  * </p>
  * <p>
  * If you want execute some background methods SEQUENTIALLY, you should simply
@@ -146,6 +151,7 @@
  * <b>Example</b> :
  *
  * <blockquote>
+ * 
  * <pre>
  * &#064;EBean
  * public class MyBean {
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EView.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EView.java
index 004cc80..99b08a5 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EView.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EView.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.view.ViewGroup;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -24,7 +22,7 @@
 
 /**
  * <p>
- * Should be used on {@link android.view.View} classes to enable usage of
+ * Should be used on {@link android.view.View View} classes to enable usage of
  * AndroidAnnotations.
  * </p>
  * <p>
@@ -62,7 +60,7 @@
  * 
  * @see AfterInject
  * @see AfterViews
- * @see ViewGroup
+ * @see android.view.ViewGroup
  * @see <a
  *      href="http://developer.android.com/guide/topics/ui/custom-components.html"
  *      >How to build a custom component.</a>
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
index 5b33539..80b3b5b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
@@ -15,10 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.app.Activity;
-import android.os.Parcelable;
-
-import java.io.Serializable;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -26,8 +22,9 @@
 
 /**
  * <p>
- * Use on any native, {@link Parcelable} or {@link Serializable} field in an
- * {@link EActivity} annotated class to bind it with Android's extra.
+ * Use on any native, {@link android.os.Parcelable Parcelable} or
+ * {@link java.io.Serializable Serializable} field in an {@link EActivity}
+ * annotated class to bind it with Android's extra.
  * </p>
  * <p>
  * The annotation value is the key used for extra. If not set, the field name
@@ -42,8 +39,8 @@
  * annotated method.
  * </p>
  * <p>
- * Calling {@link Activity#setIntent(android.content.Intent)} will automatically
- * update the annotated extras.
+ * Calling {@link android.app.Activity#setIntent(android.content.Intent)
+ * Activity#setIntent(Intent)} will automatically update the annotated extras.
  * </p>
  * <blockquote>
  * 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
index ad9b3b3..6b17c13 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
@@ -15,9 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.os.Parcelable;
-
-import java.io.Serializable;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -25,8 +22,9 @@
 
 /**
  * <p>
- * Use on any native, {@link Parcelable} or {@link Serializable} field in an
- * {@link EFragment} annotated class to bind it with Android's arguments.
+ * Use on any native, {@link android.os.Parcelable Parcelable} or
+ * {@link java.io.Serializable Serializable} field in an {@link EFragment}
+ * annotated class to bind it with Android's arguments.
  * </p>
  * <p>
  * The annotation value is the key used for argument. If not set, the field name
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
index 7259093..3839765 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import org.androidannotations.annotations.res.HtmlRes;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -24,8 +22,8 @@
 
 /**
  * <p>
- * Use on a {@link android.widget.TextView} field or a
- * {@link android.widget.TextView} subclass field annotated with
+ * Use on a {@link android.widget.TextView TextView} field or a
+ * {@link android.widget.TextView TextView} subclass field annotated with
  * {@link ViewById} to inject text as HTML.
  * </p>
  * <p>
@@ -55,7 +53,7 @@
  * </blockquote>
  * 
  * @see ViewById
- * @see HtmlRes
+ * @see org.androidannotations.annotations.res.HtmlRes
  */
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
index 88fc10e..d32a707 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
@@ -89,7 +89,7 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface HttpsClient {
-	public static final String DEFAULT_PASSWD = "changeit";
+	String DEFAULT_PASSWD = "changeit";
 
 	int trustStore() default ResId.DEFAULT_VALUE;
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/NoTitle.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/NoTitle.java
index f665378..2d7e240 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/NoTitle.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/NoTitle.java
@@ -24,12 +24,12 @@
  * <p>
  * Should be used on {@link EActivity} classes that must have no title.
  * </p>
- * <p>
- * <b>Note:</b> This annotation has been deprecated. Please use
- * <code>&#064;WindowFeature(Window.FEATURE_NO_TITLE})</code> instead
- * </p>
  * 
  * @see WindowFeature
+ * 
+ * @deprecated Please use
+ *             <code>&#064;WindowFeature(Window.FEATURE_NO_TITLE})</code>
+ *             instead
  */
 @Deprecated
 @Retention(RetentionPolicy.CLASS)
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
index e9797c0..de12ea8 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.content.Intent;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -26,9 +24,9 @@
  * <p>
  * This annotation is intended to be used on methods to receive results from a
  * previously started activity using
- * {@link android.app.Activity#startActivityForResult(Intent, int)} or the
- * generated <code>IntentBuilder.startActivityForResult()</code> method of the
- * activity.
+ * {@link android.app.Activity#startActivityForResult(android.content.Intent, int)
+ * Activity#startActivityForResult(Intent, int)} or the generated
+ * <code>IntentBuilder.startActivityForResult()</code> method of the activity.
  * </p>
  * <p>
  * The annotation value must be an integer constant that represents the
@@ -38,10 +36,13 @@
  * The method may have multiple parameter :
  * </p>
  * <ul>
- * <li>A {@link android.content.Intent} that contains data</li>
- * <li>An <code>int</code> or an {@link java.lang.Integer} to get the resultCode</li>
- * <li>Any native, {@link android.os.Parcelable} or {@link java.io.Serializable} parameter
- * annotated with {@link org.androidannotations.annotations.OnActivityResult.Extra} to get an object put in the extras of the intent.</li>
+ * <li>A {@link android.content.Intent Intent} that contains data</li>
+ * <li>An <code>int</code> or an {@link java.lang.Integer Integer} to get the
+ * resultCode</li>
+ * <li>Any native, {@link android.os.Parcelable Parcelable} or
+ * {@link java.io.Serializable Serializable} parameter annotated with
+ * {@link org.androidannotations.annotations.OnActivityResult.Extra
+ * OnActivityResult.Extra} to get an object put in the extras of the intent.</li>
  * </ul>
  *
  * <blockquote>
@@ -69,8 +70,8 @@
  * </blockquote>
  * 
  * @see EActivity
- * @see android.app.Activity#startActivityForResult(Intent, int)
- * @see android.app.Activity#onActivityResult(int, int, Intent)
+ * @see android.app.Activity#startActivityForResult(android.content.Intent, int)
+ * @see android.app.Activity#onActivityResult(int, int, android.content.Intent)
  */
 
 @Retention(RetentionPolicy.CLASS)
@@ -81,12 +82,13 @@
 
 	/**
 	 * <p>
-	 * Use on any native, {@link android.os.Parcelable} or {@link java.io.Serializable} parameter of an
-	 * {@link OnActivityResult} annotated method to bind it with the value from the Intent.
+	 * Use on any native, {@link android.os.Parcelable} or
+	 * {@link java.io.Serializable} parameter of an {@link OnActivityResult}
+	 * annotated method to bind it with the value from the Intent.
 	 * </p>
 	 * <p>
-	 * The annotation value is the key used for the result data. If not set, the field name
-	 * will be used as the key.
+	 * The annotation value is the key used for the result data. If not set, the
+	 * field name will be used as the key.
 	 * </p>
 	 *
 	 * <blockquote>
@@ -97,11 +99,11 @@
 	 * &#064;OnActivityResult(REQUEST_CODE)
 	 * void onResult(int resultCode, Intent data, <b>@Extra String value</b>) {
 	 * }
-	 *
+	 * 
 	 * &#064;OnActivityResult(REQUEST_CODE)
 	 * void onResult(int resultCode, <b>@Extra(value = "key") String value</b>) {
 	 * }
-	 *
+	 * 
 	 * &#064;OnActivityResult(REQUEST_CODE)
 	 * void onResult(<b>@Extra String strVal</b>, <b>@Extra int intVal</b>) {
 	 * }
@@ -109,7 +111,8 @@
 	 *
 	 * </blockquote>
 	 *
-	 * @see android.app.Activity#onActivityResult(int, int, Intent)
+	 * @see android.app.Activity#onActivityResult(int, int,
+	 *      android.content.Intent)
 	 * @see OnActivityResult
 	 */
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
index 8782685..dee6596 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
@@ -69,6 +69,12 @@
 
 	Class<?> helper();
 
+	/**
+	 * 
+	 * @deprecated Since <b>3.1</b> the model class is inferred from the type of
+	 *             the annotated field. This parameter will be removed in a
+	 *             future version.
+	 */
 	@Deprecated
 	Class<?> model() default Void.class;
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
index 5814d64..60f33d0 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.widget.SeekBar;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -26,8 +24,9 @@
  * <p>
  * This annotation is intended to be used on methods to receive events defined
  * by
- * {@link android.widget.SeekBar.OnSeekBarChangeListener#onStartTrackingTouch(SeekBar seekBar)}
- * when the user begins to move the cursor of the targeted SeekBar.
+ * {@link android.widget.SeekBar.OnSeekBarChangeListener#onStartTrackingTouch(android.widget.SeekBar)
+ * SeekBar.OnSeekBarChangeListener#onStartTrackingTouch(SeekBar)} when the user
+ * begins to move the cursor of the targeted SeekBar.
  * </p>
  * <p>
  * The annotation value should be one or several R.id.* fields that refers to an
@@ -38,8 +37,8 @@
  * The method MAY have one parameter :
  * </p>
  * <ul>
- * <li>A {@link android.widget.SeekBar} parameter to determine which view has
- * targeted this event</li>
+ * <li>A {@link android.widget.SeekBar SeekBar} parameter to determine which
+ * view has targeted this event</li>
  * </ul>
  *
  * <blockquote>
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
index aef06df..8b696f4 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.widget.SeekBar;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -26,8 +24,9 @@
  * <p>
  * This annotation is intended to be used on methods to receive events defined
  * by
- * {@link android.widget.SeekBar.OnSeekBarChangeListener#onStopTrackingTouch(SeekBar seekBar)}
- * when the user has finished to move the cursor of the targeted SeekBar.
+ * {@link android.widget.SeekBar.OnSeekBarChangeListener#onStopTrackingTouch(android.widget.SeekBar)
+ * SeekBar.OnSeekBarChangeListener#onStopTrackingTouch(SeekBar)} when the user
+ * has finished to move the cursor of the targeted SeekBar.
  * </p>
  * <p>
  * The annotation value should be one or several R.id.* fields that refers to an
@@ -38,8 +37,8 @@
  * The method MAY have one parameter :
  * </p>
  * <ul>
- * <li>A {@link android.widget.SeekBar} parameter to determine which view has
- * targeted this event</li>
+ * <li>A {@link android.widget.SeekBar SeekBar} parameter to determine which
+ * view has targeted this event</li>
  * </ul>
  *
  * <blockquote>
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
index d53eb41..31c690a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import org.androidannotations.api.BackgroundExecutor;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -24,44 +22,48 @@
 
 /**
  * <p>
- * Ensures that the method is called from the background thread with (optionally) restrictions by allowed serials.
- * If it is not called from a supposed background thread, then {@link IllegalStateException}
- * will be thrown (by default).
+ * Ensures that the method is called from the background thread with
+ * (optionally) restrictions by allowed serials. If it is not called from a
+ * supposed background thread, then {@link IllegalStateException} will be thrown
+ * (by default).
  * </p>
  * <blockquote> <b>Example</b> :
  *
  * <pre>
  * &#064;EBean
  * public class MyBean {
- *
+ * 
  * 	&#064;SupposeBackground
  * 	boolean someMethodThatShouldNotBeCalledFromUiThread() {
- * 		//if this method will be called from the UI-thread an exception will be thrown
- *    }
- *
- * 	&#064;SupposeBackground(serial = {"serial1", "serial2"})
+ * 		// if this method will be called from the UI-thread an exception will be
+ * 		// thrown
+ * 	}
+ * 
+ * 	&#064;SupposeBackground(serial = { &quot;serial1&quot;, &quot;serial2&quot; })
  * 	boolean someMethodThatShouldBeCalledFromSerial1OrSerial2() {
- * 		//if this method will be called from another thread then a background thread with a
- * 		//serial "serial1" or "serial2", an exception will be thrown
- *    }
- *
+ * 		// if this method will be called from another thread then a background
+ * 		// thread with a
+ * 		// serial &quot;serial1&quot; or &quot;serial2&quot;, an exception will be thrown
+ * 	}
+ * 
  * }
  * </pre>
+ * 
  * </blockquote>
  *
- * @see BackgroundExecutor#setWrongThreadListener(BackgroundExecutor.WrongThreadListener)
- * @see BackgroundExecutor#DEFAULT_WRONG_THREAD_LISTENER
- * @see BackgroundExecutor#checkBgThread(String...)
+ * @see org.androidannotations.api.BackgroundExecutor#setWrongThreadListener(org.androidannotations.api.BackgroundExecutor.WrongThreadListener)
+ * @see org.androidannotations.api.BackgroundExecutor#DEFAULT_WRONG_THREAD_LISTENER
+ * @see org.androidannotations.api.BackgroundExecutor#checkBgThread(String...)
  */
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface SupposeBackground {
 
 	/**
-	 * @return Allowed serials to restrict a calling thread. If it is an empty list, 
-	 * then any background thread is allowed.
+	 * @return Allowed serials to restrict a calling thread. If it is an empty
+	 *         list, then any background thread is allowed.
 	 *
-	 * @see BackgroundExecutor#checkBgThread(String...)
+	 * @see org.androidannotations.api.BackgroundExecutor#checkBgThread(String...)
 	 */
 	String[] serial() default {};
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeUiThread.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeUiThread.java
index 286557e..786c0ed 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeUiThread.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeUiThread.java
@@ -15,9 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import org.androidannotations.api.BackgroundExecutor;
-
-import java.lang.IllegalStateException;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -32,19 +29,20 @@
  * <pre>
  * &#064;EBean
  * public class MyBean {
- *
+ * 
  * 	&#064;SupposeUiThread
  * 	boolean someMethodThatShouldBeCalledOnlyFromUiThread() {
- * 		//if this method will be called from a background thread an exception will be thrown
- *    }
+ * 		// if this method will be called from a background thread an exception
+ * 		// will be thrown
+ * 	}
  * }
  * </pre>
  *
  * </blockquote>
  *
- * @see BackgroundExecutor#setWrongThreadListener(BackgroundExecutor.WrongThreadListener)
- * @see BackgroundExecutor#DEFAULT_WRONG_THREAD_LISTENER
- * @see BackgroundExecutor#checkUiThread()
+ * @see org.androidannotations.api.BackgroundExecutor#setWrongThreadListener(org.androidannotations.api.BackgroundExecutor.WrongThreadListener)
+ * @see org.androidannotations.api.BackgroundExecutor#DEFAULT_WRONG_THREAD_LISTENER
+ * @see org.androidannotations.api.BackgroundExecutor#checkUiThread()
  */
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
index 23228ad..15f7c71 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.view.MotionEvent;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -26,8 +24,9 @@
  * <p>
  * This annotation is intended to be used on methods to receive events defined
  * by
- * {@link android.view.View.OnTouchListener#onTouch(android.view.View, MotionEvent)}
- * when the view has been touched by the user.
+ * {@link android.view.View.OnTouchListener#onTouch(android.view.View, android.view.MotionEvent)
+ * View.OnTouchListener#onTouch(View, MotionEvent)} when the view has been
+ * touched by the user.
  * </p>
  * <p>
  * The annotation value should be one or several of R.id.* fields. If not set,
@@ -42,7 +41,8 @@
  * The method MAY have one or two parameters:
  * </p>
  * <ul>
- * <li>A {@link android.view.View} parameter to know which view has been clicked</li>
+ * <li>A {@link android.view.View} parameter to know which view has been clicked
+ * </li>
  * <li>A {@link android.view.MotionEvent} parameter</li>
  * </ul>
  * <blockquote>
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
index 62f8436..357cfe7 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations;
 
-import android.util.Log;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import android.util.Log;
+
 /**
  * <p>
  * This annotation is intended to be used on methods to log at runtime the
@@ -72,7 +72,7 @@
 @Target(ElementType.METHOD)
 public @interface Trace {
 
-	public static final String DEFAULT_TAG = "NO_TAG";
+	String DEFAULT_TAG = "NO_TAG";
 
 	String tag() default DEFAULT_TAG;
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
index d94412f..8d462ce 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations;
 
-import android.os.Handler;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -90,7 +88,7 @@
  * </blockquote>
  * 
  * @see Background
- * @see Handler
+ * @see android.os.Handler
  */
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
@@ -103,7 +101,8 @@
 	 * using the handler. The default value is ENQUEUE, which will always call
 	 * the handler.
 	 * 
-	 * @return whether the method should be posted or executed if it's in the UI thread
+	 * @return whether the method should be posted or executed if it's in the UI
+	 *         thread
 	 */
 	Propagation propagation() default Propagation.ENQUEUE;
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
index aeaab65..c844959 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link android.content.res.XmlResourceParser} fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
index bf6e90b..8a4ceed 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.Boolean} or <code>boolean</code> fields in any
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
index 03dee4c..f72b18f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.Integer} or <code>int</code> fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
index 2306529..332e161 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link android.content.res.ColorStateList} fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
index fe6fda8..3ec4af1 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.Integer} or <code>int</code> fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
index 0123744..d78ee23 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.Integer} or <code>int</code> fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
index ea3ebd9..2461ac7 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.Float} or <code>float</code> fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
index eff163b..8e23731 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link android.graphics.drawable.Drawable} fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
index ece4d32..378a777 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.CharSequence} or {@link android.text.Spanned} fields
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
index ceeae8a..b886468 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.Integer} or <code>int</code> array fields in any
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
index 63ee477..3f2aea6 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.Integer} or <code>int</code> fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
index ac86bde..b818c67 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link android.content.res.XmlResourceParser} fields in any enhanced
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
index a20b19d..c3a36a6 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link android.graphics.Movie} fields in any enhanced classes that
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
index 4ab64e2..f191d98 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.String} array fields in any enhanced classes that
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
index 6fa4879..f663845 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.String} fields in any enhanced classes that should be
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
index 3aa3bb6..c80e71c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.CharSequence} array fields in any enhanced classes
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
index 7a92017..0e2f3ad 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.res;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on {@link java.lang.CharSequence} fields in any enhanced classes that
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
index 59748a7..a1fd7bf 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations.rest;
 
-import org.androidannotations.api.rest.MediaType;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -30,7 +28,8 @@
  * <p>
  * The annotation {@link #value()} is mandatory and define the <a
  * href="https://en.wikipedia.org/wiki/Internet_media_type">media type</a> to
- * accept. We provide a {@link MediaType} class to help you.
+ * accept. We provide a {@link org.androidannotations.api.rest.MediaType
+ * MediaType} class to help you.
  * </p>
  * <blockquote>
  * 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
index aad4ebf..d5c8e3b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
@@ -19,7 +19,6 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import java.util.Set;
 
 /**
  * <p>
@@ -28,7 +27,7 @@
  * </p>
  * <p>
  * This annotation as the same constraints as {@link Get} but it MUST return a
- * {@link Set} of {@link org.springframework.http.HttpMethod}
+ * {@link java.util.Set} of {@link org.springframework.http.HttpMethod}
  * </p>
  * <blockquote>
  * 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresAuthentication.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresAuthentication.java
index 8a194ed..d25e7c0 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresAuthentication.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresAuthentication.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations.rest;
 
-import org.androidannotations.api.rest.RestClientHeaders;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -29,9 +27,11 @@
  * </p>
  * <p>
  * To set the current authentication object to use, you MUST either let your
- * RestClient interface extends of {@link RestClientHeaders} or add the
- * following method to your interface :
- * <code>void setAuthentication(org.springframework.http.HttpAuthentication auth)</code>.
+ * RestClient interface extends of
+ * {@link org.androidannotations.api.rest.RestClientHeaders RestClientHeaders}
+ * or add the following method to your interface :
+ * <code>void setAuthentication(org.springframework.http.HttpAuthentication auth)</code>
+ * .
  * </p>
  * <p>
  * You can also add this specific method for <a
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
index c9481eb..3df7e2c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations.rest;
 
-import org.androidannotations.api.rest.RestClientHeaders;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -33,7 +31,8 @@
  * </p>
  * <p>
  * To set a cookie's value you MUST either let your RestClient interface extends
- * of {@link RestClientHeaders} or add the following method to your interface :
+ * of {@link org.androidannotations.api.rest.RestClientHeaders
+ * RestClientHeaders} or add the following method to your interface :
  * <code>void setCookie(String name, String value)</code>.
  * </p>
  * <p>
@@ -82,5 +81,5 @@
 @Retention(RetentionPolicy.CLASS)
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface RequiresCookie {
-	public String[] value();
+	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
index 0eddc78..16a70dc 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
@@ -37,5 +37,5 @@
 @Retention(RetentionPolicy.CLASS)
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface RequiresCookieInUrl {
-	public String[] value();
+	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
index ebb1c5f..88ad0ef 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations.rest;
 
-import org.androidannotations.api.rest.RestClientHeaders;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -33,7 +31,8 @@
  * </p>
  * <p>
  * To set a header's value you MUST either let your RestClient interface extends
- * of {@link RestClientHeaders} or add the following method to your interface :
+ * of {@link org.androidannotations.api.rest.RestClientHeaders
+ * RestClientHeaders} or add the following method to your interface :
  * <code>void setHeader(String name, String value)</code>.
  * </p>
  * <p>
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
index 7aeea6a..f1ab516 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
@@ -15,10 +15,6 @@
  */
 package org.androidannotations.annotations.rest;
 
-import org.androidannotations.api.rest.RestClientHeaders;
-import org.androidannotations.api.rest.RestClientRootUrl;
-import org.androidannotations.api.rest.RestClientSupport;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -199,9 +195,9 @@
  * 
  * 
  * @see RestService
- * @see RestClientSupport
- * @see RestClientRootUrl
- * @see RestClientHeaders
+ * @see org.androidannotations.api.rest.RestClientSupport
+ * @see org.androidannotations.api.rest.RestClientRootUrl
+ * @see org.androidannotations.api.rest.RestClientHeaders
  */
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
@@ -211,5 +207,6 @@
 	Class<?>[] converters();
 
 	Class<?>[] interceptors() default {};
+
 	Class<?> requestFactory() default Void.class;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
index e8192d8..03afdc5 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
@@ -62,5 +62,5 @@
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface SetsCookie {
 
-	public String[] value();
+	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
index 09312ee..a0d466d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on methods in {@link SharedPref} annotated class to specified the default
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
index ca4cd41..cd4b56a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on methods in {@link SharedPref} annotated class to specified the default
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
index b2a1229..12bc2d8 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on methods in {@link SharedPref} annotated class to specified the default
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
index f054a76..a1bde5a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on methods in {@link SharedPref} annotated class to specified the default
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
index c864cf6..cb5ee53 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on methods in {@link SharedPref} annotated class to specified the default
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
index 83bcb1b..cc60797 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import org.androidannotations.annotations.ResId;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.androidannotations.annotations.ResId;
+
 /**
  * <p>
  * Use on methods in {@link SharedPref} annotated class to specified the default
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/Pref.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/Pref.java
index 23fbb01..f13e380 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/Pref.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/Pref.java
@@ -15,8 +15,6 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import org.androidannotations.api.sharedpreferences.SharedPreferencesHelper;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -28,7 +26,9 @@
  * </p>
  * <p>
  * The field MUST be of a type that is generated using {@link SharedPref} and
- * therefore extends {@link SharedPreferencesHelper}.
+ * therefore extends
+ * {@link org.androidannotations.api.sharedpreferences.SharedPreferencesHelper
+ * SharedPreferencesHelper}.
  * </p>
  * <p>
  * <b>Note:</b> To prevent you from any building issues, you should use fully
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
index 36df999..7f82c1f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.annotations.sharedpreferences;
 
-import android.content.Context;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import android.content.Context;
+
 /**
  * <p>
  * Apply @{@link SharedPref} on an interface to create a SharedPreference helper
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/BackgroundExecutor.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/BackgroundExecutor.java
index 7511790..ef038dc 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/BackgroundExecutor.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/BackgroundExecutor.java
@@ -28,23 +28,21 @@
 
 import android.os.Looper;
 import android.util.Log;
-import org.androidannotations.annotations.SupposeBackground;
-import org.androidannotations.annotations.SupposeUiThread;
 
 public class BackgroundExecutor {
 
 	private static final String TAG = "BackgroundExecutor";
 
-	public static Executor DEFAULT_EXECUTOR = Executors.newScheduledThreadPool(2 * Runtime.getRuntime().availableProcessors());
+	public static final Executor DEFAULT_EXECUTOR = Executors.newScheduledThreadPool(2 * Runtime.getRuntime().availableProcessors());
 	private static Executor executor = DEFAULT_EXECUTOR;
 
 	/**
-	 * The default invocation handler for wrong thread execution.
-	 * It just throws {@link IllegalStateException} with explanation what is going wrong.
+	 * The default invocation handler for wrong thread execution. It just throws
+	 * {@link IllegalStateException} with explanation what is going wrong.
 	 *
 	 * @see #setWrongThreadListener(BackgroundExecutor.WrongThreadListener)
-	 * @see SupposeBackground
-	 * @see SupposeUiThread
+	 * @see org.androidannotations.annotations.SupposeBackground
+	 * @see org.androidannotations.annotations.SupposeUiThread
 	 */
 	public static final WrongThreadListener DEFAULT_WRONG_THREAD_LISTENER = new WrongThreadListener() {
 		@Override
@@ -71,8 +69,11 @@ public void onWrongBgSerial(String currentSerial, String... expectedSerials) {
 
 	private static WrongThreadListener wrongThreadListener = DEFAULT_WRONG_THREAD_LISTENER;
 
-	private static final List<Task> tasks = new ArrayList<Task>();
-	private static final ThreadLocal<String> currentSerial = new ThreadLocal<String>();
+	private static final List<Task> TASKS = new ArrayList<Task>();
+	private static final ThreadLocal<String> CURRENT_SERIAL = new ThreadLocal<String>();
+
+	private BackgroundExecutor() {
+	}
 
 	/**
 	 * Execute a runnable after the given delay.
@@ -131,7 +132,7 @@ public static synchronized void execute(Task task) {
 		if (task.id != null || task.serial != null) {
 			/* keep task */
 			task.future = future;
-			tasks.add(task);
+			TASKS.add(task);
 		}
 	}
 
@@ -224,10 +225,11 @@ public static void setExecutor(Executor executor) {
 	}
 
 	/**
-	 * Changes the default {@link WrongThreadListener}.
-	 * To restore the default one use {@link #DEFAULT_WRONG_THREAD_LISTENER}.
+	 * Changes the default {@link WrongThreadListener}. To restore the default
+	 * one use {@link #DEFAULT_WRONG_THREAD_LISTENER}.
 	 *
-	 * @param listener the new {@link WrongThreadListener}
+	 * @param listener
+	 *            the new {@link WrongThreadListener}
 	 */
 	public static void setWrongThreadListener(WrongThreadListener listener) {
 		wrongThreadListener = listener;
@@ -244,8 +246,8 @@ public static void setWrongThreadListener(WrongThreadListener listener) {
 	 *            complete
 	 */
 	public static synchronized void cancelAll(String id, boolean mayInterruptIfRunning) {
-		for (int i = tasks.size() - 1; i >= 0; i--) {
-			Task task = tasks.get(i);
+		for (int i = TASKS.size() - 1; i >= 0; i--) {
+			Task task = TASKS.get(i);
 			if (id.equals(task.id)) {
 				if (task.future != null) {
 					task.future.cancel(mayInterruptIfRunning);
@@ -261,7 +263,7 @@ public static synchronized void cancelAll(String id, boolean mayInterruptIfRunni
 					Log.w(TAG, "A task with id " + task.id + " cannot be cancelled (the executor set does not support it)");
 				} else {
 					/* this task has not been submitted to the executor */
-					tasks.remove(i);
+					TASKS.remove(i);
 				}
 			}
 		}
@@ -269,7 +271,8 @@ public static synchronized void cancelAll(String id, boolean mayInterruptIfRunni
 
 	/**
 	 * Checks if the current thread is UI thread and notifies
-	 * {@link BackgroundExecutor.WrongThreadListener#onUiExpected()} if it doesn't.
+	 * {@link BackgroundExecutor.WrongThreadListener#onUiExpected()} if it
+	 * doesn't.
 	 */
 	public static void checkUiThread() {
 		if (Looper.getMainLooper().getThread() != Thread.currentThread()) {
@@ -278,17 +281,21 @@ public static void checkUiThread() {
 	}
 
 	/**
-	 * Checks if the current thread is a background thread and, optionally, restricts it
-	 * with passed serials. If no serials passed and current thread is the UI thread, then
-	 * {@link WrongThreadListener#onBgExpected(String...)} will be called.
-	 * If the current thread is not UI and serials list is empty, then this method just returns.
-	 * Otherwise, if the method was called not during {@link Task} execution or the task has no
-	 * serial, then the {@link WrongThreadListener#onWrongBgSerial(String, String...)} will be called
-	 * with null for the first parameter. If task has a serial but passed serials don't contain that,
-	 * then {@link WrongThreadListener#onWrongBgSerial(String, String...)} will be called with
-	 * the task's serial for the first parameter.
+	 * Checks if the current thread is a background thread and, optionally,
+	 * restricts it with passed serials. If no serials passed and current thread
+	 * is the UI thread, then
+	 * {@link WrongThreadListener#onBgExpected(String...)} will be called. If
+	 * the current thread is not UI and serials list is empty, then this method
+	 * just returns. Otherwise, if the method was called not during {@link Task}
+	 * execution or the task has no serial, then the
+	 * {@link WrongThreadListener#onWrongBgSerial(String, String...)} will be
+	 * called with null for the first parameter. If task has a serial but passed
+	 * serials don't contain that, then
+	 * {@link WrongThreadListener#onWrongBgSerial(String, String...)} will be
+	 * called with the task's serial for the first parameter.
 	 *
-	 * @param serials (optional) list of allowed serials
+	 * @param serials
+	 *            (optional) list of allowed serials
 	 */
 	public static void checkBgThread(String... serials) {
 		if (serials.length == 0) {
@@ -297,7 +304,7 @@ public static void checkBgThread(String... serials) {
 			}
 			return;
 		}
-		String current = currentSerial.get();
+		String current = CURRENT_SERIAL.get();
 		if (current == null) {
 			wrongThreadListener.onWrongBgSerial(null, serials);
 			return;
@@ -314,12 +321,13 @@ public static void checkBgThread(String... serials) {
 	 * Indicates whether a task with the specified <code>serial</code> has been
 	 * submitted to the executor.
 	 *
-	 * @param serial the serial queue
+	 * @param serial
+	 *            the serial queue
 	 * @return <code>true</code> if such a task has been submitted,
-	 * <code>false</code> otherwise
+	 *         <code>false</code> otherwise
 	 */
 	private static boolean hasSerialRunning(String serial) {
-		for (Task task : tasks) {
+		for (Task task : TASKS) {
 			if (task.executionAsked && serial.equals(task.serial)) {
 				return true;
 			}
@@ -336,10 +344,10 @@ private static boolean hasSerialRunning(String serial) {
 	 * @return task if found, <code>null</code> otherwise
 	 */
 	private static Task take(String serial) {
-		int len = tasks.size();
+		int len = TASKS.size();
 		for (int i = 0; i < len; i++) {
-			if (serial.equals(tasks.get(i).serial)) {
-				return tasks.remove(i);
+			if (serial.equals(TASKS.get(i).serial)) {
+				return TASKS.remove(i);
 			}
 		}
 		return null;
@@ -389,7 +397,7 @@ public void run() {
 			}
 
 			try {
-				currentSerial.set(serial);
+				CURRENT_SERIAL.set(serial);
 				execute();
 			} finally {
 				/* handle next tasks */
@@ -404,10 +412,10 @@ private void postExecute() {
 				/* nothing to do */
 				return;
 			}
-			currentSerial.set(null);
+			CURRENT_SERIAL.set(null);
 			synchronized (BackgroundExecutor.class) {
 				/* execution complete */
-				tasks.remove(this);
+				TASKS.remove(this);
 
 				if (serial != null) {
 					Task next = take(serial);
@@ -426,45 +434,51 @@ private void postExecute() {
 	}
 
 	/**
-	 * A callback interface to be notified when a method invocation is expected from another thread.
+	 * A callback interface to be notified when a method invocation is expected
+	 * from another thread.
 	 *
 	 * @see #setWrongThreadListener(WrongThreadListener)
 	 * @see #checkUiThread()
 	 * @see #checkBgThread(String...)
-	 * @see SupposeUiThread
-	 * @see SupposeBackground
+	 * @see org.androidannotations.annotations.SupposeUiThread
+	 * @see org.androidannotations.annotations.SupposeBackground
 	 */
-	public static interface WrongThreadListener {
+	public interface WrongThreadListener {
 
 		/**
-		 * Will be called, if the method is supposed to be called from the UI-thread, but was called from a background
-		 * thread.
+		 * Will be called, if the method is supposed to be called from the
+		 * UI-thread, but was called from a background thread.
 		 *
-		 * @see SupposeUiThread
+		 * @see org.androidannotations.annotations.SupposeUiThread
 		 * @see #setWrongThreadListener(WrongThreadListener)
 		 * @see #DEFAULT_WRONG_THREAD_LISTENER
 		 */
 		void onUiExpected();
 
 		/**
-		 * Will be called, if the method is supposed to be called from a background thread, but was called from the
-		 * UI-thread.
+		 * Will be called, if the method is supposed to be called from a
+		 * background thread, but was called from the UI-thread.
 		 *
-		 * @param expectedSerials a list of allowed serials. If any background thread is allowed the list will be empty.
-		 * @see SupposeBackground
+		 * @param expectedSerials
+		 *            a list of allowed serials. If any background thread is
+		 *            allowed the list will be empty.
+		 * @see org.androidannotations.annotations.SupposeBackground
 		 * @see #setWrongThreadListener(WrongThreadListener)
 		 * @see #DEFAULT_WRONG_THREAD_LISTENER
 		 */
 		void onBgExpected(String... expectedSerials);
 
 		/**
-		 * Will be called, if the method is supposed to be called from a background thread with one of
-		 * {@code expectedSerials}, but was called from a {@code currentSerial}. {@code currentSerial} will be null,
-		 * if it is called from a background thread without a serial.
+		 * Will be called, if the method is supposed to be called from a
+		 * background thread with one of {@code expectedSerials}, but was called
+		 * from a {@code currentSerial}. {@code currentSerial} will be null, if
+		 * it is called from a background thread without a serial.
 		 *
-		 * @param currentSerial   the serial of caller thread or null if there is no serial
-		 * @param expectedSerials a list of allowed serials
-		 * @see SupposeBackground
+		 * @param currentSerial
+		 *            the serial of caller thread or null if there is no serial
+		 * @param expectedSerials
+		 *            a list of allowed serials
+		 * @see org.androidannotations.annotations.SupposeBackground
 		 * @see #setWrongThreadListener(WrongThreadListener)
 		 * @see #DEFAULT_WRONG_THREAD_LISTENER
 		 */
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/SdkVersionHelper.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/SdkVersionHelper.java
index 229ac56..7e65920 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/SdkVersionHelper.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/SdkVersionHelper.java
@@ -20,9 +20,13 @@
 
 public class SdkVersionHelper {
 
+	private SdkVersionHelper() {
+	}
+
 	public static int getSdkInt() {
-		if (Build.VERSION.RELEASE.startsWith("1.5"))
+		if (Build.VERSION.RELEASE.startsWith("1.5")) {
 			return 3;
+		}
 
 		return HelperInternal.getSdkIntInternal();
 	}
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/ViewServer.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/ViewServer.java
index 7aaadc7..380e562 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/ViewServer.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/ViewServer.java
@@ -15,28 +15,34 @@
  */
 package org.androidannotations.api;
 
-import android.app.Activity;
-import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.os.Build;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewDebug;
-
-import java.io.*;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
 import java.lang.reflect.Method;
 import java.net.InetAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Map.Entry;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
+import android.app.Activity;
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewDebug;
+
 /**
  * <p>
  * This class can be used to enable the use of HierarchyViewer inside an
@@ -139,7 +145,7 @@
 
 	private final List<WindowListener> mListeners = new CopyOnWriteArrayList<ViewServer.WindowListener>();
 
-	private final HashMap<View, String> mWindows = new HashMap<View, String>();
+	private final Map<View, String> mWindows = new HashMap<View, String>();
 	private final ReentrantReadWriteLock mWindowsLock = new ReentrantReadWriteLock();
 
 	private View mFocusedWindow;
@@ -209,8 +215,7 @@ private ViewServer(int port) {
 	 *             If the server cannot be created.
 	 * 
 	 * @see #stop()
-	 * @see #isRunning()
-	 * see WindowManagerService#startViewServer(int)
+	 * @see #isRunning() see WindowManagerService#startViewServer(int)
 	 */
 	public boolean start() throws IOException {
 		if (mThread != null) {
@@ -231,8 +236,7 @@ public boolean start() throws IOException {
 	 *         the server wasn't started.
 	 * 
 	 * @see #start()
-	 * @see #isRunning()
-	 * see WindowManagerService#stopViewServer()
+	 * @see #isRunning() see WindowManagerService#stopViewServer()
 	 */
 	public boolean stop() {
 		if (mThread != null) {
@@ -280,8 +284,7 @@ public boolean stop() {
 	 * @return True if the server is running, false otherwise.
 	 * 
 	 * @see #start()
-	 * @see #stop()
-	 * see WindowManagerService#isViewServerRunning()
+	 * @see #stop() see WindowManagerService#isViewServerRunning()
 	 */
 	public boolean isRunning() {
 		return mThread != null && mThread.isAlive();
@@ -322,8 +325,10 @@ public void removeWindow(Activity activity) {
 	/**
 	 * Invoke this method to register a new view hierarchy.
 	 * 
-	 * @param view A view that belongs to the view hierarchy/window to register
-	 * @param name The name of the view hierarchy/window to register
+	 * @param view
+	 *            A view that belongs to the view hierarchy/window to register
+	 * @param name
+	 *            The name of the view hierarchy/window to register
 	 * 
 	 * @see #removeWindow(View)
 	 */
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/rest/RestClientHeaders.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/rest/RestClientHeaders.java
index d0d2790..2eda8df 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/rest/RestClientHeaders.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/rest/RestClientHeaders.java
@@ -26,7 +26,8 @@
 	/**
 	 * Gets a cookie by name.
 	 * 
-	 * @param name Name of the cookie
+	 * @param name
+	 *            Name of the cookie
 	 * @return the cookie value.
 	 */
 	String getCookie(String name);
@@ -34,15 +35,18 @@
 	/**
 	 * Sets a cookie by name.
 	 * 
-	 * @param name Name of the cookie
-	 * @param value Value of the cookie
+	 * @param name
+	 *            Name of the cookie
+	 * @param value
+	 *            Value of the cookie
 	 */
 	void setCookie(String name, String value);
 
 	/**
 	 * Gets a header by name.
 	 * 
-	 * @param name Name of the header
+	 * @param name
+	 *            Name of the header
 	 * @return the header value.
 	 */
 	String getHeader(String name);
@@ -50,30 +54,36 @@
 	/**
 	 * Sets a header by name.
 	 * 
-	 * @param name Name of the header
-	 * @param value Value of the header
+	 * @param name
+	 *            Name of the header
+	 * @param value
+	 *            Value of the header
 	 */
 	void setHeader(String name, String value);
 
 	/**
 	 * Sets the authentication object.
 	 * 
-	 * @param auth Authentication data
+	 * @param auth
+	 *            Authentication data
 	 */
 	void setAuthentication(HttpAuthentication auth);
 
 	/**
 	 * Sets the basic authentication user/password.
 	 * 
-	 * @param user Name of the user
-	 * @param password Password of the user
+	 * @param user
+	 *            Name of the user
+	 * @param password
+	 *            Password of the user
 	 */
 	void setHttpBasicAuth(String user, String password);
 
-    /**
-     * Sets the Authorization: Bearer header as documented in RFC6750
-     *
-     * @param token Token used for authentication
-     */
-    void setBearerAuth(String token);
+	/**
+	 * Sets the Authorization: Bearer header as documented in RFC6750
+	 *
+	 * @param token
+	 *            Token used for authentication
+	 */
+	void setBearerAuth(String token);
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/roboguice/RoboGuiceHelper.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/roboguice/RoboGuiceHelper.java
index 45621f6..f2a1cee 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/roboguice/RoboGuiceHelper.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/roboguice/RoboGuiceHelper.java
@@ -24,6 +24,9 @@
  */
 public class RoboGuiceHelper {
 
+	private RoboGuiceHelper() {
+	}
+
 	public static void callInjectViews(Object activity) {
 		try {
 			Class<?> viewMembersInjectorClass = Class.forName("roboguice.inject.ViewListener$ViewMembersInjector");
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/sharedpreferences/SharedPreferencesCompat.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/sharedpreferences/SharedPreferencesCompat.java
index bc8d2c8..6ce8fb1 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/sharedpreferences/SharedPreferencesCompat.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/api/sharedpreferences/SharedPreferencesCompat.java
@@ -30,13 +30,13 @@
 	private SharedPreferencesCompat() {
 	}
 
-	private static final Method sApplyMethod = findMethod(SharedPreferences.Editor.class, "apply");
-	private static final Method sGetStringSetMethod = findMethod(SharedPreferences.class, "getStringSet", String.class, Set.class);
-	private static final Method sPutStringSetMethod = findMethod(SharedPreferences.Editor.class, "putStringSet", String.class, Set.class);
+	private static final Method APPLY_METHOD = findMethod(SharedPreferences.Editor.class, "apply");
+	private static final Method GET_STRING_SET_METHOD = findMethod(SharedPreferences.class, "getStringSet", String.class, Set.class);
+	private static final Method PUT_STRING_SET_METHOD = findMethod(SharedPreferences.Editor.class, "putStringSet", String.class, Set.class);
 
 	public static void apply(SharedPreferences.Editor editor) {
 		try {
-			invoke(sApplyMethod, editor);
+			invoke(APPLY_METHOD, editor);
 			return;
 		} catch (NoSuchMethodException e) {
 			editor.commit();
@@ -45,7 +45,7 @@ public static void apply(SharedPreferences.Editor editor) {
 
 	public static Set<String> getStringSet(SharedPreferences preferences, String key, Set<String> defValues) {
 		try {
-			return invoke(sGetStringSetMethod, preferences, key, defValues);
+			return invoke(GET_STRING_SET_METHOD, preferences, key, defValues);
 		} catch (NoSuchMethodException e) {
 			String serializedSet = preferences.getString(key, null);
 			return SetXmlSerializer.deserialize(serializedSet);
@@ -54,7 +54,7 @@ public static void apply(SharedPreferences.Editor editor) {
 
 	public static void putStringSet(SharedPreferences.Editor editor, String key, Set<String> values) {
 		try {
-			invoke(sPutStringSetMethod, editor, key, values);
+			invoke(PUT_STRING_SET_METHOD, editor, key, values);
 		} catch (NoSuchMethodException e1) {
 			editor.putString(key, SetXmlSerializer.serialize(values));
 		}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/com/sun/codemodel/JSuperWildcard.java b/AndroidAnnotations/androidannotations/src/main/java/com/sun/codemodel/JSuperWildcard.java
index 8fbf7f3..9c4fe01 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/com/sun/codemodel/JSuperWildcard.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/com/sun/codemodel/JSuperWildcard.java
@@ -45,6 +45,8 @@ public String fullName() {
 		return "? super " + bound.fullName();
 	}
 
+	// CHECKSTYLE:OFF
+
 	@Override
 	public JPackage _package() {
 		return null;
@@ -52,7 +54,7 @@ public JPackage _package() {
 
 	/**
 	 * Returns the class bound of this variable.
-	 * 
+	 *
 	 * <p>
 	 * If no bound is given, this method returns {@link Object}.
 	 */
@@ -73,6 +75,8 @@ public JClass _extends() {
 		return bound._implements();
 	}
 
+	// CHECKSTYLE:ON
+
 	@Override
 	public boolean isInterface() {
 		return false;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/AndroidAnnotationProcessor.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/AndroidAnnotationProcessor.java
index 8bc40b4..6f9e870 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/AndroidAnnotationProcessor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/AndroidAnnotationProcessor.java
@@ -25,7 +25,6 @@
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
-import javax.annotation.processing.SupportedSourceVersion;
 import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/exception/ProcessingException.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/exception/ProcessingException.java
index c22d4dc..4277a1b 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/exception/ProcessingException.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/exception/ProcessingException.java
@@ -21,7 +21,7 @@
 
 	private static final long serialVersionUID = -1282996599471872615L;
 
-	private Element element;
+	private final Element element;
 
 	public ProcessingException(Throwable cause, Element element) {
 		super(cause);
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/AnnotationHandlers.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/AnnotationHandlers.java
index 55a99f3..cd0c452 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/AnnotationHandlers.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/AnnotationHandlers.java
@@ -100,7 +100,7 @@ public AnnotationHandlers(ProcessingEnvironment processingEnvironment) {
 		add(new FullscreenHandler(processingEnvironment));
 		add(new RestServiceHandler(processingEnvironment));
 		add(new OrmLiteDaoHandler(processingEnvironment));
-		add(new RootContextHanlder(processingEnvironment));
+		add(new RootContextHandler(processingEnvironment));
 		add(new NonConfigurationInstanceHandler(processingEnvironment));
 		add(new BeanHandler(processingEnvironment));
 		add(new ExtraHandler(processingEnvironment));
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/BeanHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/BeanHandler.java
index 5766365..444dc92 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/BeanHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/BeanHandler.java
@@ -15,10 +15,13 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JFieldRef;
-import com.sun.codemodel.JInvocation;
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr.ref;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.type.TypeMirror;
+
 import org.androidannotations.annotations.Bean;
 import org.androidannotations.annotations.EBean;
 import org.androidannotations.annotations.NonConfigurationInstance;
@@ -28,12 +31,10 @@
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.type.TypeMirror;
-
-import static com.sun.codemodel.JExpr._null;
-import static com.sun.codemodel.JExpr.ref;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JFieldRef;
+import com.sun.codemodel.JInvocation;
 
 public class BeanHandler extends BaseAnnotationHandler<EComponentHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/CheckedChangeHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/CheckedChangeHandler.java
index 06f48bd..6def887 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/CheckedChangeHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/CheckedChangeHandler.java
@@ -15,13 +15,7 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
-
-import org.androidannotations.annotations.CheckedChange;
-import org.androidannotations.helper.CanonicalNameConstants;
-import org.androidannotations.holder.EComponentWithViewSupportHolder;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
+import java.util.List;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
@@ -30,7 +24,19 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 
-import java.util.List;
+import org.androidannotations.annotations.CheckedChange;
+import org.androidannotations.helper.CanonicalNameConstants;
+import org.androidannotations.holder.EComponentWithViewSupportHolder;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JVar;
 
 public class CheckedChangeHandler extends AbstractListenerHandler {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EActivityHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EActivityHandler.java
index 1297141..c4b91d5 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EActivityHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EActivityHandler.java
@@ -15,9 +15,12 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JFieldRef;
-import com.sun.codemodel.JMethod;
+import java.util.List;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.helper.AnnotationHelper;
 import org.androidannotations.helper.IdValidatorHelper;
@@ -27,10 +30,9 @@
 import org.androidannotations.process.ProcessHolder;
 import org.androidannotations.rclass.IRClass;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-import java.util.List;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JFieldRef;
+import com.sun.codemodel.JMethod;
 
 public class EActivityHandler extends BaseGeneratingAnnotationHandler<EActivityHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EApplicationHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EApplicationHandler.java
index 3a72428..c1fc7cc 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EApplicationHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EApplicationHandler.java
@@ -15,16 +15,16 @@
  */
 package org.androidannotations.handler;
 
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EApplication;
 import org.androidannotations.holder.EApplicationHolder;
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-
 public class EApplicationHandler extends BaseGeneratingAnnotationHandler<EApplicationHolder> {
 
 	public EApplicationHandler(ProcessingEnvironment processingEnvironment) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EBeanHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EBeanHandler.java
index 898992c..45b3747 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EBeanHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EBeanHandler.java
@@ -15,16 +15,16 @@
  */
 package org.androidannotations.handler;
 
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EBean;
 import org.androidannotations.holder.EBeanHolder;
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-
 public class EBeanHandler extends BaseGeneratingAnnotationHandler<EBeanHolder> {
 
 	public EBeanHandler(ProcessingEnvironment processingEnvironment) {
@@ -54,7 +54,7 @@ public void process(Element element, EBeanHolder holder) {
 		holder.createFactoryMethod(hasSingletonScope);
 
 		if (!hasSingletonScope) {
-            holder.invokeInitInConstructor();
+			holder.invokeInitInConstructor();
 			holder.createRebindMethod();
 		}
 	}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EFragmentHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EFragmentHandler.java
index b47b458..40424d6 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EFragmentHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EFragmentHandler.java
@@ -15,10 +15,13 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JFieldRef;
-import com.sun.codemodel.JFieldVar;
-import com.sun.codemodel.JVar;
+import static com.sun.codemodel.JExpr.FALSE;
+import static com.sun.codemodel.JExpr._null;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EFragment;
 import org.androidannotations.helper.IdAnnotationHelper;
 import org.androidannotations.helper.IdValidatorHelper;
@@ -28,12 +31,10 @@
 import org.androidannotations.process.ProcessHolder;
 import org.androidannotations.rclass.IRClass;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-
-import static com.sun.codemodel.JExpr.FALSE;
-import static com.sun.codemodel.JExpr._null;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JFieldRef;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JVar;
 
 public class EFragmentHandler extends BaseGeneratingAnnotationHandler<EFragmentHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EIntentServiceHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EIntentServiceHandler.java
index 96eed57..e94f728 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EIntentServiceHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EIntentServiceHandler.java
@@ -28,29 +28,29 @@
 
 public class EIntentServiceHandler extends BaseAnnotationHandler<EIntentServiceHolder> implements GeneratingAnnotationHandler<EIntentServiceHolder> {
 
-    public EIntentServiceHandler(ProcessingEnvironment processingEnvironment) {
-        super(EIntentService.class, processingEnvironment);
-    }
+	public EIntentServiceHandler(ProcessingEnvironment processingEnvironment) {
+		super(EIntentService.class, processingEnvironment);
+	}
 
-    @Override
-    public EIntentServiceHolder createGeneratedClassHolder(ProcessHolder processHolder, TypeElement annotatedElement) throws Exception {
-        return new EIntentServiceHolder(processHolder, annotatedElement, androidManifest);
-    }
+	@Override
+	public EIntentServiceHolder createGeneratedClassHolder(ProcessHolder processHolder, TypeElement annotatedElement) throws Exception {
+		return new EIntentServiceHolder(processHolder, annotatedElement, androidManifest);
+	}
 
-    @Override
-    public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
-        validatorHelper.extendsIntentService(element, valid);
+	@Override
+	public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
+		validatorHelper.extendsIntentService(element, valid);
 
-        validatorHelper.hasNotMultipleAnnotatedMethodWithSameName(element, valid, ServiceAction.class);
+		validatorHelper.hasNotMultipleAnnotatedMethodWithSameName(element, valid, ServiceAction.class);
 
-        validatorHelper.isNotFinal(element, valid);
+		validatorHelper.isNotFinal(element, valid);
 
-        validatorHelper.componentRegistered(element, androidManifest, valid);
-    }
+		validatorHelper.componentRegistered(element, androidManifest, valid);
+	}
 
-    @Override
-    public void process(Element element, EIntentServiceHolder holder) {
+	@Override
+	public void process(Element element, EIntentServiceHolder holder) {
 		/* Do nothing */
-    }
+	}
 
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EProviderHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EProviderHandler.java
index a0d9504..b6a821f 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EProviderHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EProviderHandler.java
@@ -15,16 +15,16 @@
  */
 package org.androidannotations.handler;
 
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EProvider;
 import org.androidannotations.holder.EProviderHolder;
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-
 public class EProviderHandler extends BaseGeneratingAnnotationHandler<EProviderHolder> {
 
 	public EProviderHandler(ProcessingEnvironment processingEnvironment) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EReceiverHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EReceiverHandler.java
index ee838cf..43ba8c3 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EReceiverHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EReceiverHandler.java
@@ -15,16 +15,16 @@
  */
 package org.androidannotations.handler;
 
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EReceiver;
 import org.androidannotations.holder.EReceiverHolder;
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-
 public class EReceiverHandler extends BaseGeneratingAnnotationHandler<EReceiverHolder> {
 
 	public EReceiverHandler(ProcessingEnvironment processingEnvironment) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EServiceHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EServiceHandler.java
index a350305..6f7011d 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EServiceHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EServiceHandler.java
@@ -15,16 +15,16 @@
  */
 package org.androidannotations.handler;
 
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EService;
 import org.androidannotations.holder.EServiceHolder;
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-
 public class EServiceHandler extends BaseGeneratingAnnotationHandler<EServiceHolder> {
 
 	public EServiceHandler(ProcessingEnvironment processingEnvironment) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewGroupHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewGroupHandler.java
index 5e42377..7f7cdd6 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewGroupHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewGroupHandler.java
@@ -15,8 +15,10 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JFieldRef;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EViewGroup;
 import org.androidannotations.helper.AndroidManifest;
 import org.androidannotations.helper.IdAnnotationHelper;
@@ -28,9 +30,8 @@
 import org.androidannotations.process.ProcessHolder;
 import org.androidannotations.rclass.IRClass;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JFieldRef;
 
 public class EViewGroupHandler extends BaseGeneratingAnnotationHandler<EViewGroupHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewHandler.java
index 46d1dd8..befd3b7 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EViewHandler.java
@@ -15,16 +15,16 @@
  */
 package org.androidannotations.handler;
 
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.annotations.EView;
 import org.androidannotations.holder.EViewHolder;
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-
 public class EViewHandler extends BaseGeneratingAnnotationHandler<EViewHolder> {
 
 	public EViewHandler(ProcessingEnvironment processingEnvironment) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EditorActionHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EditorActionHandler.java
index b19c89e..c4443f5 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EditorActionHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/EditorActionHandler.java
@@ -15,13 +15,7 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
-
-import org.androidannotations.annotations.EditorAction;
-import org.androidannotations.helper.CanonicalNameConstants;
-import org.androidannotations.holder.EComponentWithViewSupportHolder;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
+import java.util.List;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
@@ -30,7 +24,20 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 
-import java.util.List;
+import org.androidannotations.annotations.EditorAction;
+import org.androidannotations.helper.CanonicalNameConstants;
+import org.androidannotations.holder.EComponentWithViewSupportHolder;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JVar;
 
 public class EditorActionHandler extends AbstractListenerHandler {
 
@@ -79,7 +86,7 @@ protected void processParameters(EComponentWithViewSupportHolder holder, JMethod
 				call.arg(textView);
 			} else if (paramClassQualifiedName.equals(CanonicalNameConstants.INTEGER) || paramClassQualifiedName.equals(codeModel().INT.fullName())) {
 				call.arg(actionId);
-			} else if(paramClassQualifiedName.equals(CanonicalNameConstants.KEY_EVENT)) {
+			} else if (paramClassQualifiedName.equals(CanonicalNameConstants.KEY_EVENT)) {
 				call.arg(event);
 			}
 		}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ExtraHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ExtraHandler.java
index a115e01..6b90263 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ExtraHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ExtraHandler.java
@@ -15,14 +15,16 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JExpression;
-import com.sun.codemodel.JFieldRef;
-import com.sun.codemodel.JFieldVar;
-import com.sun.codemodel.JMethod;
-import com.sun.codemodel.JVar;
+import static com.sun.codemodel.JExpr.invoke;
+import static com.sun.codemodel.JExpr.lit;
+import static com.sun.codemodel.JMod.FINAL;
+import static com.sun.codemodel.JMod.PUBLIC;
+import static com.sun.codemodel.JMod.STATIC;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.type.TypeMirror;
+
 import org.androidannotations.annotations.Extra;
 import org.androidannotations.helper.APTCodeModelHelper;
 import org.androidannotations.helper.AnnotationHelper;
@@ -33,15 +35,14 @@
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.type.TypeMirror;
-
-import static com.sun.codemodel.JExpr.invoke;
-import static com.sun.codemodel.JExpr.lit;
-import static com.sun.codemodel.JMod.FINAL;
-import static com.sun.codemodel.JMod.PUBLIC;
-import static com.sun.codemodel.JMod.STATIC;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldRef;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JVar;
 
 public class ExtraHandler extends BaseAnnotationHandler<HasExtras> {
 
@@ -77,17 +78,18 @@ public void process(Element element, HasExtras holder) {
 		JFieldVar extraKeyStaticField = createStaticExtraField(holder, extraKey, fieldName);
 		injectExtraInComponent(element, holder, extraKeyStaticField, fieldName);
 
-		if (holder instanceof HasIntentBuilder)
+		if (holder instanceof HasIntentBuilder) {
 			createIntentInjectionMethod(element, (HasIntentBuilder) holder, extraKeyStaticField, fieldName);
+		}
 	}
 
 	private JFieldVar createStaticExtraField(HasExtras holder, String extraKey, String fieldName) {
-        String staticFieldName = CaseHelper.camelCaseToUpperSnakeCase(null, fieldName, "Extra");
-        JFieldVar staticExtraField = holder.getGeneratedClass().fields().get(staticFieldName);
-        if (staticExtraField == null) {
-            staticExtraField = holder.getGeneratedClass().field(PUBLIC | STATIC | FINAL, classes().STRING, staticFieldName, lit(extraKey));
-        }
-        return staticExtraField;
+		String staticFieldName = CaseHelper.camelCaseToUpperSnakeCase(null, fieldName, "Extra");
+		JFieldVar staticExtraField = holder.getGeneratedClass().fields().get(staticFieldName);
+		if (staticExtraField == null) {
+			staticExtraField = holder.getGeneratedClass().field(PUBLIC | STATIC | FINAL, classes().STRING, staticFieldName, lit(extraKey));
+		}
+		return staticExtraField;
 	}
 
 	private void injectExtraInComponent(Element element, HasExtras hasExtras, JFieldVar extraKeyStaticField, String fieldName) {
@@ -108,6 +110,6 @@ private void injectExtraInComponent(Element element, HasExtras hasExtras, JField
 	}
 
 	private void createIntentInjectionMethod(Element element, HasIntentBuilder holder, JFieldVar extraKeyStaticField, String fieldName) {
-        holder.getIntentBuilder().getPutExtraMethod(element.asType(), fieldName, extraKeyStaticField);
+		holder.getIntentBuilder().getPutExtraMethod(element.asType(), fieldName, extraKeyStaticField);
 	}
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FocusChangeHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FocusChangeHandler.java
index acaeee9..5de5301 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FocusChangeHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FocusChangeHandler.java
@@ -15,10 +15,7 @@
  */
 package org.androidannotations.handler;
 
-import org.androidannotations.annotations.FocusChange;
-import org.androidannotations.helper.CanonicalNameConstants;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
+import java.util.List;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
@@ -26,9 +23,12 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
-import java.util.List;
 
+import org.androidannotations.annotations.FocusChange;
+import org.androidannotations.helper.CanonicalNameConstants;
 import org.androidannotations.holder.EComponentWithViewSupportHolder;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
 
 import com.sun.codemodel.JBlock;
 import com.sun.codemodel.JClass;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FragmentArgHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FragmentArgHandler.java
index a802206..53ac3e9 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FragmentArgHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/FragmentArgHandler.java
@@ -15,7 +15,16 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
+import static com.sun.codemodel.JExpr._this;
+import static com.sun.codemodel.JExpr.lit;
+import static com.sun.codemodel.JMod.FINAL;
+import static com.sun.codemodel.JMod.PUBLIC;
+import static com.sun.codemodel.JMod.STATIC;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.type.TypeMirror;
+
 import org.androidannotations.annotations.FragmentArg;
 import org.androidannotations.helper.APTCodeModelHelper;
 import org.androidannotations.helper.AnnotationHelper;
@@ -25,13 +34,15 @@
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.type.TypeMirror;
-
-import static com.sun.codemodel.JExpr._this;
-import static com.sun.codemodel.JExpr.lit;
-import static com.sun.codemodel.JMod.*;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldRef;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JVar;
 
 public class FragmentArgHandler extends BaseAnnotationHandler<EFragmentHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/IgnoredWhenDetachedHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/IgnoredWhenDetachedHandler.java
index ede6542..597cea5 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/IgnoredWhenDetachedHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/IgnoredWhenDetachedHandler.java
@@ -15,20 +15,21 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JMethod;
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr.invoke;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+
 import org.androidannotations.annotations.IgnoredWhenDetached;
 import org.androidannotations.helper.APTCodeModelHelper;
-import org.androidannotations.holder.EComponentHolder;
 import org.androidannotations.holder.EFragmentHolder;
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-
-import static com.sun.codemodel.JExpr.*;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JMethod;
 
 public class IgnoredWhenDetachedHandler extends BaseAnnotationHandler<EFragmentHolder> {
 
@@ -52,9 +53,6 @@ public void process(Element element, EFragmentHolder holder) throws Exception {
 		JMethod delegatingMethod = codeModelHelper.overrideAnnotatedMethod(executableElement, holder);
 		JBlock previousMethodBody = codeModelHelper.removeBody(delegatingMethod);
 
-
-		delegatingMethod.body()
-				._if(invoke(holder.getGeneratedClass().staticRef("this"), "getActivity").ne(_null()))
-				._then().add(previousMethodBody);
+		delegatingMethod.body()._if(invoke(holder.getGeneratedClass().staticRef("this"), "getActivity").ne(_null()))._then().add(previousMethodBody);
 	}
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/InstanceStateHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/InstanceStateHandler.java
index 4f77f45..8109e35 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/InstanceStateHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/InstanceStateHandler.java
@@ -15,13 +15,12 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JExpression;
-import com.sun.codemodel.JFieldRef;
-import com.sun.codemodel.JMethod;
-import com.sun.codemodel.JVar;
+import static com.sun.codemodel.JExpr.ref;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.type.TypeMirror;
+
 import org.androidannotations.annotations.InstanceState;
 import org.androidannotations.helper.APTCodeModelHelper;
 import org.androidannotations.helper.AnnotationHelper;
@@ -30,11 +29,13 @@
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.type.TypeMirror;
-
-import static com.sun.codemodel.JExpr.ref;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldRef;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JVar;
 
 public class InstanceStateHandler extends BaseAnnotationHandler<HasInstanceState> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemLongClickHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemLongClickHandler.java
index 1515eff..6e87e7c 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemLongClickHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemLongClickHandler.java
@@ -15,13 +15,10 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
+import static com.sun.codemodel.JExpr.cast;
+import static com.sun.codemodel.JExpr.invoke;
 
-import org.androidannotations.annotations.ItemLongClick;
-import org.androidannotations.helper.APTCodeModelHelper;
-import org.androidannotations.holder.EComponentWithViewSupportHolder;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
+import java.util.List;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
@@ -30,10 +27,20 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 
-import java.util.List;
+import org.androidannotations.annotations.ItemLongClick;
+import org.androidannotations.helper.APTCodeModelHelper;
+import org.androidannotations.holder.EComponentWithViewSupportHolder;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
 
-import static com.sun.codemodel.JExpr.cast;
-import static com.sun.codemodel.JExpr.invoke;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JVar;
 
 public class ItemLongClickHandler extends AbstractListenerHandler {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemSelectHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemSelectHandler.java
index dcd192f..ba8a305 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemSelectHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ItemSelectHandler.java
@@ -15,12 +15,11 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr.invoke;
+import static com.sun.codemodel.JExpr.lit;
 
-import org.androidannotations.annotations.ItemSelect;
-import org.androidannotations.holder.EComponentWithViewSupportHolder;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
+import java.util.List;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
@@ -29,9 +28,20 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 
-import java.util.List;
+import org.androidannotations.annotations.ItemSelect;
+import org.androidannotations.holder.EComponentWithViewSupportHolder;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
 
-import static com.sun.codemodel.JExpr.*;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JVar;
 
 public class ItemSelectHandler extends AbstractListenerHandler {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/OnActivityResultHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/OnActivityResultHandler.java
index 0dada0f..9c2fcb5 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/OnActivityResultHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/OnActivityResultHandler.java
@@ -15,17 +15,10 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JExpression;
-import com.sun.codemodel.JInvocation;
-import com.sun.codemodel.JOp;
-import com.sun.codemodel.JVar;
-import org.androidannotations.annotations.OnActivityResult;
-import org.androidannotations.helper.CanonicalNameConstants;
-import org.androidannotations.holder.HasOnActivityResult;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr._null;
+
+import java.util.List;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
@@ -33,10 +26,19 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
-import java.util.List;
 
-import static com.sun.codemodel.JExpr._new;
-import static com.sun.codemodel.JExpr._null;
+import org.androidannotations.annotations.OnActivityResult;
+import org.androidannotations.helper.CanonicalNameConstants;
+import org.androidannotations.holder.HasOnActivityResult;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JOp;
+import com.sun.codemodel.JVar;
 
 public class OnActivityResultHandler extends BaseAnnotationHandler<HasOnActivityResult> {
 
@@ -89,16 +91,14 @@ public void process(Element element, HasOnActivityResult holder) throws Exceptio
 			TypeMirror parameterType = parameter.asType();
 			if (parameter.getAnnotation(OnActivityResult.Extra.class) != null) {
 				if (extras == null) {
-					extras = onResultBlock.decl(classes().BUNDLE, "extras_",
-							JOp.cond(intent.ne(_null()).cand(intent.invoke("getExtras").ne(_null())),
-									intent.invoke("getExtras"), _new(classes().BUNDLE)));
+					extras = onResultBlock.decl(classes().BUNDLE, "extras_", JOp.cond(intent.ne(_null()).cand(intent.invoke("getExtras").ne(_null())), intent.invoke("getExtras"), _new(classes().BUNDLE)));
 				}
 				JExpression extraParameter = extraHandler.getExtraValue(parameter, extras, onResultBlock, holder);
 				onResultInvocation.arg(extraParameter);
 			} else if (CanonicalNameConstants.INTENT.equals(parameterType.toString())) {
 				onResultInvocation.arg(intent);
 			} else if (parameterType.getKind().equals(TypeKind.INT) //
-			        || CanonicalNameConstants.INTEGER.equals(parameterType.toString())) {
+					|| CanonicalNameConstants.INTEGER.equals(parameterType.toString())) {
 				onResultInvocation.arg(holder.getOnActivityResultResultCodeParam());
 			}
 		}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/PrefHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/PrefHandler.java
index 86b15f4..8f63a7f 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/PrefHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/PrefHandler.java
@@ -21,7 +21,6 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.type.TypeMirror;
 
-import com.sun.codemodel.JClass;
 import org.androidannotations.annotations.sharedpreferences.Pref;
 import org.androidannotations.annotations.sharedpreferences.SharedPref;
 import org.androidannotations.holder.EComponentHolder;
@@ -30,6 +29,7 @@
 import org.androidannotations.process.IsValid;
 
 import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
 import com.sun.codemodel.JExpr;
 import com.sun.codemodel.JFieldRef;
 
@@ -58,10 +58,10 @@ public void process(Element element, EComponentHolder holder) {
 		String elementTypeName = fieldTypeMirror.toString();
 		int index = elementTypeName.lastIndexOf(".");
 		if (index != -1) {
-			elementTypeName = elementTypeName.substring(index+1);
+			elementTypeName = elementTypeName.substring(index + 1);
 		}
 
-		Set <? extends Element> sharedPrefElements = validatedModel.getRootAnnotatedElements(SharedPref.class.getName());
+		Set<? extends Element> sharedPrefElements = validatedModel.getRootAnnotatedElements(SharedPref.class.getName());
 		for (Element sharedPrefElement : sharedPrefElements) {
 			GeneratedClassHolder sharedPrefHolder = processHolder.getGeneratedClassHolder(sharedPrefElement);
 			String sharedPrefName = sharedPrefHolder.getGeneratedClass().name();
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverActionHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverActionHandler.java
index b94eabd..c772afd 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverActionHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverActionHandler.java
@@ -132,7 +132,8 @@ private void addActionInOnReceive(EReceiverHolder holder, ExecutableElement exec
 				callActionInvocation.arg(intent);
 			} else if (param.getAnnotation(ReceiverAction.Extra.class) != null) {
 				if (extras == null) {
-					extras = callActionBlock.decl(classes().BUNDLE, "extras_", JOp.cond(intent.invoke("getExtras").ne(_null()), intent.invoke("getExtras"), _new(classes().BUNDLE)));
+					extras = callActionBlock.decl(classes().BUNDLE, "extras_", JOp.cond(intent.invoke("getExtras") //
+							.ne(_null()), intent.invoke("getExtras"), _new(classes().BUNDLE)));
 				}
 				callActionInvocation.arg(extraHandler.getExtraValue(param, extras, callActionBlock, holder));
 			}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverHandler.java
index 14fdae0..6430bec 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ReceiverHandler.java
@@ -128,7 +128,8 @@ private JFieldVar createReceiverField(HasReceiverRegistration holder, String rec
 	}
 
 	private void registerAndUnregisterReceiver(HasReceiverRegistration holder, Receiver.RegisterAt registerAt, JFieldVar intentFilterField, JFieldVar receiverField, boolean local) {
-		JBlock registerBlock = null, unregisterBlock = null;
+		JBlock registerBlock = null;
+		JBlock unregisterBlock = null;
 		switch (registerAt) {
 		case OnCreateOnDestroy:
 			registerBlock = holder.getOnCreateAfterSuperBlock();
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHandler.java
new file mode 100644
index 0000000..008fc1d
--- /dev/null
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHandler.java
@@ -0,0 +1,79 @@
+/**
+ * Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed To in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package org.androidannotations.handler;
+
+import static com.sun.codemodel.JExpr.cast;
+import static com.sun.codemodel.JExpr.lit;
+import static com.sun.codemodel.JExpr.ref;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.type.TypeMirror;
+
+import org.androidannotations.annotations.RootContext;
+import org.androidannotations.helper.CanonicalNameConstants;
+import org.androidannotations.holder.EBeanHolder;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JConditional;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JInvocation;
+
+public class RootContextHandler extends BaseAnnotationHandler<EBeanHolder> {
+
+	public RootContextHandler(ProcessingEnvironment processingEnvironment) {
+		super(RootContext.class, processingEnvironment);
+	}
+
+	@Override
+	public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
+		validatorHelper.enclosingElementHasEBeanAnnotation(element, validatedElements, valid);
+
+		validatorHelper.extendsContext(element, valid);
+
+		validatorHelper.isNotPrivate(element, valid);
+	}
+
+	@Override
+	public void process(Element element, EBeanHolder holder) {
+		String fieldName = element.getSimpleName().toString();
+
+		TypeMirror elementType = element.asType();
+		String typeQualifiedName = elementType.toString();
+
+		JBlock body = holder.getInitBody();
+		JExpression contextRef = holder.getContextRef();
+
+		if (CanonicalNameConstants.CONTEXT.equals(typeQualifiedName)) {
+			body.assign(ref(fieldName), contextRef);
+		} else {
+			JClass extendingContextClass = holder.refClass(typeQualifiedName);
+			JConditional cond = body._if(holder.getContextRef()._instanceof(extendingContextClass));
+			cond._then() //
+					.assign(ref(fieldName), cast(extendingContextClass, holder.getContextRef()));
+
+			JInvocation warningInvoke = holder.classes().LOG.staticInvoke("w");
+			warningInvoke.arg(holder.getGeneratedClass().name());
+			JExpression expr = lit("Due to Context class ").plus(holder.getContextRef().invoke("getClass").invoke("getSimpleName")).plus(lit(", the @RootContext " + extendingContextClass.name() + " won't be populated"));
+			warningInvoke.arg(expr);
+			cond._else() //
+					.add(warningInvoke);
+		}
+	}
+}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHanlder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHanlder.java
deleted file mode 100644
index cc94104..0000000
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/RootContextHanlder.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/**
- * Copyright (C) 2010-2014 eBusiness Information, Excilys Group
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed To in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package org.androidannotations.handler;
-
-import static com.sun.codemodel.JExpr.cast;
-import static com.sun.codemodel.JExpr.lit;
-import static com.sun.codemodel.JExpr.ref;
-
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.type.TypeMirror;
-
-import org.androidannotations.annotations.RootContext;
-import org.androidannotations.helper.CanonicalNameConstants;
-import org.androidannotations.holder.EBeanHolder;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
-
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JConditional;
-import com.sun.codemodel.JExpression;
-import com.sun.codemodel.JInvocation;
-
-public class RootContextHanlder extends BaseAnnotationHandler<EBeanHolder> {
-
-	public RootContextHanlder(ProcessingEnvironment processingEnvironment) {
-		super(RootContext.class, processingEnvironment);
-	}
-
-	@Override
-	public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
-		validatorHelper.enclosingElementHasEBeanAnnotation(element, validatedElements, valid);
-
-		validatorHelper.extendsContext(element, valid);
-
-		validatorHelper.isNotPrivate(element, valid);
-	}
-
-	@Override
-	public void process(Element element, EBeanHolder holder) {
-		String fieldName = element.getSimpleName().toString();
-
-		TypeMirror elementType = element.asType();
-		String typeQualifiedName = elementType.toString();
-
-		JBlock body = holder.getInitBody();
-		JExpression contextRef = holder.getContextRef();
-
-		if (CanonicalNameConstants.CONTEXT.equals(typeQualifiedName)) {
-			body.assign(ref(fieldName), contextRef);
-		} else {
-            JClass extendingContextClass = holder.refClass(typeQualifiedName);
-            JConditional cond = body._if(holder.getContextRef()._instanceof(extendingContextClass));
-            cond._then() //
-                    .assign(ref(fieldName), cast(extendingContextClass, holder.getContextRef()));
-
-            JInvocation warningInvoke = holder.classes().LOG.staticInvoke("w");
-            warningInvoke.arg(holder.getGeneratedClass().name());
-            JExpression expr = lit("Due to Context class ").plus(holder.getContextRef().invoke("getClass").invoke("getSimpleName")).plus(lit(", the @RootContext " + extendingContextClass.name() + " won't be populated"));
-            warningInvoke.arg(expr);
-            cond._else() //
-                    .add(warningInvoke);
-		}
-	}
-}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ServiceActionHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ServiceActionHandler.java
index ee3c3f4..6b87bc5 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ServiceActionHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ServiceActionHandler.java
@@ -15,7 +15,19 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr.lit;
+import static com.sun.codemodel.JMod.FINAL;
+import static com.sun.codemodel.JMod.PUBLIC;
+import static com.sun.codemodel.JMod.STATIC;
+
+import java.util.List;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.VariableElement;
+
 import org.androidannotations.annotations.ServiceAction;
 import org.androidannotations.helper.APTCodeModelHelper;
 import org.androidannotations.helper.AnnotationHelper;
@@ -25,120 +37,119 @@
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.VariableElement;
-import java.util.List;
-
-import static com.sun.codemodel.JExpr._null;
-import static com.sun.codemodel.JExpr.lit;
-import static com.sun.codemodel.JMod.*;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JVar;
 
 public class ServiceActionHandler extends BaseAnnotationHandler<EIntentServiceHolder> {
 
-    private final APTCodeModelHelper codeModelHelper = new APTCodeModelHelper();
-    private AnnotationHelper annotationHelper;
-
-    public ServiceActionHandler(ProcessingEnvironment processingEnvironment) {
-        super(ServiceAction.class, processingEnvironment);
-        annotationHelper = new AnnotationHelper(processingEnvironment);
-    }
-
-    @Override
-    protected void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
-
-        validatorHelper.enclosingElementHasEIntentService(element, validatedElements, valid);
-
-        validatorHelper.returnTypeIsVoid((ExecutableElement) element, valid);
-
-        validatorHelper.isNotPrivate(element, valid);
-    }
-
-    @Override
-    public void process(Element element, EIntentServiceHolder holder) throws Exception {
-
-        ExecutableElement executableElement = (ExecutableElement) element;
-        String methodName = element.getSimpleName().toString();
-
-        ServiceAction annotation = element.getAnnotation(ServiceAction.class);
-        String extraKey = annotation.value();
-        if (extraKey.isEmpty()) {
-            extraKey = methodName;
-        }
-
-        JFieldVar actionKeyField = createStaticActionField(holder, extraKey, methodName);
-        addActionInOnHandleIntent(holder, executableElement, methodName, actionKeyField);
-        addActionToIntentBuilder(holder, executableElement, methodName, actionKeyField);
-    }
-
-    private JFieldVar createStaticActionField(EIntentServiceHolder holder, String extraKey, String methodName) {
-        String staticFieldName = CaseHelper.camelCaseToUpperSnakeCase("action", methodName, null);
-        return holder.getGeneratedClass().field(PUBLIC | STATIC | FINAL, classes().STRING, staticFieldName, lit(extraKey));
-    }
-
-    private void addActionInOnHandleIntent(EIntentServiceHolder holder, ExecutableElement executableElement, String methodName, JFieldVar actionKeyField) {
-	    JMethod onHandleIntentMethod = holder.getOnHandleIntentMethod();
-
-        // If action match, call the method
-        JInvocation actionCondition = actionKeyField.invoke("equals").arg(holder.getOnHandleIntentIntentAction());
-        JBlock callActionBlock = holder.getOnHandleIntentBody()._if(actionCondition)._then();
-        JInvocation callActionInvocation = JExpr._super().invoke(methodName);
-
-        // For each method params, we get back value from extras and put it
-        // in super calls
-        List<? extends VariableElement> methodParameters = executableElement.getParameters();
-        if (methodParameters.size() > 0) {
-            // Extras
-	        JVar intent = holder.getOnHandleIntentIntent();
-            JVar extras = callActionBlock.decl(classes().BUNDLE, "extras");
-            extras.init(intent.invoke("getExtras"));
-            callActionBlock = callActionBlock._if(extras.ne(_null()))._then();
-
-            // Extras params
-            for (VariableElement param : methodParameters) {
-                String paramName = param.getSimpleName().toString();
-                String extraParamName = paramName + "Extra";
-                JFieldVar paramVar = getStaticExtraField(holder, paramName);
-                JClass extraParamClass = codeModelHelper.typeMirrorToJClass(param.asType(), holder);
-
-                BundleHelper bundleHelper = new BundleHelper(annotationHelper, param.asType());
-                JExpression getExtraExpression = bundleHelper.getExpressionToRestoreFromIntentOrBundle(extraParamClass, intent, extras, paramVar, onHandleIntentMethod);
-
-                JVar extraField = callActionBlock.decl(extraParamClass, extraParamName, getExtraExpression);
-                callActionInvocation.arg(extraField);
-            }
-        }
-        callActionBlock.add(callActionInvocation);
-        callActionBlock._return();
-    }
-
-    private void addActionToIntentBuilder(EIntentServiceHolder holder, ExecutableElement executableElement, String methodName, JFieldVar actionKeyField) {
-        JMethod method = holder.getIntentBuilderClass().method(PUBLIC, holder.getIntentBuilderClass(), methodName);
-        JBlock body = method.body();
-
-        // setAction
-        body.invoke("action").arg(actionKeyField);
-
-        for (VariableElement param : executableElement.getParameters()) {
-            String paramName = param.getSimpleName().toString();
-            JClass parameterClass = codeModelHelper.typeMirrorToJClass(param.asType(), holder);
-
-            JFieldVar paramVar = getStaticExtraField(holder, paramName);
-            JVar methodParam = method.param(parameterClass, paramName);
-
-            JInvocation putExtraInvocation = holder.getIntentBuilder().getSuperPutExtraInvocation(param.asType(), methodParam, paramVar);
-            body.add(putExtraInvocation);
-        }
-        body._return(JExpr._this());
-    }
-
-    private JFieldVar getStaticExtraField(EIntentServiceHolder holder, String extraName) {
-        String staticFieldName = CaseHelper.camelCaseToUpperSnakeCase(null, extraName, "Extra");
-        JFieldVar staticExtraField = holder.getGeneratedClass().fields().get(staticFieldName);
-        if (staticExtraField == null) {
-            staticExtraField = holder.getGeneratedClass().field(PUBLIC | STATIC | FINAL, classes().STRING, staticFieldName, lit(extraName));
-        }
-        return staticExtraField;
-    }
+	private final APTCodeModelHelper codeModelHelper = new APTCodeModelHelper();
+	private AnnotationHelper annotationHelper;
+
+	public ServiceActionHandler(ProcessingEnvironment processingEnvironment) {
+		super(ServiceAction.class, processingEnvironment);
+		annotationHelper = new AnnotationHelper(processingEnvironment);
+	}
+
+	@Override
+	protected void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
+
+		validatorHelper.enclosingElementHasEIntentService(element, validatedElements, valid);
+
+		validatorHelper.returnTypeIsVoid((ExecutableElement) element, valid);
+
+		validatorHelper.isNotPrivate(element, valid);
+	}
+
+	@Override
+	public void process(Element element, EIntentServiceHolder holder) throws Exception {
+
+		ExecutableElement executableElement = (ExecutableElement) element;
+		String methodName = element.getSimpleName().toString();
+
+		ServiceAction annotation = element.getAnnotation(ServiceAction.class);
+		String extraKey = annotation.value();
+		if (extraKey.isEmpty()) {
+			extraKey = methodName;
+		}
+
+		JFieldVar actionKeyField = createStaticActionField(holder, extraKey, methodName);
+		addActionInOnHandleIntent(holder, executableElement, methodName, actionKeyField);
+		addActionToIntentBuilder(holder, executableElement, methodName, actionKeyField);
+	}
+
+	private JFieldVar createStaticActionField(EIntentServiceHolder holder, String extraKey, String methodName) {
+		String staticFieldName = CaseHelper.camelCaseToUpperSnakeCase("action", methodName, null);
+		return holder.getGeneratedClass().field(PUBLIC | STATIC | FINAL, classes().STRING, staticFieldName, lit(extraKey));
+	}
+
+	private void addActionInOnHandleIntent(EIntentServiceHolder holder, ExecutableElement executableElement, String methodName, JFieldVar actionKeyField) {
+		JMethod onHandleIntentMethod = holder.getOnHandleIntentMethod();
+
+		// If action match, call the method
+		JInvocation actionCondition = actionKeyField.invoke("equals").arg(holder.getOnHandleIntentIntentAction());
+		JBlock callActionBlock = holder.getOnHandleIntentBody()._if(actionCondition)._then();
+		JInvocation callActionInvocation = JExpr._super().invoke(methodName);
+
+		// For each method params, we get back value from extras and put it
+		// in super calls
+		List<? extends VariableElement> methodParameters = executableElement.getParameters();
+		if (methodParameters.size() > 0) {
+			// Extras
+			JVar intent = holder.getOnHandleIntentIntent();
+			JVar extras = callActionBlock.decl(classes().BUNDLE, "extras");
+			extras.init(intent.invoke("getExtras"));
+			callActionBlock = callActionBlock._if(extras.ne(_null()))._then();
+
+			// Extras params
+			for (VariableElement param : methodParameters) {
+				String paramName = param.getSimpleName().toString();
+				String extraParamName = paramName + "Extra";
+				JFieldVar paramVar = getStaticExtraField(holder, paramName);
+				JClass extraParamClass = codeModelHelper.typeMirrorToJClass(param.asType(), holder);
+
+				BundleHelper bundleHelper = new BundleHelper(annotationHelper, param.asType());
+				JExpression getExtraExpression = bundleHelper.getExpressionToRestoreFromIntentOrBundle(extraParamClass, intent, extras, paramVar, onHandleIntentMethod);
+
+				JVar extraField = callActionBlock.decl(extraParamClass, extraParamName, getExtraExpression);
+				callActionInvocation.arg(extraField);
+			}
+		}
+		callActionBlock.add(callActionInvocation);
+		callActionBlock._return();
+	}
+
+	private void addActionToIntentBuilder(EIntentServiceHolder holder, ExecutableElement executableElement, String methodName, JFieldVar actionKeyField) {
+		JMethod method = holder.getIntentBuilderClass().method(PUBLIC, holder.getIntentBuilderClass(), methodName);
+		JBlock body = method.body();
+
+		// setAction
+		body.invoke("action").arg(actionKeyField);
+
+		for (VariableElement param : executableElement.getParameters()) {
+			String paramName = param.getSimpleName().toString();
+			JClass parameterClass = codeModelHelper.typeMirrorToJClass(param.asType(), holder);
+
+			JFieldVar paramVar = getStaticExtraField(holder, paramName);
+			JVar methodParam = method.param(parameterClass, paramName);
+
+			JMethod putExtraMethod = holder.getIntentBuilder().getPutExtraMethod(param.asType(), paramName, paramVar);
+			body.invoke(putExtraMethod).arg(methodParam);
+		}
+		body._return(JExpr._this());
+	}
+
+	private JFieldVar getStaticExtraField(EIntentServiceHolder holder, String extraName) {
+		String staticFieldName = CaseHelper.camelCaseToUpperSnakeCase(null, extraName, "Extra");
+		JFieldVar staticExtraField = holder.getGeneratedClass().fields().get(staticFieldName);
+		if (staticExtraField == null) {
+			staticExtraField = holder.getGeneratedClass().field(PUBLIC | STATIC | FINAL, classes().STRING, staticFieldName, lit(extraName));
+		}
+		return staticExtraField;
+	}
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SharedPrefHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SharedPrefHandler.java
index 17204d5..090b4e4 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SharedPrefHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SharedPrefHandler.java
@@ -99,7 +99,7 @@
 			put("boolean", new DefaultPrefInfo<Boolean>(DefaultBoolean.class, BooleanPrefField.class, IRClass.Res.BOOL, false, "booleanField"));
 			put("float", new DefaultPrefInfo<Float>(DefaultFloat.class, FloatPrefField.class, IRClass.Res.INTEGER, 0f, "floatField"));
 			put("int", new DefaultPrefInfo<Integer>(DefaultInt.class, IntPrefField.class, IRClass.Res.INTEGER, 0, "intField"));
-			put("long", new DefaultPrefInfo<Long>(DefaultLong.class, LongPrefField.class, IRClass.Res.INTEGER, 0l, "longField"));
+			put("long", new DefaultPrefInfo<Long>(DefaultLong.class, LongPrefField.class, IRClass.Res.INTEGER, 0L, "longField"));
 			put(CanonicalNameConstants.STRING, new DefaultPrefInfo<String>(DefaultString.class, StringPrefField.class, IRClass.Res.STRING, "", "stringField"));
 			put(CanonicalNameConstants.STRING_SET, new DefaultPrefInfo<Set<String>>(DefaultStringSet.class, StringSetPrefField.class, null, null, "stringSetField"));
 		}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeBackgroundHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeBackgroundHandler.java
index 6efc06a..dc542e3 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeBackgroundHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeBackgroundHandler.java
@@ -15,21 +15,21 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JInvocation;
-import com.sun.codemodel.JMethod;
+import static com.sun.codemodel.JExpr.lit;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
 
 import org.androidannotations.annotations.SupposeBackground;
 import org.androidannotations.api.BackgroundExecutor;
 import org.androidannotations.helper.APTCodeModelHelper;
 import org.androidannotations.holder.EComponentHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-
-import static com.sun.codemodel.JExpr.lit;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
 
 public class SupposeBackgroundHandler extends SupposeThreadHandler {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeUiThreadHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeUiThreadHandler.java
index eda0cfe..9851700 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeUiThreadHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/SupposeUiThreadHandler.java
@@ -15,18 +15,18 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JMethod;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
 
 import org.androidannotations.annotations.SupposeUiThread;
 import org.androidannotations.api.BackgroundExecutor;
 import org.androidannotations.helper.APTCodeModelHelper;
 import org.androidannotations.holder.EComponentHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JMethod;
 
 public class SupposeUiThreadHandler extends SupposeThreadHandler {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TouchHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TouchHandler.java
index 42f9755..6d33883 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TouchHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TouchHandler.java
@@ -15,12 +15,7 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
-import org.androidannotations.annotations.Touch;
-import org.androidannotations.helper.CanonicalNameConstants;
-import org.androidannotations.holder.EComponentWithViewSupportHolder;
-import org.androidannotations.model.AnnotationElements;
-import org.androidannotations.process.IsValid;
+import java.util.List;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
@@ -28,7 +23,21 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
-import java.util.List;
+
+import org.androidannotations.annotations.Touch;
+import org.androidannotations.helper.CanonicalNameConstants;
+import org.androidannotations.holder.EComponentWithViewSupportHolder;
+import org.androidannotations.model.AnnotationElements;
+import org.androidannotations.process.IsValid;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JVar;
 
 public class TouchHandler extends AbstractListenerHandler {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TraceHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TraceHandler.java
index 6dd7695..8d5f758 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TraceHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/TraceHandler.java
@@ -83,7 +83,7 @@ public void process(Element element, EComponentHolder holder) throws Exception {
 		JConditional ifStatement = methodBody._if(isLoggableInvocation);
 
 		JInvocation currentTimeInvoke = classes().SYSTEM.staticInvoke("currentTimeMillis");
-		JBlock _thenBody = ifStatement._then();
+		JBlock thenBody = ifStatement._then();
 
 		// Log In
 		String logMethodName = logMethodNameFromLevel(level);
@@ -91,19 +91,19 @@ public void process(Element element, EComponentHolder holder) throws Exception {
 		logEnterInvoke.arg(tag);
 
 		logEnterInvoke.arg(getEnterMessage(method, executableElement));
-		_thenBody.add(logEnterInvoke);
-		JVar startDeclaration = _thenBody.decl(codeModel().LONG, "start", currentTimeInvoke);
+		thenBody.add(logEnterInvoke);
+		JVar startDeclaration = thenBody.decl(codeModel().LONG, "start", currentTimeInvoke);
 
 		JTryBlock tryBlock;
 
 		JVar result = null;
 		if (method.type().fullName().equals("void")) {
-			tryBlock = _thenBody._try();
+			tryBlock = thenBody._try();
 			tryBlock.body().add(previousMethodBody);
 		} else {
 			JInvocation superCall = codeModelHelper.getSuperCall(holder, method);
-			result = _thenBody.decl(refClass(Object.class), "result", JExpr._null());
-			tryBlock = _thenBody._try();
+			result = thenBody.decl(refClass(Object.class), "result", JExpr._null());
+			tryBlock = thenBody._try();
 			tryBlock.body().assign(result, superCall);
 			tryBlock.body()._return(JExpr.cast(boxify(method.type()), result));
 		}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/UiThreadHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/UiThreadHandler.java
index bc47ec8..4db3a79 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/UiThreadHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/UiThreadHandler.java
@@ -15,17 +15,25 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.*;
-import org.androidannotations.annotations.UiThread;
-import org.androidannotations.helper.APTCodeModelHelper;
-import org.androidannotations.holder.EComponentHolder;
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr.lit;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 
-import static com.sun.codemodel.JExpr._new;
-import static com.sun.codemodel.JExpr.lit;
+import org.androidannotations.annotations.UiThread;
+import org.androidannotations.helper.APTCodeModelHelper;
+import org.androidannotations.holder.EComponentHolder;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JClassAlreadyExistsException;
+import com.sun.codemodel.JConditional;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JOp;
 
 public class UiThreadHandler extends AbstractRunnableHandler {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewByIdHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewByIdHandler.java
index 3b78a64..20dfccc 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewByIdHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewByIdHandler.java
@@ -15,8 +15,12 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JFieldRef;
+import static com.sun.codemodel.JExpr.ref;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.type.TypeMirror;
+
 import org.androidannotations.annotations.ViewById;
 import org.androidannotations.helper.AndroidManifest;
 import org.androidannotations.helper.IdAnnotationHelper;
@@ -27,11 +31,8 @@
 import org.androidannotations.process.IsValid;
 import org.androidannotations.rclass.IRClass;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.type.TypeMirror;
-
-import static com.sun.codemodel.JExpr.ref;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JFieldRef;
 
 public class ViewByIdHandler extends BaseAnnotationHandler<EComponentWithViewSupportHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewsByIdHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewsByIdHandler.java
index 153c31d..5ce740a 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewsByIdHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/ViewsByIdHandler.java
@@ -15,10 +15,23 @@
  */
 package org.androidannotations.handler;
 
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JFieldRef;
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr.ref;
+
+import java.util.List;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeMirror;
+
 import org.androidannotations.annotations.ViewsById;
-import org.androidannotations.helper.*;
+import org.androidannotations.helper.APTCodeModelHelper;
+import org.androidannotations.helper.AndroidManifest;
+import org.androidannotations.helper.CanonicalNameConstants;
+import org.androidannotations.helper.IdAnnotationHelper;
+import org.androidannotations.helper.IdValidatorHelper;
 import org.androidannotations.holder.EComponentWithViewSupportHolder;
 import org.androidannotations.holder.FoundViewHolder;
 import org.androidannotations.model.AndroidSystemServices;
@@ -26,15 +39,8 @@
 import org.androidannotations.process.IsValid;
 import org.androidannotations.rclass.IRClass;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.TypeMirror;
-import java.util.List;
-
-import static com.sun.codemodel.JExpr._new;
-import static com.sun.codemodel.JExpr.ref;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JFieldRef;
 
 public class ViewsByIdHandler extends BaseAnnotationHandler<EComponentWithViewSupportHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/WakeLockHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/WakeLockHandler.java
index 8ff81c2..009c2d2 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/WakeLockHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/WakeLockHandler.java
@@ -92,8 +92,8 @@ public void process(Element element, EComponentHolder holder) {
 		tryBlock.body().add(previousMethodBody);
 
 		JBlock finallyBlock = tryBlock._finally();
-		JConditional _if = finallyBlock._if(wakeLock.ne(JExpr._null()));
-		_if._then().add(wakeLock.invoke("release"));
+		JConditional ifStatement = finallyBlock._if(wakeLock.ne(JExpr._null()));
+		ifStatement._then().add(wakeLock.invoke("release"));
 	}
 
 	private String extractTag(Element element) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/DeleteHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/DeleteHandler.java
index b0bb614..7914ff7 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/DeleteHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/DeleteHandler.java
@@ -33,10 +33,10 @@ public DeleteHandler(ProcessingEnvironment processingEnvironment) {
 	public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
 		super.validate(element, validatedElements, valid);
 
-        validatorHelper.doesNotReturnPrimitive((ExecutableElement) element, valid);
+		validatorHelper.doesNotReturnPrimitive((ExecutableElement) element, valid);
 
-        restAnnotationHelper.urlVariableNamesExistInParametersAndHasOnlyOneMoreParameter((ExecutableElement) element, valid);
-    }
+		restAnnotationHelper.urlVariableNamesExistInParametersAndHasOnlyOneMoreParameter((ExecutableElement) element, valid);
+	}
 
 	@Override
 	protected String getUrlSuffix(Element element) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/HeadHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/HeadHandler.java
index a8a104a..f5a9cb6 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/HeadHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/HeadHandler.java
@@ -49,10 +49,10 @@ protected String getUrlSuffix(Element element) {
 		return annotation.value();
 	}
 
-    @Override
-    protected JExpression getResponseClass(Element element, RestHolder holder) {
-        return JExpr._null();
-    }
+	@Override
+	protected JExpression getResponseClass(Element element, RestHolder holder) {
+		return JExpr._null();
+	}
 
 	@Override
 	protected JExpression addResultCallMethod(JExpression exchangeCall, JClass methodReturnClass) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/OptionsHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/OptionsHandler.java
index 2d5b46f..7553003 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/OptionsHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/OptionsHandler.java
@@ -49,10 +49,10 @@ protected String getUrlSuffix(Element element) {
 		return annotation.value();
 	}
 
-    @Override
-    protected JExpression getResponseClass(Element element, RestHolder holder) {
-        return JExpr._null();
-    }
+	@Override
+	protected JExpression getResponseClass(Element element, RestHolder holder) {
+		return JExpr._null();
+	}
 
 	@Override
 	protected JExpression addResultCallMethod(JExpression exchangeCall, JClass methodReturnClass) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/PutHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/PutHandler.java
index fc75b05..249cc3f 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/PutHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/PutHandler.java
@@ -33,7 +33,7 @@ public PutHandler(ProcessingEnvironment processingEnvironment) {
 	public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
 		super.validate(element, validatedElements, valid);
 
-        validatorHelper.doesNotReturnPrimitive((ExecutableElement) element, valid);
+		validatorHelper.doesNotReturnPrimitive((ExecutableElement) element, valid);
 
 		restAnnotationHelper.urlVariableNamesExistInParametersAndHasOnlyOneMoreParameter((ExecutableElement) element, valid);
 	}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestHandler.java
index a7b8a3b..f746ab9 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestHandler.java
@@ -15,10 +15,19 @@
  */
 package org.androidannotations.handler.rest;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JFieldVar;
-import com.sun.codemodel.JInvocation;
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr.invoke;
+import static com.sun.codemodel.JExpr.lit;
+import static org.androidannotations.helper.CanonicalNameConstants.ARRAYLIST;
+import static org.androidannotations.helper.CanonicalNameConstants.CLIENT_HTTP_REQUEST_INTERCEPTOR;
+
+import java.util.List;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.DeclaredType;
+
 import org.androidannotations.annotations.rest.Rest;
 import org.androidannotations.handler.BaseGeneratingAnnotationHandler;
 import org.androidannotations.helper.APTCodeModelHelper;
@@ -28,15 +37,10 @@
 import org.androidannotations.process.IsValid;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.type.DeclaredType;
-import java.util.List;
-
-import static com.sun.codemodel.JExpr.*;
-import static org.androidannotations.helper.CanonicalNameConstants.ARRAYLIST;
-import static org.androidannotations.helper.CanonicalNameConstants.CLIENT_HTTP_REQUEST_INTERCEPTOR;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JInvocation;
 
 public class RestHandler extends BaseGeneratingAnnotationHandler<RestHolder> {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestMethodHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestMethodHandler.java
index acc9944..8868d15 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestMethodHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestMethodHandler.java
@@ -17,6 +17,7 @@
 
 import java.util.List;
 import java.util.Locale;
+import java.util.SortedMap;
 import java.util.TreeMap;
 
 import javax.annotation.processing.ProcessingEnvironment;
@@ -79,7 +80,7 @@ public void process(Element element, RestHolder holder) {
 		// Creating method signature
 		JMethod method = holder.getGeneratedClass().method(JMod.PUBLIC, methodReturnClass, methodName);
 		method.annotate(Override.class);
-		TreeMap<String, JVar> params = addMethodParams(executableElement, holder, method);
+		SortedMap<String, JVar> params = addMethodParams(executableElement, holder, method);
 		JBlock methodBody = new JBlock(false, false);
 
 		// RestTemplate exchange() method call
@@ -108,9 +109,9 @@ protected JClass getMethodReturnClass(Element element, RestHolder holder) {
 		return codeModelHelper.typeMirrorToJClass(executableElement.getReturnType(), holder);
 	}
 
-	protected TreeMap<String, JVar> addMethodParams(ExecutableElement executableElement, RestHolder restHolder, JMethod method) {
+	protected SortedMap<String, JVar> addMethodParams(ExecutableElement executableElement, RestHolder restHolder, JMethod method) {
 		List<? extends VariableElement> params = executableElement.getParameters();
-		TreeMap<String, JVar> methodParams = new TreeMap<String, JVar>();
+		SortedMap<String, JVar> methodParams = new TreeMap<String, JVar>();
 		for (VariableElement parameter : params) {
 			String paramName = parameter.getSimpleName().toString();
 			String paramType = parameter.asType().toString();
@@ -145,7 +146,7 @@ protected JExpression getHttpMethod() {
 		return httpMethod.staticRef(restMethodInCapitalLetters);
 	}
 
-	protected JExpression getRequestEntity(ExecutableElement element, RestHolder holder, JBlock methodBody, TreeMap<String, JVar> params) {
+	protected JExpression getRequestEntity(ExecutableElement element, RestHolder holder, JBlock methodBody, SortedMap<String, JVar> params) {
 		JVar httpHeaders = restAnnotationHelper.declareHttpHeaders(element, holder, methodBody);
 		JVar entitySentToServer = restAnnotationHelper.getEntitySentToServer(element, params);
 		return restAnnotationHelper.declareHttpEntity(processHolder, methodBody, entitySentToServer, httpHeaders);
@@ -155,7 +156,7 @@ protected JExpression getResponseClass(Element element, RestHolder holder) {
 		return restAnnotationHelper.getResponseClass(element, holder);
 	}
 
-	protected JExpression getUrlVariables(Element element, RestHolder holder, JBlock methodBody, TreeMap<String, JVar> params) {
+	protected JExpression getUrlVariables(Element element, RestHolder holder, JBlock methodBody, SortedMap<String, JVar> params) {
 		return restAnnotationHelper.declareUrlVariables((ExecutableElement) element, holder, methodBody, params);
 	}
 
@@ -217,7 +218,7 @@ private JExpression setCookies(ExecutableElement executableElement, RestHolder r
 
 	/**
 	 * Adds the try/catch around the rest execution code.
-	 * 
+	 *
 	 * If an exception is caught, it will first check if the handler is set. If
 	 * the handler is set, it will call the handler and return null (or nothing
 	 * if void). If the handler isn't set, it will re-throw the exception so
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestServiceHandler.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestServiceHandler.java
index 8025f71..df8207e 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestServiceHandler.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/handler/rest/RestServiceHandler.java
@@ -19,9 +19,6 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.type.TypeMirror;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JFieldRef;
 import org.androidannotations.annotations.rest.Rest;
 import org.androidannotations.annotations.rest.RestService;
 import org.androidannotations.handler.BaseAnnotationHandler;
@@ -30,35 +27,38 @@
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.process.IsValid;
 
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JFieldRef;
 
 public class RestServiceHandler extends BaseAnnotationHandler<EComponentHolder> {
 
-    public RestServiceHandler(ProcessingEnvironment processingEnvironment) {
-        super(RestService.class, processingEnvironment);
-    }
+	public RestServiceHandler(ProcessingEnvironment processingEnvironment) {
+		super(RestService.class, processingEnvironment);
+	}
 
-    @Override
-    public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
-        validatorHelper.enclosingElementHasEnhancedComponentAnnotation(element, validatedElements, valid);
+	@Override
+	public void validate(Element element, AnnotationElements validatedElements, IsValid valid) {
+		validatorHelper.enclosingElementHasEnhancedComponentAnnotation(element, validatedElements, valid);
 
-        validatorHelper.isNotPrivate(element, valid);
+		validatorHelper.isNotPrivate(element, valid);
 
-        validatorHelper.typeHasAnnotation(Rest.class, element, valid);
-    }
+		validatorHelper.typeHasAnnotation(Rest.class, element, valid);
+	}
 
-    @Override
-    public void process(Element element, EComponentHolder holder) {
-        String fieldName = element.getSimpleName().toString();
+	@Override
+	public void process(Element element, EComponentHolder holder) {
+		String fieldName = element.getSimpleName().toString();
 
-        TypeMirror fieldTypeMirror = element.asType();
-        String interfaceName = fieldTypeMirror.toString();
+		TypeMirror fieldTypeMirror = element.asType();
+		String interfaceName = fieldTypeMirror.toString();
 
-        String generatedClassName = interfaceName + ModelConstants.GENERATION_SUFFIX;
+		String generatedClassName = interfaceName + ModelConstants.GENERATION_SUFFIX;
 
-        JBlock methodBody = holder.getInitBody();
+		JBlock methodBody = holder.getInitBody();
 
-        JFieldRef field = JExpr.ref(fieldName);
+		JFieldRef field = JExpr.ref(fieldName);
 
-        methodBody.assign(field, JExpr._new(refClass(generatedClassName)).arg(holder.getContextRef()));
-    }
+		methodBody.assign(field, JExpr._new(refClass(generatedClassName)).arg(holder.getContextRef()));
+	}
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/APTCodeModelHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/APTCodeModelHelper.java
index 54660ae..9c7582c 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/APTCodeModelHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/APTCodeModelHelper.java
@@ -15,6 +15,40 @@
  */
 package org.androidannotations.helper;
 
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr.lit;
+import static org.androidannotations.helper.ModelConstants.GENERATION_SUFFIX;
+
+import java.io.StringWriter;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.ArrayType;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.WildcardType;
+import javax.lang.model.util.ElementFilter;
+import javax.lang.model.util.Types;
+
+import org.androidannotations.annotations.EBean;
+import org.androidannotations.holder.EBeanHolder;
+import org.androidannotations.holder.EComponentHolder;
+import org.androidannotations.holder.GeneratedClassHolder;
+
 import com.sun.codemodel.JAnnotatable;
 import com.sun.codemodel.JAnnotationUse;
 import com.sun.codemodel.JBlock;
@@ -32,38 +66,6 @@
 import com.sun.codemodel.JSuperWildcard;
 import com.sun.codemodel.JType;
 import com.sun.codemodel.JVar;
-import org.androidannotations.annotations.EBean;
-import org.androidannotations.holder.EBeanHolder;
-import org.androidannotations.holder.EComponentHolder;
-import org.androidannotations.holder.GeneratedClassHolder;
-
-import javax.lang.model.element.AnnotationMirror;
-import javax.lang.model.element.AnnotationValue;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.TypeParameterElement;
-import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.ArrayType;
-import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.TypeKind;
-import javax.lang.model.type.TypeMirror;
-import javax.lang.model.type.WildcardType;
-import javax.lang.model.util.ElementFilter;
-import javax.lang.model.util.Types;
-import java.io.StringWriter;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.sun.codemodel.JExpr._new;
-import static com.sun.codemodel.JExpr.lit;
-import static org.androidannotations.helper.ModelConstants.GENERATION_SUFFIX;
 
 public class APTCodeModelHelper {
 
@@ -224,6 +226,8 @@ private JMethod findAlreadyGeneratedMethod(ExecutableElement executableElement,
 		JDefinedClass definedClass = holder.getGeneratedClass();
 		String methodName = executableElement.getSimpleName().toString();
 		List<? extends VariableElement> parameters = executableElement.getParameters();
+		// CHECKSTYLE:OFF
+		// TODO: refactor the nasty label jump
 		method: for (JMethod method : definedClass.methods()) {
 			if (method.name().equals(methodName) && method.params().size() == parameters.size()) {
 				int i = 0;
@@ -237,6 +241,7 @@ private JMethod findAlreadyGeneratedMethod(ExecutableElement executableElement,
 				return method;
 			}
 		}
+		// CHECKSTYLE:ON
 		return null;
 	}
 
@@ -402,7 +407,7 @@ public JDefinedClass createDelegatingAnonymousRunnableClass(EComponentHolder hol
 	/**
 	 * Gets all of the methods of the class and includes the methods of any
 	 * implemented interfaces.
-	 * 
+	 *
 	 * @param typeElement
 	 * @return full list of methods.
 	 */
@@ -508,7 +513,7 @@ public JExpression litObject(Object o) {
 		}
 	}
 
-	//TODO it would be nice to cache the result map for better performance
+	// TODO it would be nice to cache the result map for better performance
 	public TypeMirror getActualType(Element element, GeneratedClassHolder holder) {
 		Types types = holder.processingEnvironment().getTypeUtils();
 		DeclaredType typeMirror = (DeclaredType) element.getEnclosingElement().asType();
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActionBarSherlockHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActionBarSherlockHelper.java
index 8ea066c..d848b22 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActionBarSherlockHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActionBarSherlockHelper.java
@@ -44,13 +44,14 @@ public boolean usesActionBarSherlock(EComponentHolder holder) {
 	 * types
 	 */
 	public boolean usesActionBarSherlock(TypeElement typeElement) {
-		TypeMirror superType;
-		while (!((superType = typeElement.getSuperclass()) instanceof NoType)) {
+		TypeMirror superType = typeElement.getSuperclass();
+		while (!(superType instanceof NoType)) {
 			typeElement = (TypeElement) ((DeclaredType) superType).asElement();
 			String qName = typeElement.getQualifiedName().toString();
 			if (qName.startsWith("com.actionbarsherlock.app")) {
 				return true;
 			}
+			superType = typeElement.getSuperclass();
 		}
 		return false;
 	}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActivityIntentBuilder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActivityIntentBuilder.java
index 990235b..95cedd9 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActivityIntentBuilder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ActivityIntentBuilder.java
@@ -15,15 +15,25 @@
  */
 package org.androidannotations.helper;
 
-import com.sun.codemodel.*;
-import org.androidannotations.holder.HasIntentBuilder;
-
 import static com.sun.codemodel.JExpr._new;
 import static com.sun.codemodel.JExpr._super;
 import static com.sun.codemodel.JMod.PRIVATE;
 import static com.sun.codemodel.JMod.PUBLIC;
 import static com.sun.codemodel.JMod.STATIC;
 
+import org.androidannotations.holder.HasIntentBuilder;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JClassAlreadyExistsException;
+import com.sun.codemodel.JConditional;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JVar;
+
 public class ActivityIntentBuilder extends IntentBuilder {
 
 	private static final int MIN_SDK_WITH_FRAGMENT_SUPPORT = 11;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AndroidManifest.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AndroidManifest.java
index 768dbca..cb75f4b 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AndroidManifest.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AndroidManifest.java
@@ -35,6 +35,8 @@ public String toString() {
 		return "AndroidManifest [applicationPackage=" + applicationPackage + ", componentQualifiedNames=" + componentQualifiedNames + ", permissionQualifiedNames=" + permissionQualifiedNames + ", applicationClassName=" + applicationClassName + ", libraryProject=" + libraryProject + ", debugabble=" + debugabble + ", minSdkVersion=" + minSdkVersion + ", maxSdkVersion=" + maxSdkVersion + ", targetSdkVersion=" + targetSdkVersion + "]";
 	}
 
+	// CHECKSTYLE:OFF
+
 	public static AndroidManifest createManifest(String applicationPackage, String applicationClassName, List<String> componentQualifiedNames, List<String> permissionQualifiedNames, int minSdkVersion, int maxSdkVersion, int targetSdkVersion, boolean debugabble) {
 		return new AndroidManifest(false, applicationPackage, applicationClassName, componentQualifiedNames, permissionQualifiedNames, minSdkVersion, maxSdkVersion, targetSdkVersion, debugabble);
 	}
@@ -55,6 +57,8 @@ private AndroidManifest(boolean libraryProject, String applicationPackage, Strin
 		debugabble = debuggable;
 	}
 
+	// CHECKSTYLE:ON
+
 	public String getApplicationPackage() {
 		return applicationPackage;
 	}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationArrayParamExtractor.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationArrayParamExtractor.java
index 61ab1f4..14dd5ba 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationArrayParamExtractor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationArrayParamExtractor.java
@@ -15,17 +15,18 @@
  */
 package org.androidannotations.helper;
 
-import com.sun.codemodel.JAnnotationArrayMember;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JExpression;
-import org.androidannotations.holder.GeneratedClassHolder;
-
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.SimpleAnnotationValueVisitor6;
 
+import org.androidannotations.holder.GeneratedClassHolder;
+
+import com.sun.codemodel.JAnnotationArrayMember;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+
 public class AnnotationArrayParamExtractor extends SimpleAnnotationValueVisitor6<Void, JAnnotationArrayMember> {
 
 	private GeneratedClassHolder holder;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationHelper.java
index 7e96f6d..dbf8a62 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationHelper.java
@@ -15,16 +15,15 @@
  */
 package org.androidannotations.helper;
 
-import com.sun.codemodel.JFieldRef;
-import org.androidannotations.annotations.OnActivityResult;
-import org.androidannotations.annotations.OptionsItem;
-import org.androidannotations.annotations.ResId;
-import org.androidannotations.logger.Level;
-import org.androidannotations.logger.Logger;
-import org.androidannotations.logger.LoggerFactory;
-import org.androidannotations.process.ProcessHolder;
-import org.androidannotations.rclass.IRInnerClass;
-import org.androidannotations.rclass.RInnerClass;
+import static org.androidannotations.helper.ModelConstants.GENERATION_SUFFIX;
+import static org.androidannotations.helper.ModelConstants.VALID_ENHANCED_COMPONENT_ANNOTATIONS;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
 
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.AnnotationMirror;
@@ -39,15 +38,18 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
-import java.lang.annotation.Annotation;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
 
-import static org.androidannotations.helper.ModelConstants.GENERATION_SUFFIX;
-import static org.androidannotations.helper.ModelConstants.VALID_ENHANCED_COMPONENT_ANNOTATIONS;
+import org.androidannotations.annotations.OnActivityResult;
+import org.androidannotations.annotations.OptionsItem;
+import org.androidannotations.annotations.ResId;
+import org.androidannotations.logger.Level;
+import org.androidannotations.logger.Logger;
+import org.androidannotations.logger.LoggerFactory;
+import org.androidannotations.process.ProcessHolder;
+import org.androidannotations.rclass.IRInnerClass;
+import org.androidannotations.rclass.RInnerClass;
+
+import com.sun.codemodel.JFieldRef;
 
 public class AnnotationHelper {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationParamExtractor.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationParamExtractor.java
index 48f24dd..5c84dbd 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationParamExtractor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/AnnotationParamExtractor.java
@@ -15,8 +15,10 @@
  */
 package org.androidannotations.helper;
 
-import com.sun.codemodel.*;
-import org.androidannotations.holder.GeneratedClassHolder;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.util.List;
+import java.util.Map;
 
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
@@ -24,10 +26,15 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.SimpleAnnotationValueVisitor6;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.util.List;
-import java.util.Map;
+
+import org.androidannotations.holder.GeneratedClassHolder;
+
+import com.sun.codemodel.JAnnotationArrayMember;
+import com.sun.codemodel.JAnnotationUse;
+import com.sun.codemodel.JAnnotationValue;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
 
 public class AnnotationParamExtractor extends SimpleAnnotationValueVisitor6<Void, String> {
 
@@ -123,7 +130,6 @@ public Void visitType(TypeMirror t, String p) {
 	}
 
 	@Override
-	@SuppressWarnings("unchecked")
 	public Void visitAnnotation(AnnotationMirror a, String p) {
 		try {
 			JClass annotationJClass = helper.typeMirrorToJClass(a.getAnnotationType(), holder);
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/BundleHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/BundleHelper.java
index 6b1da58..95e5713 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/BundleHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/BundleHelper.java
@@ -15,61 +15,62 @@
  */
 package org.androidannotations.helper;
 
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JExpression;
-import com.sun.codemodel.JMethod;
+import static org.androidannotations.helper.CanonicalNameConstants.BUNDLE;
+import static org.androidannotations.helper.CanonicalNameConstants.CHAR_SEQUENCE;
+import static org.androidannotations.helper.CanonicalNameConstants.STRING;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 
-import static org.androidannotations.helper.CanonicalNameConstants.BUNDLE;
-import static org.androidannotations.helper.CanonicalNameConstants.CHAR_SEQUENCE;
-import static org.androidannotations.helper.CanonicalNameConstants.STRING;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JMethod;
 
 public class BundleHelper {
-	public static final Map<String, String> methodSuffixNameByTypeName = new HashMap<String, String>();
+	public static final Map<String, String> METHOD_SUFFIX_BY_TYPE_NAME = new HashMap<String, String>();
 
 	static {
 
-		methodSuffixNameByTypeName.put(BUNDLE, "Bundle");
+		METHOD_SUFFIX_BY_TYPE_NAME.put(BUNDLE, "Bundle");
 
-		methodSuffixNameByTypeName.put("boolean", "Boolean");
-		methodSuffixNameByTypeName.put("boolean[]", "BooleanArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("boolean", "Boolean");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("boolean[]", "BooleanArray");
 
-		methodSuffixNameByTypeName.put("byte", "Byte");
-		methodSuffixNameByTypeName.put("byte[]", "ByteArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("byte", "Byte");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("byte[]", "ByteArray");
 
-		methodSuffixNameByTypeName.put("char", "Char");
-		methodSuffixNameByTypeName.put("char[]", "CharArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("char", "Char");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("char[]", "CharArray");
 
-		methodSuffixNameByTypeName.put(CHAR_SEQUENCE, "CharSequence");
+		METHOD_SUFFIX_BY_TYPE_NAME.put(CHAR_SEQUENCE, "CharSequence");
 
-		methodSuffixNameByTypeName.put("double", "Double");
-		methodSuffixNameByTypeName.put("double[]", "DoubleArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("double", "Double");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("double[]", "DoubleArray");
 
-		methodSuffixNameByTypeName.put("float", "Float");
-		methodSuffixNameByTypeName.put("float[]", "FloatArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("float", "Float");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("float[]", "FloatArray");
 
-		methodSuffixNameByTypeName.put("int", "Int");
-		methodSuffixNameByTypeName.put("int[]", "IntArray");
-		methodSuffixNameByTypeName.put("java.util.ArrayList<java.lang.Integer>", "IntegerArrayList");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("int", "Int");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("int[]", "IntArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("java.util.ArrayList<java.lang.Integer>", "IntegerArrayList");
 
-		methodSuffixNameByTypeName.put("long", "Long");
-		methodSuffixNameByTypeName.put("long[]", "LongArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("long", "Long");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("long[]", "LongArray");
 
-		methodSuffixNameByTypeName.put("short", "Short");
-		methodSuffixNameByTypeName.put("short[]", "ShortArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("short", "Short");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("short[]", "ShortArray");
 
-		methodSuffixNameByTypeName.put(STRING, "String");
-		methodSuffixNameByTypeName.put("java.lang.String[]", "StringArray");
-		methodSuffixNameByTypeName.put("java.util.ArrayList<java.lang.String>", "StringArrayList");
+		METHOD_SUFFIX_BY_TYPE_NAME.put(STRING, "String");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("java.lang.String[]", "StringArray");
+		METHOD_SUFFIX_BY_TYPE_NAME.put("java.util.ArrayList<java.lang.String>", "StringArrayList");
 	}
 
 	private AnnotationHelper annotationHelper;
@@ -90,10 +91,10 @@ public BundleHelper(AnnotationHelper helper, TypeMirror element) {
 		String typeString = element.toString();
 		TypeElement elementType = annotationHelper.typeElementFromQualifiedName(typeString);
 
-		if (methodSuffixNameByTypeName.containsKey(typeString)) {
+		if (METHOD_SUFFIX_BY_TYPE_NAME.containsKey(typeString)) {
 
-			methodNameToSave = "put" + methodSuffixNameByTypeName.get(typeString);
-			methodNameToRestore = "get" + methodSuffixNameByTypeName.get(typeString);
+			methodNameToSave = "put" + METHOD_SUFFIX_BY_TYPE_NAME.get(typeString);
+			methodNameToRestore = "get" + METHOD_SUFFIX_BY_TYPE_NAME.get(typeString);
 
 		} else if (element.getKind() == TypeKind.ARRAY) {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/CaseHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/CaseHelper.java
index db83b58..31c32bf 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/CaseHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/CaseHelper.java
@@ -22,12 +22,15 @@
 
 public class CaseHelper {
 
-	private static final Pattern pattern = Pattern.compile("([A-Z]|[a-z])[a-z]*");
+	private static final Pattern PATTERN = Pattern.compile("([A-Z]|[a-z])[a-z]*");
+
+	private CaseHelper() {
+	}
 
 	public static String camelCaseToSnakeCase(String camelCase) {
 
 		List<String> tokens = new ArrayList<String>();
-		Matcher matcher = pattern.matcher(camelCase);
+		Matcher matcher = PATTERN.matcher(camelCase);
 		String acronym = "";
 		while (matcher.find()) {
 			String found = matcher.group();
@@ -61,14 +64,16 @@ public static String camelCaseToUpperSnakeCase(String camelCase) {
 	}
 
 	public static String lowerCaseFirst(String string) {
-		if (string.length() < 2)
+		if (string.length() < 2) {
 			return string.toLowerCase();
+		}
+
 		String first = string.substring(0, 1).toLowerCase();
 		String end = string.substring(1, string.length());
 		return first + end;
-    }
+	}
 
-    public static String camelCaseToUpperSnakeCase(String prefix, String camelCase, String suffix) {
+	public static String camelCaseToUpperSnakeCase(String prefix, String camelCase, String suffix) {
 		if (prefix != null && !camelCase.startsWith(prefix)) {
 			camelCase = prefix + "_" + camelCase;
 		}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/FileHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/FileHelper.java
index 97989a4..16c37eb 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/FileHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/FileHelper.java
@@ -27,6 +27,9 @@
 
 public class FileHelper {
 
+	private FileHelper() {
+	}
+
 	public static Option<File> findRootProject(ProcessingEnvironment processingEnv) {
 		Option<FileHolder> rootProjectHolder = findRootProjectHolder(processingEnv);
 		if (rootProjectHolder.isAbsent()) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/IntentBuilder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/IntentBuilder.java
index 85dfdab..a53dab3 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/IntentBuilder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/IntentBuilder.java
@@ -15,6 +15,26 @@
  */
 package org.androidannotations.helper;
 
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr._super;
+import static com.sun.codemodel.JExpr.cast;
+import static com.sun.codemodel.JExpr.ref;
+import static com.sun.codemodel.JMod.PUBLIC;
+import static com.sun.codemodel.JMod.STATIC;
+import static org.androidannotations.helper.CanonicalNameConstants.PARCELABLE;
+import static org.androidannotations.helper.CanonicalNameConstants.SERIALIZABLE;
+import static org.androidannotations.helper.CanonicalNameConstants.STRING;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+
+import org.androidannotations.holder.HasIntentBuilder;
+
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JClassAlreadyExistsException;
 import com.sun.codemodel.JDefinedClass;
@@ -25,24 +45,6 @@
 import com.sun.codemodel.JMethod;
 import com.sun.codemodel.JMod;
 import com.sun.codemodel.JVar;
-import org.androidannotations.holder.HasIntentBuilder;
-
-import javax.lang.model.type.TypeKind;
-import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.sun.codemodel.JExpr._new;
-import static com.sun.codemodel.JExpr._super;
-import static com.sun.codemodel.JExpr.cast;
-import static com.sun.codemodel.JExpr.ref;
-import static com.sun.codemodel.JMod.PUBLIC;
-import static com.sun.codemodel.JMod.STATIC;
-import static org.androidannotations.helper.CanonicalNameConstants.PARCELABLE;
-import static org.androidannotations.helper.CanonicalNameConstants.SERIALIZABLE;
-import static org.androidannotations.helper.CanonicalNameConstants.STRING;
 
 public abstract class IntentBuilder {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/OptionsHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/OptionsHelper.java
index cbf5885..29e1602 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/OptionsHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/OptionsHelper.java
@@ -59,7 +59,7 @@ public OptionsHelper(ProcessingEnvironment processingEnvironment) {
 	}
 
 	public static Set<String> getOptionsConstants() {
-		TreeSet<String> set = new TreeSet<String>();
+		Set<String> set = new TreeSet<String>();
 		for (Option optionEnum : Option.values()) {
 			set.add(optionEnum.getKey());
 		}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/RestAnnotationHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/RestAnnotationHelper.java
index ba4c68d..8af8ee4 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/RestAnnotationHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/RestAnnotationHelper.java
@@ -16,13 +16,11 @@
 package org.androidannotations.helper;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
-import java.util.TreeMap;
+import java.util.SortedMap;
 import java.util.TreeSet;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -140,7 +138,7 @@ public void urlVariableNamesExistInParametersAndHasOnlyOneMoreParameter(Executab
 		return variableNames;
 	}
 
-	public JVar declareUrlVariables(ExecutableElement element, RestHolder holder, JBlock methodBody, TreeMap<String, JVar> methodParams) {
+	public JVar declareUrlVariables(ExecutableElement element, RestHolder holder, JBlock methodBody, SortedMap<String, JVar> methodParams) {
 		Set<String> urlVariables = extractUrlVariableNames(element);
 
 		// cookies in url?
@@ -295,15 +293,15 @@ public JVar declareHttpHeaders(ExecutableElement executableElement, RestHolder h
 		return httpHeadersVar;
 	}
 
-    public JVar getEntitySentToServer(ExecutableElement element, TreeMap<String, JVar> params) {
-        Set<String> urlVariables = extractUrlVariableNames(element);
-        for (String paramName : params.keySet()) {
-            if (!urlVariables.contains(paramName)) {
-                return params.get(paramName);
-            }
-        }
-        return null;
-    }
+	public JVar getEntitySentToServer(ExecutableElement element, SortedMap<String, JVar> params) {
+		Set<String> urlVariables = extractUrlVariableNames(element);
+		for (String paramName : params.keySet()) {
+			if (!urlVariables.contains(paramName)) {
+				return params.get(paramName);
+			}
+		}
+		return null;
+	}
 
 	public JExpression declareHttpEntity(ProcessHolder holder, JBlock body, JVar entitySentToServer, JVar httpHeaders) {
 		JType entityType = holder.refClass(Object.class);
@@ -376,16 +374,16 @@ public JClass retrieveResponseClass(TypeMirror returnType, RestHolder holder) {
 	 * <li>The type is a generics and enclosing type is an interface I&lt;T&gt;
 	 * : Looking the inheritance tree, then</li>
 	 * <ol>
-	 * <li>One of the parent is a {@link Map} : Generate a subclass of
-	 * {@link LinkedHashMap}&lt;T&gt; one and return it</li>
+	 * <li>One of the parent is a {@link java.util.Map Map} : Generate a
+	 * subclass of {@link LinkedHashMap}&lt;T&gt; one and return it</li>
 	 * <li>One of the parent is a {@link Set} : Generate a subclass of
 	 * {@link TreeSet}&lt;T&gt; one and return it</li>
-	 * <li>One of the parent is a {@link Collection} : Generate a subclass of
-	 * {@link ArrayList}&lt;T&gt; one and return it</li>
+	 * <li>One of the parent is a {@link java.util.Collection Collection} :
+	 * Generate a subclass of {@link ArrayList}&lt;T&gt; one and return it</li>
 	 * <li>Return {@link Object} definition</li>
 	 * </ol>
 	 * </ul>
-	 * 
+	 *
 	 */
 	private JClass resolveResponseClass(TypeMirror expectedType, RestHolder holder) {
 		// is a class or an interface
@@ -419,8 +417,8 @@ private JClass resolveResponseClass(TypeMirror expectedType, RestHolder holder)
 
 	/**
 	 * Recursive method used to find if one of the grand-parent of the
-	 * <code>enclosingJClass</code> is {@link Map}, {@link Set} or
-	 * {@link Collection}.
+	 * <code>enclosingJClass</code> is {@link java.util.Map Map}, {@link Set} or
+	 * {@link java.util.Collection Collection}.
 	 */
 	private JClass retrieveDecoratedResponseClass(DeclaredType declaredType, TypeElement typeElement, RestHolder holder) {
 		String classTypeBaseName = typeElement.toString();
@@ -448,15 +446,16 @@ private JClass retrieveDecoratedResponseClass(DeclaredType declaredType, TypeEle
 			String decoratedClassNameSuffix = "";
 			JClass decoratedSuperClass = holder.refClass(decoratedClassName);
 			for (TypeMirror typeArgument : declaredType.getTypeArguments()) {
+				TypeMirror actualTypeArgument = typeArgument;
 				if (typeArgument instanceof WildcardType) {
 					WildcardType wildcardType = (WildcardType) typeArgument;
 					if (wildcardType.getExtendsBound() != null) {
-						typeArgument = wildcardType.getExtendsBound();
+						actualTypeArgument = wildcardType.getExtendsBound();
 					} else if (wildcardType.getSuperBound() != null) {
-						typeArgument = wildcardType.getSuperBound();
+						actualTypeArgument = wildcardType.getSuperBound();
 					}
 				}
-				JClass narrowJClass = codeModelHelper.typeMirrorToJClass(typeArgument, holder);
+				JClass narrowJClass = codeModelHelper.typeMirrorToJClass(actualTypeArgument, holder);
 				decoratedSuperClass = decoratedSuperClass.narrow(narrowJClass);
 				decoratedClassNameSuffix += plainName(narrowJClass);
 			}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ServiceIntentBuilder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ServiceIntentBuilder.java
index e9bb6e8..c1909e9 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ServiceIntentBuilder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ServiceIntentBuilder.java
@@ -15,9 +15,10 @@
  */
 package org.androidannotations.helper;
 
-import com.sun.codemodel.JClass;
 import org.androidannotations.holder.HasIntentBuilder;
 
+import com.sun.codemodel.JClass;
+
 public class ServiceIntentBuilder extends IntentBuilder {
 
 	public ServiceIntentBuilder(HasIntentBuilder holder, AndroidManifest androidManifest) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorHelper.java
index 5c07df9..4918cee 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorHelper.java
@@ -266,7 +266,7 @@ public void enclosingElementHasAndroidAnnotation(Element element, AnnotationElem
 	}
 
 	private void hasClassAnnotation(Element reportElement, Element element, AnnotationElements validatedElements, Class<? extends Annotation> validAnnotation, IsValid valid) {
-		ArrayList<Class<? extends Annotation>> validAnnotations = new ArrayList<Class<? extends Annotation>>();
+		List<Class<? extends Annotation>> validAnnotations = new ArrayList<Class<? extends Annotation>>();
 		validAnnotations.add(validAnnotation);
 		hasOneOfClassAnnotations(reportElement, element, validatedElements, validAnnotations, valid);
 	}
@@ -1074,7 +1074,7 @@ private TypeElement getArrayEnclosingType(String typeString) {
 	}
 
 	private boolean isKnownBundleCompatibleType(String type) {
-		return BundleHelper.methodSuffixNameByTypeName.containsKey(type);
+		return BundleHelper.METHOD_SUFFIX_BY_TYPE_NAME.containsKey(type);
 	}
 
 	public void componentRegistered(Element element, AndroidManifest androidManifest, IsValid valid) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorParameterHelper.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorParameterHelper.java
index 27ad59e..90809a2 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorParameterHelper.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/helper/ValidatorParameterHelper.java
@@ -35,8 +35,7 @@
 public class ValidatorParameterHelper {
 
 	private static final List<String> ANDROID_SHERLOCK_MENU_ITEM_QUALIFIED_NAMES = asList(CanonicalNameConstants.MENU_ITEM, CanonicalNameConstants.SHERLOCK_MENU_ITEM);
-	private static final List<String> EDITOR_ACTION_ALLOWED_PARAMETER_TYPES = asList(CanonicalNameConstants.TEXT_VIEW,
-		CanonicalNameConstants.INTEGER, "int", CanonicalNameConstants.KEY_EVENT);
+	private static final List<String> EDITOR_ACTION_ALLOWED_PARAMETER_TYPES = asList(CanonicalNameConstants.TEXT_VIEW, CanonicalNameConstants.INTEGER, "int", CanonicalNameConstants.KEY_EVENT);
 
 	protected final TargetAnnotationHelper annotationHelper;
 
@@ -138,7 +137,7 @@ private void hasZeroOrOneParameterOfType(String typeCanonicalName, ExecutableEle
 			String parameterType = parameter.asType().toString();
 			if (parameterType.equals(typeCanonicalName)) {
 				if (parameterOfTypeFound) {
-					annotationHelper.printAnnotationError(executableElement, "You can declare only one parameter of type "+typeCanonicalName);
+					annotationHelper.printAnnotationError(executableElement, "You can declare only one parameter of type " + typeCanonicalName);
 					valid.invalidate();
 				}
 				parameterOfTypeFound = true;
@@ -151,7 +150,7 @@ private void hasZeroOrOneParameterOfPrimitiveType(String typeCanonicalName, Type
 		for (VariableElement parameter : executableElement.getParameters()) {
 			if (parameter.asType().getKind() == typeKind || parameter.asType().toString().equals(typeCanonicalName)) {
 				if (parameterOfTypeFound) {
-					annotationHelper.printAnnotationError(executableElement, "You can declare only one parameter of type "+typeKind.name()+" or "+typeCanonicalName);
+					annotationHelper.printAnnotationError(executableElement, "You can declare only one parameter of type " + typeKind.name() + " or " + typeCanonicalName);
 					valid.invalidate();
 				}
 				parameterOfTypeFound = true;
@@ -160,17 +159,17 @@ private void hasZeroOrOneParameterOfPrimitiveType(String typeCanonicalName, Type
 	}
 
 	public void hasNoOtherParameterThanCompoundButtonOrBoolean(ExecutableElement executableElement, IsValid valid) {
-		String[] types = new String[]{CanonicalNameConstants.COMPOUND_BUTTON, CanonicalNameConstants.BOOLEAN, "boolean"};
+		String[] types = new String[] { CanonicalNameConstants.COMPOUND_BUTTON, CanonicalNameConstants.BOOLEAN, "boolean" };
 		hasNotOtherParameterThanTypes(types, executableElement, valid);
 	}
 
 	public void hasNoOtherParameterThanMotionEventOrView(ExecutableElement executableElement, IsValid valid) {
-		String[] types = new String[]{CanonicalNameConstants.MOTION_EVENT, CanonicalNameConstants.VIEW};
+		String[] types = new String[] { CanonicalNameConstants.MOTION_EVENT, CanonicalNameConstants.VIEW };
 		hasNotOtherParameterThanTypes(types, executableElement, valid);
 	}
 
 	public void hasNoOtherParameterThanViewOrBoolean(ExecutableElement executableElement, IsValid valid) {
-		String[] types = new String[]{CanonicalNameConstants.VIEW, CanonicalNameConstants.BOOLEAN, "boolean"};
+		String[] types = new String[] { CanonicalNameConstants.VIEW, CanonicalNameConstants.BOOLEAN, "boolean" };
 		hasNotOtherParameterThanTypes(types, executableElement, valid);
 	}
 
@@ -179,7 +178,7 @@ private void hasNotOtherParameterThanTypes(String[] typesCanonicalNames, Executa
 		for (VariableElement parameter : executableElement.getParameters()) {
 			String parameterType = parameter.asType().toString();
 			if (!types.contains(parameterType)) {
-				annotationHelper.printAnnotationError(executableElement, "You can declare only parameters of type "+Arrays.toString(typesCanonicalNames));
+				annotationHelper.printAnnotationError(executableElement, "You can declare only parameters of type " + Arrays.toString(typesCanonicalNames));
 				valid.invalidate();
 			}
 		}
@@ -191,12 +190,12 @@ public void hasNoOtherParameterThanContextOrIntentOrReceiverExtraAnnotated(Execu
 	}
 
 	public void hasNoOtherParameterThanContextOrIntentOrReceiverActionExtraAnnotated(ExecutableElement executableElement, IsValid valid) {
-		String[] types = new String[] {CanonicalNameConstants.CONTEXT, CanonicalNameConstants.INTENT};
+		String[] types = new String[] { CanonicalNameConstants.CONTEXT, CanonicalNameConstants.INTENT };
 		hasNotOtherParameterThanTypesOrAnnotatedWith(types, ReceiverAction.Extra.class, executableElement, valid);
 	}
 
 	public void hasNoOtherParameterThanIntentOrIntOrOnActivityResultExtraAnnotated(ExecutableElement executableElement, IsValid valid) {
-		String[] types = new String[] {CanonicalNameConstants.INTENT, CanonicalNameConstants.INTEGER, "int"};
+		String[] types = new String[] { CanonicalNameConstants.INTENT, CanonicalNameConstants.INTEGER, "int" };
 		hasNotOtherParameterThanTypesOrAnnotatedWith(types, OnActivityResult.Extra.class, executableElement, valid);
 	}
 
@@ -205,7 +204,7 @@ public void hasNotOtherParameterThanTypesOrAnnotatedWith(String[] typesCanonical
 		for (VariableElement parameter : executableElement.getParameters()) {
 			String parameterType = parameter.asType().toString();
 			if (!types.contains(parameterType) && parameter.getAnnotation(annotationClass) == null) {
-				annotationHelper.printAnnotationError(executableElement, "You can declare only parameters of type "+Arrays.toString(typesCanonicalNames)+" or parameters annotated with @"+annotationClass.getCanonicalName());
+				annotationHelper.printAnnotationError(executableElement, "You can declare only parameters of type " + Arrays.toString(typesCanonicalNames) + " or parameters annotated with @" + annotationClass.getCanonicalName());
 				valid.invalidate();
 			}
 		}
@@ -259,7 +258,7 @@ public void hasAtMostOneSpecificParameter(ExecutableElement executableElement, L
 			if (qualifiedNames.contains(parameter.asType().toString())) {
 				if (hasOneMatchingParameter) {
 					valid.invalidate();
-					annotationHelper.printAnnotationError(executableElement, "%s can't have more than one parameter of type "+parameter.asType().toString());
+					annotationHelper.printAnnotationError(executableElement, "%s can't have more than one parameter of type " + parameter.asType().toString());
 				} else {
 					hasOneMatchingParameter = true;
 				}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EActivityHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EActivityHolder.java
index 22c979a..0c86249 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EActivityHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EActivityHolder.java
@@ -15,28 +15,17 @@
  */
 package org.androidannotations.holder;
 
-import com.sun.codemodel.JBlock;
-import com.sun.codemodel.JClass;
-import com.sun.codemodel.JClassAlreadyExistsException;
-import com.sun.codemodel.JDefinedClass;
-import com.sun.codemodel.JExpr;
-import com.sun.codemodel.JExpression;
-import com.sun.codemodel.JFieldVar;
-import com.sun.codemodel.JInvocation;
-import com.sun.codemodel.JMethod;
-import com.sun.codemodel.JMod;
-import com.sun.codemodel.JType;
-import com.sun.codemodel.JVar;
-
-import org.androidannotations.api.SdkVersionHelper;
-import org.androidannotations.helper.ActionBarSherlockHelper;
-import org.androidannotations.helper.ActivityIntentBuilder;
-import org.androidannotations.helper.AndroidManifest;
-import org.androidannotations.helper.AnnotationHelper;
-import org.androidannotations.helper.CanonicalNameConstants;
-import org.androidannotations.helper.IntentBuilder;
-import org.androidannotations.helper.OrmLiteHelper;
-import org.androidannotations.process.ProcessHolder;
+import static com.sun.codemodel.JExpr.FALSE;
+import static com.sun.codemodel.JExpr.TRUE;
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr._super;
+import static com.sun.codemodel.JExpr._this;
+import static com.sun.codemodel.JExpr.cast;
+import static com.sun.codemodel.JExpr.invoke;
+import static com.sun.codemodel.JMod.PRIVATE;
+import static com.sun.codemodel.JMod.PUBLIC;
+import static org.androidannotations.helper.ModelConstants.GENERATION_SUFFIX;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -49,17 +38,28 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementFilter;
 
-import static com.sun.codemodel.JExpr.FALSE;
-import static com.sun.codemodel.JExpr.TRUE;
-import static com.sun.codemodel.JExpr._new;
-import static com.sun.codemodel.JExpr._null;
-import static com.sun.codemodel.JExpr._super;
-import static com.sun.codemodel.JExpr._this;
-import static com.sun.codemodel.JExpr.cast;
-import static com.sun.codemodel.JExpr.invoke;
-import static com.sun.codemodel.JMod.PRIVATE;
-import static com.sun.codemodel.JMod.PUBLIC;
-import static org.androidannotations.helper.ModelConstants.GENERATION_SUFFIX;
+import org.androidannotations.api.SdkVersionHelper;
+import org.androidannotations.helper.ActionBarSherlockHelper;
+import org.androidannotations.helper.ActivityIntentBuilder;
+import org.androidannotations.helper.AndroidManifest;
+import org.androidannotations.helper.AnnotationHelper;
+import org.androidannotations.helper.CanonicalNameConstants;
+import org.androidannotations.helper.IntentBuilder;
+import org.androidannotations.helper.OrmLiteHelper;
+import org.androidannotations.process.ProcessHolder;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JClassAlreadyExistsException;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JType;
+import com.sun.codemodel.JVar;
 
 public class EActivityHolder extends EComponentWithViewSupportHolder implements HasIntentBuilder, HasExtras, HasInstanceState, HasOptionsMenu, HasOnActivityResult, HasReceiverRegistration {
 
@@ -148,6 +148,8 @@ protected void setOnCreate() {
 		viewNotifierHelper.resetPreviousNotifier(onCreateBody, previousNotifier);
 	}
 
+	// CHECKSTYLE:OFF
+
 	protected void setOnStart() {
 		JMethod method = generatedClass.method(JMod.PUBLIC, codeModel().VOID, "onStart");
 		method.annotate(Override.class);
@@ -339,7 +341,7 @@ private JMethod setContentViewMethod(JType[] paramTypes, String[] paramNames) {
 		JMethod method = generatedClass.method(JMod.PUBLIC, codeModel().VOID, "setContentView");
 		method.annotate(Override.class);
 
-		ArrayList<JVar> params = new ArrayList<JVar>();
+		List<JVar> params = new ArrayList<JVar>();
 		for (int i = 0; i < paramTypes.length; i++) {
 			JVar param = method.param(paramTypes[i], paramNames[i]);
 			params.add(param);
@@ -375,16 +377,15 @@ private void handleBackPressed() {
 
 			onKeyDownBody._if( //
 					sdkInt.lt(JExpr.lit(5)) //
-					.cand(keyCodeParam.eq(keyEventClass.staticRef("KEYCODE_BACK"))) //
-					.cand(eventParam.invoke("getRepeatCount").eq(JExpr.lit(0)))) //
+							.cand(keyCodeParam.eq(keyEventClass.staticRef("KEYCODE_BACK"))) //
+							.cand(eventParam.invoke("getRepeatCount").eq(JExpr.lit(0)))) //
 					._then() //
 					.invoke("onBackPressed");
 
 			onKeyDownBody._return( //
 					JExpr._super().invoke(onKeyDownMethod) //
-					.arg(keyCodeParam) //
-					.arg(eventParam));
-
+							.arg(keyCodeParam) //
+							.arg(eventParam));
 		}
 	}
 
@@ -412,8 +413,7 @@ private boolean isCustomOnBackPressedMethod(ExecutableElement method) {
 				&& method.getThrownTypes().size() == 0 //
 				&& method.getModifiers().contains(Modifier.PUBLIC) //
 				&& method.getReturnType().getKind().equals(TypeKind.VOID) //
-				&& method.getParameters().size() == 0 //
-				;
+				&& method.getParameters().size() == 0;
 	}
 
 	@Override
@@ -457,9 +457,10 @@ protected void setContentViewListenerField() {
 
 	protected void setScopeField() {
 		getRoboGuiceHolder().scope = getGeneratedClass().field(JMod.PRIVATE, classes().CONTEXT_SCOPE, "scope_");
-
 	}
 
+	// CHECKSTYLE:ON
+
 	@Override
 	public JMethod getInjectExtrasMethod() {
 		if (injectExtrasMethod == null) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EBeanHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EBeanHolder.java
index 9830acd..60f455b 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EBeanHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EBeanHolder.java
@@ -71,14 +71,15 @@ protected void setContextRef() {
 		contextRef = getContextField();
 	}
 
+	@Override
 	protected void setInit() {
 		init = generatedClass.method(PRIVATE, processHolder.codeModel().VOID, "init_");
 	}
 
-    public void invokeInitInConstructor() {
-        JBlock constructorBody = constructor.body();
-        constructorBody.invoke(getInit());
-    }
+	public void invokeInitInConstructor() {
+		JBlock constructorBody = constructor.body();
+		constructorBody.invoke(getInit());
+	}
 
 	public void createFactoryMethod(boolean hasSingletonScope) {
 
@@ -100,7 +101,7 @@ public void createFactoryMethod(boolean hasSingletonScope) {
 					._then();
 			JVar previousNotifier = viewNotifierHelper.replacePreviousNotifierWithNull(creationBlock);
 			creationBlock.assign(instanceField, _new(generatedClass).arg(factoryMethodContextParam.invoke("getApplicationContext")));
-            creationBlock.invoke(instanceField, getInit());
+			creationBlock.invoke(instanceField, getInit());
 			viewNotifierHelper.resetPreviousNotifier(creationBlock, previousNotifier);
 
 			factoryMethodBody._return(instanceField);
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentHolder.java
index 6faf5eb..0a6a5a9 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentHolder.java
@@ -41,7 +41,7 @@
 
 public abstract class EComponentHolder extends BaseGeneratedClassHolder {
 
-    private static final String METHOD_MAIN_LOOPER = "getMainLooper";
+	private static final String METHOD_MAIN_LOOPER = "getMainLooper";
 
 	protected JExpression contextRef;
 	protected JMethod init;
@@ -133,8 +133,8 @@ public JVar getHandler() {
 
 	private void setHandler() {
 		JClass handlerClass = classes().HANDLER;
-        JClass looperClass = classes().LOOPER;
-        JInvocation arg = JExpr._new(handlerClass).arg(looperClass.staticInvoke(METHOD_MAIN_LOOPER));
-        handler = generatedClass.field(JMod.PRIVATE, handlerClass, "handler_", arg);
+		JClass looperClass = classes().LOOPER;
+		JInvocation arg = JExpr._new(handlerClass).arg(looperClass.staticInvoke(METHOD_MAIN_LOOPER));
+		handler = generatedClass.field(JMod.PRIVATE, handlerClass, "handler_", arg);
 	}
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentWithViewSupportHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentWithViewSupportHolder.java
index 51c7c25..6482634 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentWithViewSupportHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EComponentWithViewSupportHolder.java
@@ -15,20 +15,36 @@
  */
 package org.androidannotations.holder;
 
-import com.sun.codemodel.*;
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr._this;
+import static com.sun.codemodel.JExpr.cast;
+import static com.sun.codemodel.JExpr.invoke;
+import static com.sun.codemodel.JMod.FINAL;
+import static com.sun.codemodel.JMod.PRIVATE;
+import static com.sun.codemodel.JMod.PUBLIC;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeMirror;
+
 import org.androidannotations.api.view.HasViews;
 import org.androidannotations.api.view.OnViewChangedListener;
 import org.androidannotations.api.view.OnViewChangedNotifier;
 import org.androidannotations.helper.ViewNotifierHelper;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.type.TypeMirror;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.sun.codemodel.JExpr.*;
-import static com.sun.codemodel.JMod.*;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldRef;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JVar;
 
 public abstract class EComponentWithViewSupportHolder extends EComponentHolder {
 
@@ -41,8 +57,8 @@
 	protected JMethod findSupportFragmentById;
 	protected JMethod findNativeFragmentByTag;
 	protected JMethod findSupportFragmentByTag;
-	private HashMap<String, TextWatcherHolder> textWatcherHolders = new HashMap<String, TextWatcherHolder>();
-	private HashMap<String, OnSeekBarChangeListenerHolder> onSeekBarChangeListenerHolders = new HashMap<String, OnSeekBarChangeListenerHolder>();
+	private Map<String, TextWatcherHolder> textWatcherHolders = new HashMap<String, TextWatcherHolder>();
+	private Map<String, OnSeekBarChangeListenerHolder> onSeekBarChangeListenerHolders = new HashMap<String, OnSeekBarChangeListenerHolder>();
 
 	public EComponentWithViewSupportHolder(ProcessHolder processHolder, TypeElement annotatedElement) throws Exception {
 		super(processHolder, annotatedElement);
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EFragmentHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EFragmentHolder.java
index ca3ef7e..9572a91 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EFragmentHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EFragmentHolder.java
@@ -15,6 +15,29 @@
  */
 package org.androidannotations.holder;
 
+import static com.sun.codemodel.JExpr.FALSE;
+import static com.sun.codemodel.JExpr.TRUE;
+import static com.sun.codemodel.JExpr._new;
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr._super;
+import static com.sun.codemodel.JExpr.invoke;
+import static com.sun.codemodel.JExpr.ref;
+import static com.sun.codemodel.JMod.PRIVATE;
+import static com.sun.codemodel.JMod.PUBLIC;
+import static com.sun.codemodel.JMod.STATIC;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeMirror;
+
+import org.androidannotations.annotations.EFragment;
+import org.androidannotations.helper.ActionBarSherlockHelper;
+import org.androidannotations.helper.AnnotationHelper;
+import org.androidannotations.helper.OrmLiteHelper;
+import org.androidannotations.process.ProcessHolder;
+
 import com.sun.codemodel.JBlock;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JClassAlreadyExistsException;
@@ -28,29 +51,6 @@
 import com.sun.codemodel.JTypeVar;
 import com.sun.codemodel.JVar;
 
-import org.androidannotations.annotations.EFragment;
-import org.androidannotations.helper.ActionBarSherlockHelper;
-import org.androidannotations.helper.AnnotationHelper;
-import org.androidannotations.helper.OrmLiteHelper;
-import org.androidannotations.process.ProcessHolder;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.type.TypeMirror;
-
-import static com.sun.codemodel.JExpr.FALSE;
-import static com.sun.codemodel.JExpr.TRUE;
-import static com.sun.codemodel.JExpr._new;
-import static com.sun.codemodel.JExpr._null;
-import static com.sun.codemodel.JExpr._super;
-import static com.sun.codemodel.JExpr.invoke;
-import static com.sun.codemodel.JExpr.ref;
-import static com.sun.codemodel.JMod.PRIVATE;
-import static com.sun.codemodel.JMod.PUBLIC;
-import static com.sun.codemodel.JMod.STATIC;
-
 public class EFragmentHolder extends EComponentWithViewSupportHolder implements HasInstanceState, HasOptionsMenu, HasOnActivityResult, HasReceiverRegistration {
 
 	private JFieldVar contentView;
@@ -256,8 +256,9 @@ private void setOnCreateView() {
 
 		JBlock body = onCreateView.body();
 
-		if (!forceInjection)
+		if (!forceInjection) {
 			body.assign(contentView, _super().invoke(onCreateView).arg(inflater).arg(container).arg(savedInstanceState));
+		}
 
 		setContentViewBlock = body.block();
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EIntentServiceHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EIntentServiceHolder.java
index 774239f..c64ccae 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EIntentServiceHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EIntentServiceHolder.java
@@ -30,50 +30,50 @@
 
 public class EIntentServiceHolder extends EServiceHolder {
 
-    private JVar onHandleIntentIntent;
-    private JMethod onHandleIntentMethod;
-    private JBlock onHandleIntentBody;
-    private JVar onHandleIntentIntentAction;
+	private JVar onHandleIntentIntent;
+	private JMethod onHandleIntentMethod;
+	private JBlock onHandleIntentBody;
+	private JVar onHandleIntentIntentAction;
 
-    public EIntentServiceHolder(ProcessHolder processHolder, TypeElement annotatedElement, AndroidManifest androidManifest) throws Exception {
-        super(processHolder, annotatedElement, androidManifest);
-    }
+	public EIntentServiceHolder(ProcessHolder processHolder, TypeElement annotatedElement, AndroidManifest androidManifest) throws Exception {
+		super(processHolder, annotatedElement, androidManifest);
+	}
 
-    public JVar getOnHandleIntentIntent() {
-        if (onHandleIntentIntent == null) {
-            createOnHandleIntent();
-        }
-        return onHandleIntentIntent;
-    }
+	public JVar getOnHandleIntentIntent() {
+		if (onHandleIntentIntent == null) {
+			createOnHandleIntent();
+		}
+		return onHandleIntentIntent;
+	}
 
-    public JMethod getOnHandleIntentMethod() {
-        if (onHandleIntentMethod == null) {
-            createOnHandleIntent();
-        }
-        return onHandleIntentMethod;
-    }
+	public JMethod getOnHandleIntentMethod() {
+		if (onHandleIntentMethod == null) {
+			createOnHandleIntent();
+		}
+		return onHandleIntentMethod;
+	}
 
-    public JBlock getOnHandleIntentBody() {
-        if (onHandleIntentBody == null) {
-            createOnHandleIntent();
-        }
-        return onHandleIntentBody;
-    }
+	public JBlock getOnHandleIntentBody() {
+		if (onHandleIntentBody == null) {
+			createOnHandleIntent();
+		}
+		return onHandleIntentBody;
+	}
 
-    public JVar getOnHandleIntentIntentAction() {
-        if (onHandleIntentIntentAction == null) {
-            createOnHandleIntent();
-        }
-        return onHandleIntentIntentAction;
-    }
+	public JVar getOnHandleIntentIntentAction() {
+		if (onHandleIntentIntentAction == null) {
+			createOnHandleIntent();
+		}
+		return onHandleIntentIntentAction;
+	}
 
-    private void createOnHandleIntent() {
-        onHandleIntentMethod = generatedClass.method(PUBLIC, codeModel().VOID, "onHandleIntent");
-        onHandleIntentIntent = onHandleIntentMethod.param(classes().INTENT, "intent");
-        onHandleIntentMethod.annotate(Override.class);
-        onHandleIntentBody = onHandleIntentMethod.body();
-        codeModelHelper.callSuperMethod(onHandleIntentMethod, this, onHandleIntentBody);
-        JInvocation getActionInvocation = JExpr.invoke(onHandleIntentIntent, "getAction");
-        onHandleIntentIntentAction = onHandleIntentBody.decl(classes().STRING, "action", getActionInvocation);
-    }
+	private void createOnHandleIntent() {
+		onHandleIntentMethod = generatedClass.method(PUBLIC, codeModel().VOID, "onHandleIntent");
+		onHandleIntentIntent = onHandleIntentMethod.param(classes().INTENT, "intent");
+		onHandleIntentMethod.annotate(Override.class);
+		onHandleIntentBody = onHandleIntentMethod.body();
+		codeModelHelper.callSuperMethod(onHandleIntentMethod, this, onHandleIntentBody);
+		JInvocation getActionInvocation = JExpr.invoke(onHandleIntentIntent, "getAction");
+		onHandleIntentIntentAction = onHandleIntentBody.decl(classes().STRING, "action", getActionInvocation);
+	}
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EServiceHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EServiceHolder.java
index eb0ebf6..b420384 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EServiceHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EServiceHolder.java
@@ -15,23 +15,28 @@
  */
 package org.androidannotations.holder;
 
-import com.sun.codemodel.*;
+import static com.sun.codemodel.JExpr._this;
+import static com.sun.codemodel.JMod.PRIVATE;
+import static com.sun.codemodel.JMod.PUBLIC;
+
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.helper.AndroidManifest;
 import org.androidannotations.helper.IntentBuilder;
 import org.androidannotations.helper.OrmLiteHelper;
 import org.androidannotations.helper.ServiceIntentBuilder;
 import org.androidannotations.process.ProcessHolder;
 
-import javax.lang.model.element.TypeElement;
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JMethod;
 import javax.lang.model.type.TypeMirror;
 
-import static com.sun.codemodel.JExpr._this;
-import static com.sun.codemodel.JMod.PRIVATE;
-import static com.sun.codemodel.JMod.PUBLIC;
-
 public class EServiceHolder extends EComponentHolder implements HasIntentBuilder, HasReceiverRegistration {
 
-    private ServiceIntentBuilder intentBuilder;
+	private ServiceIntentBuilder intentBuilder;
 	private JDefinedClass intentBuilderClass;
 	private ReceiverRegistrationHolder receiverRegistrationHolder;
 	private JBlock onDestroyBeforeSuperBlock;
@@ -39,16 +44,16 @@
 	public EServiceHolder(ProcessHolder processHolder, TypeElement annotatedElement, AndroidManifest androidManifest) throws Exception {
 		super(processHolder, annotatedElement);
 		receiverRegistrationHolder = new ReceiverRegistrationHolder(this);
-        intentBuilder = new ServiceIntentBuilder(this, androidManifest);
-        intentBuilder.build();
+		intentBuilder = new ServiceIntentBuilder(this, androidManifest);
+		intentBuilder.build();
 	}
 
-    @Override
-    public IntentBuilder getIntentBuilder() {
-        return intentBuilder;
-    }
+	@Override
+	public IntentBuilder getIntentBuilder() {
+		return intentBuilder;
+	}
 
-    @Override
+	@Override
 	protected void setContextRef() {
 		contextRef = _this();
 	}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EViewHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EViewHolder.java
index a0111ee..c710a5b 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EViewHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/EViewHolder.java
@@ -50,15 +50,13 @@
 			+ "The mAlreadyInflated_ hack is needed because of an Android bug\n" // +
 			+ "which leads to infinite calls of onFinishInflate()\n" //
 			+ "when inflating a layout with a parent and using\n" //
-			+ "the <merge /> tag." //
-	;
+			+ "the <merge /> tag.";
 
 	private static final String SUPPRESS_WARNING_COMMENT = "" //
 			+ "We use @SuppressWarning here because our java code\n" //
 			+ "generator doesn't know that there is no need\n" //
 			+ "to import OnXXXListeners from View as we already\n" //
-			+ "are in a View." //
-	;
+			+ "are in a View.";
 
 	protected JBlock initBody;
 	protected JMethod onFinishInflate;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/FoundViewHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/FoundViewHolder.java
index e115d35..a9ae23b 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/FoundViewHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/FoundViewHolder.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.holder;
 
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr.cast;
+
 import com.sun.codemodel.JBlock;
 import com.sun.codemodel.JClass;
 import com.sun.codemodel.JExpression;
 
-import static com.sun.codemodel.JExpr._null;
-import static com.sun.codemodel.JExpr.cast;
-
 public class FoundViewHolder {
 
 	private GeneratedClassHolder holder;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/HasIntentBuilder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/HasIntentBuilder.java
index 1d5edcf..dba4aba 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/HasIntentBuilder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/HasIntentBuilder.java
@@ -15,14 +15,15 @@
  */
 package org.androidannotations.holder;
 
-import com.sun.codemodel.JDefinedClass;
 import org.androidannotations.helper.IntentBuilder;
 
+import com.sun.codemodel.JDefinedClass;
+
 public interface HasIntentBuilder extends GeneratedClassHolder {
 
-    public IntentBuilder getIntentBuilder();
+	IntentBuilder getIntentBuilder();
 
-	public void setIntentBuilderClass(JDefinedClass intentBuilderClass);
+	void setIntentBuilderClass(JDefinedClass intentBuilderClass);
 
-	public JDefinedClass getIntentBuilderClass();
+	JDefinedClass getIntentBuilderClass();
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/OnActivityResultHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/OnActivityResultHolder.java
index 3900e57..5fefd24 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/OnActivityResultHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/OnActivityResultHolder.java
@@ -15,6 +15,13 @@
  */
 package org.androidannotations.holder;
 
+import static com.sun.codemodel.JExpr._super;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.androidannotations.process.ProcessHolder;
+
 import com.sun.codemodel.JBlock;
 import com.sun.codemodel.JCase;
 import com.sun.codemodel.JCodeModel;
@@ -23,11 +30,6 @@
 import com.sun.codemodel.JMod;
 import com.sun.codemodel.JSwitch;
 import com.sun.codemodel.JVar;
-import org.androidannotations.process.ProcessHolder;
-
-import java.util.HashMap;
-
-import static com.sun.codemodel.JExpr._super;
 
 public class OnActivityResultHolder {
 
@@ -38,7 +40,7 @@
 	private JVar requestCodeParam;
 	private JVar dataParam;
 	private JVar resultCodeParam;
-	private HashMap<Integer, JBlock> caseBlocks = new HashMap<Integer, JBlock>();
+	private Map<Integer, JBlock> caseBlocks = new HashMap<Integer, JBlock>();
 
 	public OnActivityResultHolder(EComponentHolder holder) {
 		this.holder = holder;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/ReceiverRegistrationHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/ReceiverRegistrationHolder.java
index d787d55..2f7616f 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/ReceiverRegistrationHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/ReceiverRegistrationHolder.java
@@ -15,16 +15,24 @@
  */
 package org.androidannotations.holder;
 
-import com.sun.codemodel.*;
-import org.androidannotations.helper.ModelConstants;
-import org.androidannotations.process.ProcessHolder;
-
-import java.util.*;
-
 import static com.sun.codemodel.JExpr._new;
 import static com.sun.codemodel.JMod.FINAL;
 import static com.sun.codemodel.JMod.PRIVATE;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import org.androidannotations.helper.ModelConstants;
+import org.androidannotations.process.ProcessHolder;
+
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldVar;
+
 public class ReceiverRegistrationHolder {
 
 	private EComponentHolder holder;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/RoboGuiceHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/RoboGuiceHolder.java
index 615c64b..a6e8a53 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/RoboGuiceHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/RoboGuiceHolder.java
@@ -23,6 +23,9 @@
 public class RoboGuiceHolder {
 
 	private EActivityHolder holder;
+
+	// TODO access for these fields should be refactored
+
 	protected JFieldVar scopedObjects;
 	protected JFieldVar scope;
 	protected JFieldVar eventManager;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/SharedPrefHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/SharedPrefHolder.java
index 36f9b98..38d3f2c 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/SharedPrefHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/holder/SharedPrefHolder.java
@@ -15,7 +15,6 @@
  */
 package org.androidannotations.holder;
 
-import com.sun.codemodel.*;
 import static com.sun.codemodel.JMod.FINAL;
 import static com.sun.codemodel.JMod.PUBLIC;
 import static com.sun.codemodel.JMod.STATIC;
@@ -38,6 +37,18 @@
 import org.androidannotations.helper.ModelConstants;
 import org.androidannotations.process.ProcessHolder;
 
+import com.sun.codemodel.JBlock;
+import com.sun.codemodel.JClass;
+import com.sun.codemodel.JClassAlreadyExistsException;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JExpr;
+import com.sun.codemodel.JExpression;
+import com.sun.codemodel.JFieldVar;
+import com.sun.codemodel.JInvocation;
+import com.sun.codemodel.JMethod;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JVar;
+
 public class SharedPrefHolder extends BaseGeneratedClassHolder {
 
 	private static class EditorFieldHolder {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerContext.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerContext.java
index 4b2f7dc..0bdfbce 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerContext.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerContext.java
@@ -31,21 +31,21 @@
 
 public class LoggerContext {
 
-	private static LoggerContext INSTANCE = null;
+	private static LoggerContext instance = null;
 	private static final Level DEFAULT_LEVEL = Level.DEBUG;
 
 	private Level currentLevel = DEFAULT_LEVEL;
 	private List<Appender> appenders = new ArrayList<Appender>();
 
 	public static LoggerContext getInstance() {
-		if (INSTANCE == null) {
+		if (instance == null) {
 			synchronized (LoggerContext.class) {
-				if (INSTANCE == null) {
-					INSTANCE = new LoggerContext();
+				if (instance == null) {
+					instance = new LoggerContext();
 				}
 			}
 		}
-		return INSTANCE;
+		return instance;
 	}
 
 	LoggerContext() {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerFactory.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerFactory.java
index 9513668..91447f7 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerFactory.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/LoggerFactory.java
@@ -22,6 +22,9 @@
 
 	private static final Map<String, Logger> LOGGER_CACHE = new HashMap<String, Logger>();
 
+	private LoggerFactory() {
+	}
+
 	public static Logger getLogger(Class<?> clazz) {
 		return getLogger(simpleLoggerName(clazz));
 	}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/appender/FileAppender.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/appender/FileAppender.java
index c16b9ef..6b87bf0 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/appender/FileAppender.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/logger/appender/FileAppender.java
@@ -15,20 +15,21 @@
  */
 package org.androidannotations.logger.appender;
 
-import org.androidannotations.helper.FileHelper;
-import org.androidannotations.logger.Level;
-import org.androidannotations.logger.LoggerContext;
-import org.androidannotations.logger.formatter.FormatterFull;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
 
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.tools.Diagnostic.Kind;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
+
+import org.androidannotations.helper.FileHelper;
+import org.androidannotations.logger.Level;
+import org.androidannotations.logger.LoggerContext;
+import org.androidannotations.logger.formatter.FormatterFull;
 
 public class FileAppender extends Appender {
 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ModelProcessor.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ModelProcessor.java
index ae35123..68f7bbc 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ModelProcessor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ModelProcessor.java
@@ -15,7 +15,15 @@
  */
 package org.androidannotations.process;
 
-import com.sun.codemodel.JCodeModel;
+import java.util.Set;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.NestingKind;
+import javax.lang.model.element.TypeElement;
+
 import org.androidannotations.exception.ProcessingException;
 import org.androidannotations.handler.AnnotationHandler;
 import org.androidannotations.handler.AnnotationHandlers;
@@ -26,10 +34,7 @@
 import org.androidannotations.model.AnnotationElements;
 import org.androidannotations.model.AnnotationElements.AnnotatedAndRootElements;
 
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.*;
-import java.util.Set;
-
+import com.sun.codemodel.JCodeModel;
 
 public class ModelProcessor {
 
@@ -69,10 +74,14 @@ public ProcessResult process(AnnotationElements validatedModel) throws Processin
 		LOGGER.info("Processing root elements");
 
 		/*
-		 * We generate top classes then inner classes, then inner classes of inner classes, etc...
-		 * until there is no more classes to generate.
+		 * We generate top classes then inner classes, then inner classes of
+		 * inner classes, etc... until there is no more classes to generate.
 		 */
-		while (generateElements(validatedModel,processHolder));
+		while (generateElements(validatedModel, processHolder)) {
+			// CHECKSTYLE:OFF
+			;
+			// CHECKSTYLE:ON
+		}
 
 		LOGGER.info("Processing enclosed elements");
 
@@ -179,7 +188,7 @@ private boolean generateElements(AnnotationElements validatedModel, ProcessHolde
 							generatingAnnotationHandler.process(annotatedElement, generatedClassHolder);
 						}
 					}
-				}  else {
+				} else {
 					LOGGER.trace("Skip element {} because it's abstract", annotatedElement);
 				}
 			}
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ProcessHolder.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ProcessHolder.java
index c9be761..d371029 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ProcessHolder.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/process/ProcessHolder.java
@@ -41,6 +41,7 @@
 
 public class ProcessHolder {
 
+	// CHECKSTYLE:OFF
 	public class Classes {
 
 		/*
@@ -184,6 +185,8 @@
 		public final JClass NESTED_RUNTIME_EXCEPTION = refClass(CanonicalNameConstants.NESTED_RUNTIME_EXCEPTION);
 	}
 
+	// CHECKSTYLE:ON
+
 	private final Map<Element, GeneratedClassHolder> generatedClassHolders = new HashMap<Element, GeneratedClassHolder>();
 
 	private final ProcessingEnvironment processingEnvironment;
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/IRInnerClass.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/IRInnerClass.java
index 6a3dd18..68edc16 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/IRInnerClass.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/IRInnerClass.java
@@ -33,6 +33,6 @@
 
 	JFieldRef getIdStaticRef(String name, ProcessHolder holder);
 
-	final IRInnerClass EMPTY_R_INNER_CLASS = new RInnerClass(null);
+	IRInnerClass EMPTY_R_INNER_CLASS = new RInnerClass(null);
 
 }
diff --git a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/ManifestPackageExtractor.java b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/ManifestPackageExtractor.java
index 15bf75c..b8f92a6 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/ManifestPackageExtractor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/org/androidannotations/rclass/ManifestPackageExtractor.java
@@ -20,13 +20,13 @@
 
 public class ManifestPackageExtractor {
 
-	private static final Pattern pattern = Pattern.compile("package\\s*=\\s*\"([^\"]+)\"");
+	private static final Pattern PATTERN = Pattern.compile("package\\s*=\\s*\"([^\"]+)\"");
 	private Matcher matcher;
 	private boolean matches;
 
 	public ManifestPackageExtractor(String manifestLine) {
 		if (manifestLine != null) {
-			matcher = pattern.matcher(manifestLine);
+			matcher = PATTERN.matcher(manifestLine);
 			matches = matcher.find();
 		} else {
 			matches = false;
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/ebean/SomeGenericBean.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/ebean/SomeGenericBean.java
index b16e608..267e824 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/ebean/SomeGenericBean.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/ebean/SomeGenericBean.java
@@ -15,12 +15,12 @@
  */
 package org.androidannotations.ebean;
 
+import java.util.List;
+
 import org.androidannotations.annotations.Background;
 import org.androidannotations.annotations.EBean;
 import org.androidannotations.annotations.UiThread;
 
-import java.util.List;
-
 @EBean
 public class SomeGenericBean<T> {
 
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroup.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroup.java
index 34731ae..6186dc4 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroup.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroup.java
@@ -15,11 +15,12 @@
  */
 package org.androidannotations.eviewgroup;
 
-import android.content.Context;
-import android.widget.FrameLayout;
 import org.androidannotations.annotations.EViewGroup;
 import org.androidannotations.annotations.UiThread;
 
+import android.content.Context;
+import android.widget.FrameLayout;
+
 @EViewGroup
 public class SomeGenericViewGroup<T extends CharSequence> extends FrameLayout {
 
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroupExt.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroupExt.java
index 942f9a2..19aa22a 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroupExt.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/eviewgroup/SomeGenericViewGroupExt.java
@@ -15,10 +15,11 @@
  */
 package org.androidannotations.eviewgroup;
 
-import android.content.Context;
 import org.androidannotations.annotations.EViewGroup;
 import org.androidannotations.annotations.UiThread;
 
+import android.content.Context;
+
 @EViewGroup
 public class SomeGenericViewGroupExt extends SomeGenericViewGroup<String> {
 
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithInvalidRegisterAt.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithInvalidRegisterAt.java
index 64547fd..a63a496 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithInvalidRegisterAt.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithInvalidRegisterAt.java
@@ -15,10 +15,11 @@
  */
 package org.androidannotations.receiver;
 
-import android.app.Activity;
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.Receiver;
 
+import android.app.Activity;
+
 @EActivity
 public class ActivityWithInvalidRegisterAt extends Activity {
 
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithTwoSameNameMethod.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithTwoSameNameMethod.java
index c59a643..0e23c82 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithTwoSameNameMethod.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithTwoSameNameMethod.java
@@ -15,11 +15,12 @@
  */
 package org.androidannotations.receiver;
 
-import android.app.Activity;
-import android.content.Intent;
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.Receiver;
 
+import android.app.Activity;
+import android.content.Intent;
+
 @EActivity
 public class ActivityWithTwoSameNameMethod extends Activity {
 
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithValidReceiver.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithValidReceiver.java
index 3041c22..2f64896 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithValidReceiver.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ActivityWithValidReceiver.java
@@ -15,11 +15,12 @@
  */
 package org.androidannotations.receiver;
 
-import android.app.Activity;
-import android.content.Intent;
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.Receiver;
 
+import android.app.Activity;
+import android.content.Intent;
+
 @EActivity
 public class ActivityWithValidReceiver extends Activity {
 
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/FragmentWithValidReceiver.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/FragmentWithValidReceiver.java
index 2bbc47c..0af7f54 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/FragmentWithValidReceiver.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/FragmentWithValidReceiver.java
@@ -15,11 +15,12 @@
  */
 package org.androidannotations.receiver;
 
-import android.app.Fragment;
-import android.content.Intent;
 import org.androidannotations.annotations.EFragment;
 import org.androidannotations.annotations.Receiver;
 
+import android.app.Fragment;
+import android.content.Intent;
+
 @EFragment
 public class FragmentWithValidReceiver extends Fragment {
 
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ReceiverRegistrationTest.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ReceiverRegistrationTest.java
index 9e900b0..fba9a26 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ReceiverRegistrationTest.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ReceiverRegistrationTest.java
@@ -15,13 +15,13 @@
  */
 package org.androidannotations.receiver;
 
+import java.io.IOException;
+
 import org.androidannotations.AndroidAnnotationProcessor;
 import org.androidannotations.utils.AAProcessorTestHelper;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.IOException;
-
 public class ReceiverRegistrationTest extends AAProcessorTestHelper {
 
 	@Before
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithInvalidReceiver.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithInvalidReceiver.java
index f1ef55c..d2462ce 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithInvalidReceiver.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithInvalidReceiver.java
@@ -15,11 +15,12 @@
  */
 package org.androidannotations.receiver;
 
+import org.androidannotations.annotations.EService;
+import org.androidannotations.annotations.Receiver;
+
 import android.app.Service;
 import android.content.Intent;
 import android.os.IBinder;
-import org.androidannotations.annotations.EService;
-import org.androidannotations.annotations.Receiver;
 
 @EService
 public class ServiceWithInvalidReceiver extends Service {
diff --git a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithValidReceiver.java b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithValidReceiver.java
index 4b7a1ee..1147075 100644
--- a/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithValidReceiver.java
+++ b/AndroidAnnotations/androidannotations/src/test/java/org/androidannotations/receiver/ServiceWithValidReceiver.java
@@ -15,11 +15,12 @@
  */
 package org.androidannotations.receiver;
 
+import org.androidannotations.annotations.EService;
+import org.androidannotations.annotations.Receiver;
+
 import android.app.Service;
 import android.content.Intent;
 import android.os.IBinder;
-import org.androidannotations.annotations.EService;
-import org.androidannotations.annotations.Receiver;
 
 @EService
 public class ServiceWithValidReceiver extends Service {
diff --git a/AndroidAnnotations/checkstyle-checks.xml b/AndroidAnnotations/checkstyle-checks.xml
new file mode 100644
index 0000000..cf3d012
--- /dev/null
+++ b/AndroidAnnotations/checkstyle-checks.xml
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
+
+<module name="Checker">
+	<property name="severity" value="error" />
+	<module name="TreeWalker">
+		<property name="tabWidth" value="4" />
+		<module name="FileContentsHolder" />
+		<module name="AnnotationUseStyle" />
+		<module name="ClassTypeParameterName" />
+		<module name="ConstantName" />
+		<module name="LocalVariableName" />
+		<module name="MemberName" />
+		<module name="MethodName" />
+		<module name="MethodTypeParameterName" />
+		<module name="PackageName" />
+		<module name="ParameterName" />
+		<module name="StaticVariableName" />
+		<module name="TypeName" />
+		<module name="MissingDeprecated" />
+		<module name="MissingOverride" />
+		<module name="AvoidStarImport" />
+		<module name="IllegalImport" />
+		<!-- unfortunetaly could not synchronize with eclipse -->
+		<!-- <module name="ImportOrder"> <property name="separated" value="true"/> 
+			<property name="groups" value="java,javax,/com\..*/,/org\..*/,android"/> 
+			<property name="option" value="top"/> </module> -->
+		<module name="RedundantImport" />
+		<module name="UnusedImports" />
+
+		<module name="MethodLength" />
+		<module name="ParameterNumber" />
+		<module name="OuterTypeNumber" />
+		<module name="MethodCount" />
+		<module name="EmptyForInitializerPad" />
+		<module name="EmptyForIteratorPad" />
+		<module name="NoWhitespaceAfter">
+			<property name="tokens"
+				value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
+		</module>
+		<module name="NoWhitespaceBefore" />
+		<module name="OperatorWrap" />
+		<module name="MethodParamPad" />
+		<module name="ParenPad" />
+		<module name="TypecastParenPad" />
+		<module name="WhitespaceAfter" />
+		<module name="WhitespaceAround">
+			<property name="tokens"
+				value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
+		</module>
+		<module name="RedundantModifier" />
+		<module name="AvoidNestedBlocks">
+			<property name="allowInSwitchCase" value="true" />
+		</module>
+		<module name="LeftCurly">
+			<property name="maxLineLength" value="130" />
+		</module>
+		<module name="NeedBraces" />
+		<module name="RightCurly" />
+		<module name="CovariantEquals" />
+		<module name="DefaultComesLast" />
+		<module name="EmptyStatement" />
+		<module name="EqualsHashCode" />
+		<module name="FallThrough" />
+		<module name="IllegalThrows" />
+		<module name="IllegalType">
+			<property name="illegalClassNames	"
+				value="java.util.GregorianCalendar, java.util.Hashtable, java.util.HashSet, java.util.HashMap, java.util.LinkedList, java.util.LinkedHashMap, java.util.LinkedHashSet, java.util.TreeSet, java.util.TreeMap, java.util.Vector" />
+		</module>
+		<module name="InnerAssignment" />
+		<module name="JUnitTestCase" />
+		<module name="ModifiedControlVariable" />
+		<module name="MultipleVariableDeclarations" />
+		<module name="NestedForDepth">
+			<property name="max" value="2" />
+		</module>
+		<module name="NestedIfDepth"> <!-- this is too high, we should refactor those parts -->
+			<property name="max" value="5" />
+		</module>
+		<module name="NestedTryDepth" />
+		<module name="NoClone" />
+		<module name="NoFinalizer" />
+		<module name="PackageDeclaration" />
+		<module name="SimplifyBooleanExpression" />
+		<module name="SimplifyBooleanReturn" />
+		<module name="StringLiteralEquality" />
+		<module name="ArrayTrailingComma" />
+		<module name="UnnecessaryParentheses" />
+		<module name="OneStatementPerLine" />
+		<module name="HideUtilityClassConstructor" />
+		<module name="InterfaceIsType" />
+		<module name="MutableException" />
+		<module name="ThrowsCount">
+			<property name="max" value="2" />
+		</module>
+		<!-- we should really enable the following -->
+		<!-- <module name="VisibilityModifier"> <property name="packageAllowed" 
+			value="true"/> <property name="protectedAllowed" value="true"/> </module> -->
+		<module name="ArrayTypeStyle" />
+		<module name="Indentation">
+			<property name="caseIndent" value="0" />
+		</module>
+
+		<module name="RegexpSinglelineJava">
+			<property name="format" value="^\t* +\t*\S" />
+			<property name="message"
+				value="Line has leading space characters; indentation should be performed with tabs only." />
+			<property name="ignoreComments" value="true" />
+		</module>
+		<module name="UpperEll" />
+		<module name="OuterTypeFilename" />
+		<module name="OuterTypeNumber" />
+	</module>
+	<module name="FileLength" />
+	<module name="SuppressionCommentFilter">
+	</module>
+</module>
diff --git a/AndroidAnnotations/functional-test-1-5/pom.xml b/AndroidAnnotations/functional-test-1-5/pom.xml
index bd5d12f..c1aa32c 100644
--- a/AndroidAnnotations/functional-test-1-5/pom.xml
+++ b/AndroidAnnotations/functional-test-1-5/pom.xml
@@ -15,6 +15,11 @@
 	<properties>
 		<jackson-version>1.9.11</jackson-version>
 		<simple-version>2.7.1</simple-version>
+		<spring-android-version>1.0.0.RELEASE</spring-android-version>
+		<jackson-version>1.9.6</jackson-version>
+		<simple-version>2.4.1</simple-version>
+		<android-rome-version>1.0.0-r2</android-rome-version>
+		<checkstyle.excludes>**/R.java,**/BuildConfig.java,</checkstyle.excludes> 
 	</properties>
 	
 	<dependencies>
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/app/SherlockFragment.java b/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/app/SherlockFragment.java
index 8ad350c..c1e7d9e 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/app/SherlockFragment.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/app/SherlockFragment.java
@@ -21,38 +21,37 @@
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 
-public class SherlockFragment extends Fragment{
-
-	
-	  @Override
-	    public final void onCreateOptionsMenu(android.view.Menu menu, android.view.MenuInflater inflater) {
-	        onCreateOptionsMenu((Menu) null, null);
-	    }
-
-	    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-	    }
-	    
-	    @Override
-	    public final void onPrepareOptionsMenu(android.view.Menu menu) {
-	        onPrepareOptionsMenu((Menu) null);
-	    }
-
-	    public void onPrepareOptionsMenu(Menu menu) {
-	    }
-
-	    @Override
-	    public final boolean onOptionsItemSelected(final android.view.MenuItem item) {
-	        return onOptionsItemSelected(new MenuItem() {
-				
-				@Override
-				public int getItemId() {
-					return item.getItemId();
-				}
-			});
-	    }
-
-	    public boolean onOptionsItemSelected(MenuItem item) {
-	        return false;
-	    }
-	
+public class SherlockFragment extends Fragment {
+
+	@Override
+	public final void onCreateOptionsMenu(android.view.Menu menu, android.view.MenuInflater inflater) {
+		onCreateOptionsMenu((Menu) null, null);
+	}
+
+	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+	}
+
+	@Override
+	public final void onPrepareOptionsMenu(android.view.Menu menu) {
+		onPrepareOptionsMenu((Menu) null);
+	}
+
+	public void onPrepareOptionsMenu(Menu menu) {
+	}
+
+	@Override
+	public final boolean onOptionsItemSelected(final android.view.MenuItem item) {
+		return onOptionsItemSelected(new MenuItem() {
+
+			@Override
+			public int getItemId() {
+				return item.getItemId();
+			}
+		});
+	}
+
+	public boolean onOptionsItemSelected(MenuItem item) {
+		return false;
+	}
+
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/view/Menu.java b/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/view/Menu.java
index e0197f1..7b41bd4 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/view/Menu.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/com/actionbarsherlock/view/Menu.java
@@ -17,6 +17,6 @@
 
 public interface Menu {
 
-	public MenuItem findItem(int id);
-	
+	MenuItem findItem(int id);
+
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ActivityWithGenerics.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ActivityWithGenerics.java
index f73a683..7a12483 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ActivityWithGenerics.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ActivityWithGenerics.java
@@ -26,22 +26,23 @@
 @EActivity
 public class ActivityWithGenerics extends Activity {
 
-    //@UiThread
-    //<T, S extends Number & List<String>> void emptyUiMethod(T param, S param2) {
-    //}
+	// @UiThread
+	// <T, S extends Number & List<String>> void emptyUiMethod(T param, S
+	// param2) {
+	// }
 
-    @UiThread
-    <T, S extends Number> void emptyUiMethod(List<? extends T> param, List<? super S> param2) {
-    }
+	@UiThread
+	<T, S extends Number> void emptyUiMethod(List<? extends T> param, List<? super S> param2) {
+	}
 
 	@UiThread
 	<T, S extends Number> void emptyUiMethod(T param) {
 
 	}
-	
+
 	@Background
 	<T, S extends Number> void emptyBackgroundMethod(T param) {
-		
+
 	}
 
 	@Background
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultActivity.java
index ef55ce7..aab6599 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultActivity.java
@@ -15,13 +15,14 @@
  */
 package org.androidannotations.test15;
 
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
+import java.util.ArrayList;
+
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.OnActivityResult;
 
-import java.util.ArrayList;
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
 
 @EActivity(R.layout.views_injected)
 public class AwaitingResultActivity extends Activity {
@@ -68,10 +69,12 @@ void onResultWithIntegerResultCode(Integer resultCodeInteger) {
 		onResultWithIntegerResultCodeCalled = true;
 	}
 
+	// CHECKSTYLE:OFF
+
 	@OnActivityResult(FORTH_REQUEST)
-	void onResultWithResultExtra(int resultCode, @OnActivityResult.Extra("value") int i, @OnActivityResult.Extra String s,
-	                             @OnActivityResult.Extra Uri uri, @OnActivityResult.Extra ArrayList<Uri> uris,
-	                             @OnActivityResult.Extra String[] strings) {
+	void onResultWithResultExtra(int resultCode, @OnActivityResult.Extra("value") int i, @OnActivityResult.Extra String s, @OnActivityResult.Extra Uri uri, @OnActivityResult.Extra ArrayList<Uri> uris, @OnActivityResult.Extra String[] strings) {
 		onResultWithResultExtraCodeCalled = true;
 	}
+
+	// CHECKSTYLE:ON
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultFragment.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultFragment.java
index daf0642..9e36d03 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultFragment.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/AwaitingResultFragment.java
@@ -15,12 +15,14 @@
  */
 package org.androidannotations.test15;
 
-import android.support.v4.app.Fragment;
-import android.content.Intent;
-import android.net.Uri;
+import java.util.ArrayList;
+
 import org.androidannotations.annotations.EFragment;
 import org.androidannotations.annotations.OnActivityResult;
-import java.util.ArrayList;
+
+import android.content.Intent;
+import android.net.Uri;
+import android.support.v4.app.Fragment;
 
 @EFragment(R.layout.views_injected)
 public class AwaitingResultFragment extends Fragment {
@@ -30,12 +32,12 @@
 	private static final int THIRD_REQUEST = 33;
 	private static final int FORTH_REQUEST = 44;
 
-	boolean	onResultCalled = false;
-	boolean	onResultWithDataCalled = false;
-	boolean	onActivityResultWithResultCodeAndDataCalled = false;
-	boolean	onActivityResultWithDataAndResultCodeCalled = false;
-	boolean	onResultWithIntResultCodeCalled = false;
-	boolean	onResultWithIntegerResultCodeCalled = false;
+	boolean onResultCalled = false;
+	boolean onResultWithDataCalled = false;
+	boolean onActivityResultWithResultCodeAndDataCalled = false;
+	boolean onActivityResultWithDataAndResultCodeCalled = false;
+	boolean onResultWithIntResultCodeCalled = false;
+	boolean onResultWithIntegerResultCodeCalled = false;
 
 	@OnActivityResult(FIRST_REQUEST)
 	void onResult() {
@@ -68,8 +70,6 @@ void onResultWithIntegerResultCode(Integer resultCodeInteger) {
 	}
 
 	@OnActivityResult(FORTH_REQUEST)
-	void onResultWithResultExtra(int resultCode, @OnActivityResult.Extra("value") int i, @OnActivityResult.Extra String s,
-	                             @OnActivityResult.Extra Uri uri, @OnActivityResult.Extra ArrayList<Uri> uris,
-	                             @OnActivityResult.Extra String[] strings) {
+	void onResultWithResultExtra(int resultCode, @OnActivityResult.Extra("value") int i, @OnActivityResult.Extra String s, @OnActivityResult.Extra Uri uri, @OnActivityResult.Extra ArrayList<Uri> uris, @OnActivityResult.Extra String[] strings) {
 	}
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/CustomData.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/CustomData.java
index 1068df6..1dfcf03 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/CustomData.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/CustomData.java
@@ -31,24 +31,29 @@ public CustomData(String id) {
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
-		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		result = prime * result + (id == null ? 0 : id.hashCode());
 		return result;
 	}
 
 	@Override
 	public boolean equals(Object obj) {
-		if (this == obj)
+		if (this == obj) {
 			return true;
-		if (obj == null)
+		}
+		if (obj == null) {
 			return false;
-		if (getClass() != obj.getClass())
+		}
+		if (getClass() != obj.getClass()) {
 			return false;
+		}
 		CustomData other = (CustomData) obj;
 		if (id == null) {
-			if (other.id != null)
+			if (other.id != null) {
 				return false;
-		} else if (!id.equals(other.id))
+			}
+		} else if (!id.equals(other.id)) {
 			return false;
+		}
 		return true;
 	}
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/FragmentArguments.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/FragmentArguments.java
index 0ebee7d..4c7cd46 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/FragmentArguments.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/FragmentArguments.java
@@ -32,7 +32,7 @@
 public class FragmentArguments extends Fragment {
 
 	@FragmentArg("test")
-	Long nullWrappedLong = 42l;
+	Long nullWrappedLong = 42L;
 
 	@FragmentArg
 	boolean myBoolean;
@@ -178,8 +178,7 @@ void afterInject() {
 	}
 
 	static {
-		FragmentArguments_.builder().myBundle(null).myCharSequence(null)
-				.build();
+		FragmentArguments_.builder().myBundle(null).myCharSequence(null).build();
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ItemClicksHandledActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ItemClicksHandledActivity.java
index 2e4529e..f44460f 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ItemClicksHandledActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ItemClicksHandledActivity.java
@@ -15,14 +15,20 @@
  */
 package org.androidannotations.test15;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import org.androidannotations.annotations.AfterViews;
+import org.androidannotations.annotations.EActivity;
+import org.androidannotations.annotations.ItemClick;
+import org.androidannotations.annotations.ItemLongClick;
+import org.androidannotations.annotations.ItemSelect;
+import org.androidannotations.annotations.ViewById;
+
 import android.app.Activity;
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 import android.widget.Spinner;
-import org.androidannotations.annotations.*;
-
-import java.util.ArrayList;
-import java.util.List;
 
 @EActivity(R.layout.item_clicks_handled)
 public class ItemClicksHandledActivity extends Activity {
@@ -67,8 +73,7 @@
 
 	@AfterViews
 	void initView() {
-		adapter = ArrayAdapter.createFromResource(this, R.array.planets_array,
-				R.layout.simple_spinner_item);
+		adapter = ArrayAdapter.createFromResource(this, R.array.planets_array, R.layout.simple_spinner_item);
 		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 
 		parametrizedAdapter = new ArrayAdapter<ArrayList<String>>(this, android.R.layout.simple_list_item_1, stringLists());
@@ -97,7 +102,7 @@ public void listView() {
 	public void listViewWithArgument(String selectedItem) {
 		listViewWithArgumentSelectedItem = selectedItem;
 	}
-	
+
 	@ItemClick(R.id.listViewWithArgumentWithParameterType)
 	protected void listViewWithArgumentWithParameterType(ArrayList<String> item) {
 		listViewParametrizedItemClicked = true;
@@ -133,10 +138,10 @@ void listViewWithPositionItemSelected(boolean selected, int position) {
 	void listViewWithOneParamItemSelected(boolean selected) {
 		listViewWithOneParamItemSelected = selected;
 	}
-	
+
 	@ItemSelect(R.id.listView)
 	void onItemSelected(boolean selected, int position) {
-		
+
 	}
 
 	@ItemLongClick
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/MultiFindViewActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/MultiFindViewActivity.java
index 74cdea9..f89aee4 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/MultiFindViewActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/MultiFindViewActivity.java
@@ -15,11 +15,16 @@
  */
 package org.androidannotations.test15;
 
+import org.androidannotations.annotations.Click;
+import org.androidannotations.annotations.EActivity;
+import org.androidannotations.annotations.FocusChange;
+import org.androidannotations.annotations.LongClick;
+import org.androidannotations.annotations.ViewById;
+
 import android.app.Activity;
 import android.view.View;
 import android.widget.Button;
 import android.widget.TextView;
-import org.androidannotations.annotations.*;
 
 @EActivity(R.layout.views_injected)
 public class MultiFindViewActivity extends Activity {
@@ -33,7 +38,7 @@
 	@ViewById(R.id.myButton)
 	Button button;
 
-	@Click({ R.id.my_text_view, R.id.myButton})
+	@Click({ R.id.my_text_view, R.id.myButton })
 	void viewClicked() {
 
 	}
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ebean/ThreadControlledBean.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ebean/ThreadControlledBean.java
index d7ac208..8b87025 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ebean/ThreadControlledBean.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ebean/ThreadControlledBean.java
@@ -15,7 +15,11 @@
  */
 package org.androidannotations.test15.ebean;
 
-import org.androidannotations.annotations.*;
+import org.androidannotations.annotations.Background;
+import org.androidannotations.annotations.EBean;
+import org.androidannotations.annotations.SupposeBackground;
+import org.androidannotations.annotations.SupposeUiThread;
+import org.androidannotations.annotations.UiThread;
 
 @EBean
 public class ThreadControlledBean {
@@ -31,7 +35,7 @@ public void uiSupposed() {
 	public void backgroundSupposed() {
 	}
 
-	@SupposeBackground(serial = {SERIAL1, SERIAL2})
+	@SupposeBackground(serial = { SERIAL1, SERIAL2 })
 	public void serialBackgroundSupposed() {
 	}
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyFragment.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyFragment.java
index 279c4a3..80e1c28 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyFragment.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyFragment.java
@@ -15,10 +15,6 @@
  */
 package org.androidannotations.test15.efragment;
 
-import android.app.ActivityManager;
-import android.database.sqlite.SQLiteDatabase;
-import android.widget.TextView;
-
 import org.androidannotations.annotations.AfterInject;
 import org.androidannotations.annotations.AfterViews;
 import org.androidannotations.annotations.App;
@@ -32,25 +28,28 @@
 import org.androidannotations.annotations.ViewById;
 import org.androidannotations.test15.R;
 import org.androidannotations.test15.ormlite.DatabaseHelper;
-import org.androidannotations.test15.ormlite.User;
 import org.androidannotations.test15.ormlite.UserDao;
 import org.androidannotations.test15.roboguice.SampleRoboApplication;
 
+import android.app.ActivityManager;
+import android.database.sqlite.SQLiteDatabase;
+import android.widget.TextView;
+
 @EFragment(R.layout.injected)
 public class MyFragment extends AbstractFragment {
-	
+
 	@ViewById
 	TextView myTextView;
 
 	@App
 	SampleRoboApplication customApplication;
-	
+
 	@SystemService
 	ActivityManager activityManager;
 
 	@OrmLiteDao(helper = DatabaseHelper.class)
 	UserDao userDao;
-	
+
 	@Click
 	void myButton() {
 	}
@@ -62,7 +61,7 @@ void uiThread() {
 
 	@Trace
 	void trace() {
-		
+
 	}
 
 	@Transactional
@@ -73,10 +72,10 @@ void successfulTransaction(SQLiteDatabase db) {
 	void calledAfterInjection() {
 
 	}
-	
+
 	@AfterViews
 	void calledAfterViewInjection() {
 
 	}
-	
+
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyListFragment.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyListFragment.java
index c31204a..cd48b26 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyListFragment.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/efragment/MyListFragment.java
@@ -31,18 +31,18 @@
 @EFragment(R.layout.list_fragment)
 public class MyListFragment extends ListFragment {
 
-	boolean	listItemClicked = false;
+	boolean listItemClicked = false;
 
-	@ViewById(value=android.R.id.list)
+	@ViewById(value = android.R.id.list)
 	ListView list;
 
 	boolean didExecute;
 
 	@Override
-    public void onActivityCreated(Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
+	public void onActivityCreated(Bundle savedInstanceState) {
+		super.onActivityCreated(savedInstanceState);
 
-        ArrayAdapter<CharSequence> adapter;
+		ArrayAdapter<CharSequence> adapter;
 
 		adapter = ArrayAdapter.createFromResource(getActivity(), R.array.planets_array, R.layout.simple_spinner_item);
 		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
@@ -83,7 +83,7 @@ void notIgnored() {
 
 	@ItemClick
 	void listItemClicked(String string) {
-		listItemClicked  = true;
+		listItemClicked = true;
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eintentservice/IntentServiceHandledAction.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eintentservice/IntentServiceHandledAction.java
index 51b2083..c29fd57 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eintentservice/IntentServiceHandledAction.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eintentservice/IntentServiceHandledAction.java
@@ -41,7 +41,7 @@ void myAction() {
 	}
 
 	@ServiceAction
-	void MyActionOneParam(String valueString) {
+	void myActionOneParam(String valueString) {
 		actionForTestHandled = valueString;
 	}
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eprovider/MyProvider.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eprovider/MyProvider.java
index 2078dab..8d90301 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eprovider/MyProvider.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eprovider/MyProvider.java
@@ -15,14 +15,6 @@
  */
 package org.androidannotations.test15.eprovider;
 
-import android.app.NotificationManager;
-import android.content.ContentProvider;
-import android.content.ContentValues;
-import android.database.Cursor;
-import android.net.Uri;
-import android.util.Log;
-import android.widget.Toast;
-
 import org.androidannotations.annotations.Background;
 import org.androidannotations.annotations.Bean;
 import org.androidannotations.annotations.EProvider;
@@ -34,10 +26,17 @@
 import org.androidannotations.test15.ebean.EnhancedClass;
 import org.androidannotations.test15.eservice.MyService;
 import org.androidannotations.test15.ormlite.DatabaseHelper;
-import org.androidannotations.test15.ormlite.User;
 import org.androidannotations.test15.ormlite.UserDao;
 import org.androidannotations.test15.prefs.SomePrefs_;
 
+import android.app.NotificationManager;
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.util.Log;
+import android.widget.Toast;
+
 @EProvider
 public class MyProvider extends ContentProvider {
 
@@ -46,7 +45,7 @@
 
 	@Bean
 	EnhancedClass dependency;
-	
+
 	@OrmLiteDao(helper = DatabaseHelper.class)
 	UserDao userDao;
 
@@ -89,7 +88,6 @@ void showToast() {
 		Toast.makeText(getContext().getApplicationContext(), "Hello World!", Toast.LENGTH_LONG).show();
 	}
 
-
 	@Trace
 	@Background
 	void workInBackground() {
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eservice/MyService.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eservice/MyService.java
index 1d69803..322366e 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eservice/MyService.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eservice/MyService.java
@@ -15,12 +15,6 @@
  */
 package org.androidannotations.test15.eservice;
 
-import android.app.IntentService;
-import android.app.NotificationManager;
-import android.content.Intent;
-import android.util.Log;
-import android.widget.Toast;
-
 import org.androidannotations.annotations.Background;
 import org.androidannotations.annotations.Bean;
 import org.androidannotations.annotations.EService;
@@ -30,9 +24,14 @@
 import org.androidannotations.annotations.UiThread;
 import org.androidannotations.test15.ebean.EnhancedClass;
 import org.androidannotations.test15.ormlite.DatabaseHelper;
-import org.androidannotations.test15.ormlite.User;
 import org.androidannotations.test15.ormlite.UserDao;
 
+import android.app.IntentService;
+import android.app.NotificationManager;
+import android.content.Intent;
+import android.util.Log;
+import android.widget.Toast;
+
 @EService
 public class MyService extends IntentService {
 
@@ -60,8 +59,7 @@ protected void onHandleIntent(Intent intent) {
 	@Trace
 	@UiThread
 	void showToast() {
-		Toast.makeText(getApplicationContext(), "Hello World!",
-				Toast.LENGTH_LONG).show();
+		Toast.makeText(getApplicationContext(), "Hello World!", Toast.LENGTH_LONG).show();
 	}
 
 	@Trace
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayout.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayout.java
index 5d3aa05..36b0c72 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayout.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayout.java
@@ -15,13 +15,6 @@
  */
 package org.androidannotations.test15.eviewgroup;
 
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.MotionEvent;
-import android.view.animation.Animation;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-
 import org.androidannotations.annotations.AfterViews;
 import org.androidannotations.annotations.Background;
 import org.androidannotations.annotations.Click;
@@ -35,6 +28,13 @@
 import org.androidannotations.annotations.res.StringRes;
 import org.androidannotations.test15.R;
 
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.animation.Animation;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
 @EViewGroup(R.layout.component)
 public class CustomFrameLayout extends FrameLayout {
 
@@ -43,26 +43,26 @@
 
 	@ViewById
 	protected TextView subtitle;
-	
+
 	@StringRes(R.string.app_name)
 	protected String res;
-	
+
 	@AnimationRes(R.anim.fadein)
 	protected Animation anim;
 
 	public CustomFrameLayout(Context context, int i) {
 		super(context);
 	}
-	
+
 	public CustomFrameLayout(Context context, AttributeSet attrs) {
 		super(context, attrs);
 	}
 
 	@Trace
 	@AfterViews
-	protected void afterViews(){
+	protected void afterViews() {
 	}
-	
+
 	@Click
 	protected void title() {
 	}
@@ -76,11 +76,11 @@ protected void titleTouched(MotionEvent e) {
 	}
 
 	@Background
-	protected void someBackgroundTask(){
+	protected void someBackgroundTask() {
 	}
-	
+
 	@UiThread
-	protected void someUIThreadTask(){
+	protected void someUIThreadTask() {
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayoutActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayoutActivity.java
index 9c14def..7566f98 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayoutActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/eviewgroup/CustomFrameLayoutActivity.java
@@ -15,19 +15,19 @@
  */
 package org.androidannotations.test15.eviewgroup;
 
-import android.app.Activity;
-
 import org.androidannotations.annotations.AfterViews;
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.test15.R;
 
+import android.app.Activity;
+
 @EActivity(R.layout.main)
 public class CustomFrameLayoutActivity extends Activity {
-	
+
 	private CustomFrameLayout layout;
 
 	@AfterViews
-	public void afterViews(){
+	public void afterViews() {
 		layout = CustomFrameLayout_.build(this, 2);
 		layout.tv.setText("Plop");
 	}
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/ActivityWithInnerEnhancedClasses.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/ActivityWithInnerEnhancedClasses.java
index 4a2d97a..c67bad1 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/ActivityWithInnerEnhancedClasses.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/ActivityWithInnerEnhancedClasses.java
@@ -15,13 +15,18 @@
  */
 package org.androidannotations.test15.innerclasses;
 
+import org.androidannotations.annotations.EActivity;
+import org.androidannotations.annotations.EBean;
+import org.androidannotations.annotations.EFragment;
+import org.androidannotations.annotations.EViewGroup;
+import org.androidannotations.annotations.ViewById;
+import org.androidannotations.test15.R;
+
 import android.app.Activity;
 import android.app.Fragment;
 import android.content.Context;
 import android.widget.LinearLayout;
 import android.widget.TextView;
-import org.androidannotations.annotations.*;
-import org.androidannotations.test15.R;
 
 @EActivity(R.layout.views_injected)
 public class ActivityWithInnerEnhancedClasses extends Activity {
@@ -35,7 +40,6 @@
 		@ViewById(R.id.injected_text_view)
 		TextView textView;
 
-
 		public InnerViewGroup(Context context) {
 			super(context);
 		}
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/BeanWithInnerEnhancedClasses.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/BeanWithInnerEnhancedClasses.java
index b1f2583..070d3ca 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/BeanWithInnerEnhancedClasses.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/innerclasses/BeanWithInnerEnhancedClasses.java
@@ -40,12 +40,13 @@
 	@EBean
 	public static class InnerEnhancedBean {
 
-		@StringRes(R.string.hello) String hello;
+		@StringRes(R.string.hello)
+		String hello;
 
 	}
 
 	@SharedPref
-	public static interface InnerPrefs {
+	public interface InnerPrefs {
 
 		@DefaultInt(12)
 		int intValue();
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericParcelableBean.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericParcelableBean.java
index 87fedc0..07195d4 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericParcelableBean.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericParcelableBean.java
@@ -18,45 +18,51 @@
 import android.os.Parcel;
 import android.os.Parcelable;
 
-public class MyGenericParcelableBean <T> implements Parcelable {
+public class MyGenericParcelableBean<T> implements Parcelable {
 
 	private final T t;
 
 	public MyGenericParcelableBean(T t) {
 		this.t = t;
 	}
-	
+
 	@Override
 	public int describeContents() {
 		return 0;
 	}
 
 	@Override
-	public void writeToParcel(Parcel dest, int flags) {}
+	public void writeToParcel(Parcel dest, int flags) {
+	}
 
 	@Override
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
-		result = prime * result + ((t == null) ? 0 : t.hashCode());
+		result = prime * result + (t == null ? 0 : t.hashCode());
 		return result;
 	}
 
 	@Override
 	public boolean equals(Object obj) {
-		if (this == obj)
+		if (this == obj) {
 			return true;
-		if (obj == null)
+		}
+		if (obj == null) {
 			return false;
-		if (getClass() != obj.getClass())
+		}
+		if (getClass() != obj.getClass()) {
 			return false;
+		}
 		@SuppressWarnings("rawtypes")
 		MyGenericParcelableBean other = (MyGenericParcelableBean) obj;
 		if (t == null) {
-			if (other.t != null)
+			if (other.t != null) {
 				return false;
-		} else if (!t.equals(other.t))
+			}
+		} else if (!t.equals(other.t)) {
 			return false;
+		}
 		return true;
 	}
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericSerializableBean.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericSerializableBean.java
index 6ca5bac..3493bbe 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericSerializableBean.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyGenericSerializableBean.java
@@ -31,29 +31,32 @@ public MyGenericSerializableBean(T t) {
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
-		result = prime * result + ((t == null) ? 0 : t.hashCode());
+		result = prime * result + (t == null ? 0 : t.hashCode());
 		return result;
 	}
 
 	@Override
 	public boolean equals(Object obj) {
-		if (this == obj)
+		if (this == obj) {
 			return true;
-		if (obj == null)
+		}
+		if (obj == null) {
 			return false;
-		if (getClass() != obj.getClass())
+		}
+		if (getClass() != obj.getClass()) {
 			return false;
+		}
 
 		@SuppressWarnings("unchecked")
 		MyGenericSerializableBean<T> other = (MyGenericSerializableBean<T>) obj;
 		if (t == null) {
-			if (other.t != null)
+			if (other.t != null) {
 				return false;
-		} else if (!t.equals(other.t))
+			}
+		} else if (!t.equals(other.t)) {
 			return false;
+		}
 		return true;
 	}
 
-
-	
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyParcelableBean.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyParcelableBean.java
index c2892d4..02bc16a 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyParcelableBean.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MyParcelableBean.java
@@ -37,16 +37,28 @@ public void writeToParcel(Parcel dest, int flags) {
 	}
 
 	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + x;
+		return result;
+	}
+
+	@Override
 	public boolean equals(Object obj) {
-		if (this == obj)
+		if (this == obj) {
 			return true;
-		if (obj == null)
+		}
+		if (obj == null) {
 			return false;
-		if (getClass() != obj.getClass())
+		}
+		if (getClass() != obj.getClass()) {
 			return false;
+		}
 		MyParcelableBean other = (MyParcelableBean) obj;
-		if (x != other.x)
+		if (x != other.x) {
 			return false;
+		}
 		return true;
 	}
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MySerializableBean.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MySerializableBean.java
index 9414ffa..e0c9fd0 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MySerializableBean.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/MySerializableBean.java
@@ -28,16 +28,28 @@ public MySerializableBean(int x) {
 	}
 
 	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + x;
+		return result;
+	}
+
+	@Override
 	public boolean equals(Object obj) {
-		if (this == obj)
+		if (this == obj) {
 			return true;
-		if (obj == null)
+		}
+		if (obj == null) {
 			return false;
-		if (getClass() != obj.getClass())
+		}
+		if (getClass() != obj.getClass()) {
 			return false;
+		}
 		MySerializableBean other = (MySerializableBean) obj;
-		if (x != other.x)
+		if (x != other.x) {
 			return false;
+		}
 		return true;
 	}
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/SaveInstanceStateActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/SaveInstanceStateActivity.java
index 3e6c966..14dd7ff 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/SaveInstanceStateActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/instancestate/SaveInstanceStateActivity.java
@@ -17,18 +17,18 @@
 
 import java.util.ArrayList;
 
-import android.app.Activity;
-import android.os.Bundle;
-
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.InstanceState;
 import org.androidannotations.test15.R;
 
+import android.app.Activity;
+import android.os.Bundle;
+
 @EActivity(R.layout.main)
 public class SaveInstanceStateActivity extends Activity {
 
 	@InstanceState
-	Long nullWrappedLong = 42l;
+	Long nullWrappedLong = 42L;
 
 	@InstanceState
 	boolean myBoolean;
@@ -167,13 +167,13 @@
 
 	@InstanceState
 	MyGenericParcelableBean<Integer>[] myGenericParcelableBeanArray;
-	
+
 	@InstanceState
 	ArrayList<MyParcelableBean> myParcelableBeanArrayList;
-	
+
 	@InstanceState
 	ArrayList<MyGenericParcelableBean<Integer>> myGenericParcelableBeanArrayList;
-	
+
 	@InstanceState
 	ArrayList<MySerializableBean> mySerializableBeanArrayList;
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuActivity.java
index 8d8245f..d7fc49c 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuActivity.java
@@ -15,23 +15,27 @@
  */
 package org.androidannotations.test15.menu;
 
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.MenuItem;
-
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.OptionsItem;
 import org.androidannotations.annotations.OptionsMenu;
 import org.androidannotations.annotations.OptionsMenuItem;
 import org.androidannotations.test15.R;
 
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.MenuItem;
+
 @EActivity
 @OptionsMenu({ R.menu.my_menu, R.menu.my_menu2 })
 public class OptionsMenuActivity extends Activity {
 
+	// CHECKSTYLE:OFF
+
 	@OptionsMenuItem
 	MenuItem menu_refresh;
 
+	// CHECKSTYLE:ON
+
 	@OptionsMenuItem(R.id.menu_search)
 	MenuItem aMenuById;
 
@@ -40,7 +44,7 @@
 
 	boolean menuRefreshSelected;
 	boolean multipleMenuItems;
-	boolean menu_add;
+	boolean menuAdd;
 
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
@@ -59,8 +63,10 @@ boolean multipleMenuItems() {
 	}
 
 	@OptionsItem
+	// CHECKSTYLE:OFF
 	void menu_add(MenuItem item) {
-		menu_add = true;
+		// CHECKSTYLE:ON
+		menuAdd = true;
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuFragment.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuFragment.java
index 930511d..4b229ef 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuFragment.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuFragment.java
@@ -15,22 +15,26 @@
  */
 package org.androidannotations.test15.menu;
 
-import android.app.Fragment;
-import android.view.MenuItem;
-
 import org.androidannotations.annotations.EFragment;
 import org.androidannotations.annotations.OptionsItem;
 import org.androidannotations.annotations.OptionsMenu;
 import org.androidannotations.annotations.OptionsMenuItem;
 import org.androidannotations.test15.R;
 
+import android.app.Fragment;
+import android.view.MenuItem;
+
 @EFragment
 @OptionsMenu({ R.menu.my_menu, R.menu.my_menu2 })
 public class OptionsMenuFragment extends Fragment {
 
+	// CHECKSTYLE:OFF
+
 	@OptionsMenuItem
 	MenuItem menu_refresh;
 
+	// CHECKSTYLE:ON
+
 	@OptionsMenuItem(R.id.menu_search)
 	MenuItem aMenuById;
 
@@ -47,7 +51,9 @@ boolean multipleMenuItems() {
 	}
 
 	@OptionsItem
+	// CHECKSTYLE:OFF
 	void menu_add(MenuItem item) {
+		// CHECKSTYLE:ON
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSubActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSubActivity.java
index 5134149..a5011db 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSubActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSubActivity.java
@@ -26,7 +26,10 @@
 @OptionsMenu(R.menu.my_menu3)
 public class OptionsMenuSubActivity extends OptionsMenuActivity {
 
+	// CHECKSTYLE:OFF
+
 	@OptionsMenuItem
 	MenuItem menu_settings;
 
+	// CHECKSTYLE:ON
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSupportFragment.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSupportFragment.java
index 3f08d7a..d619c98 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSupportFragment.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/menu/OptionsMenuSupportFragment.java
@@ -15,22 +15,26 @@
  */
 package org.androidannotations.test15.menu;
 
-import android.support.v4.app.Fragment;
-import android.view.MenuItem;
-
 import org.androidannotations.annotations.EFragment;
 import org.androidannotations.annotations.OptionsItem;
 import org.androidannotations.annotations.OptionsMenu;
 import org.androidannotations.annotations.OptionsMenuItem;
 import org.androidannotations.test15.R;
 
+import android.support.v4.app.Fragment;
+import android.view.MenuItem;
+
 @EFragment
 @OptionsMenu({ R.menu.my_menu, R.menu.my_menu2 })
 public class OptionsMenuSupportFragment extends Fragment {
 
+	// CHECKSTYLE:OFF
+
 	@OptionsMenuItem
 	MenuItem menu_refresh;
 
+	// CHECKSTYLE:ON
+
 	@OptionsItem
 	void menuRefreshSelected() {
 	}
@@ -41,7 +45,9 @@ boolean multipleMenuItems() {
 	}
 
 	@OptionsItem
+	// CHECKSTYLE:OFF
 	void menu_add(MenuItem item) {
+		// CHECKSTYLE:ON
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ormlite/OrmLiteBean.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ormlite/OrmLiteBean.java
index 30bf1dd..9d0981e 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ormlite/OrmLiteBean.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/ormlite/OrmLiteBean.java
@@ -18,10 +18,6 @@
 import org.androidannotations.annotations.EBean;
 import org.androidannotations.annotations.OrmLiteDao;
 
-import org.androidannotations.test15.ormlite.User;
-import org.androidannotations.test15.ormlite.UserDao;
-import org.androidannotations.test15.ormlite.DatabaseHelper;
-
 @EBean
 public class OrmLiteBean {
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/prefs/InnerPrefs.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/prefs/InnerPrefs.java
index 88e1e05..a3feb34 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/prefs/InnerPrefs.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/prefs/InnerPrefs.java
@@ -22,7 +22,7 @@
 public class InnerPrefs {
 
 	@SharedPref
-	public static interface InnerSharedPrefs {
+	public interface InnerSharedPrefs {
 
 	}
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/res/ResActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/res/ResActivity.java
index 697b5be..a4f81c7 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/res/ResActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/res/ResActivity.java
@@ -15,19 +15,21 @@
  */
 package org.androidannotations.test15.res;
 
-import android.app.Activity;
-import android.content.res.XmlResourceParser;
-import android.text.Spanned;
-import android.view.animation.Animation;
-
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.res.HtmlRes;
 import org.androidannotations.annotations.res.StringRes;
 import org.androidannotations.test15.R;
 
+import android.app.Activity;
+import android.content.res.XmlResourceParser;
+import android.text.Spanned;
+import android.view.animation.Animation;
+
 @EActivity(R.layout.main)
 public class ResActivity extends Activity {
 
+	// CHECKSTYLE:OFF
+
 	// @AnimationRes
 	XmlResourceParser fade_in;
 
@@ -45,4 +47,6 @@
 
 	@HtmlRes(R.string.hello_html)
 	CharSequence htmlInjected;
+
+	// CHECKSTYLE:ON
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/Event.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/Event.java
index 69af7f4..89994db 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/Event.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/Event.java
@@ -33,26 +33,32 @@ public int hashCode() {
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + id;
-		result = prime * result + ((name == null) ? 0 : name.hashCode());
+		result = prime * result + (name == null ? 0 : name.hashCode());
 		return result;
 	}
 
 	@Override
 	public boolean equals(Object obj) {
-		if (this == obj)
+		if (this == obj) {
 			return true;
-		if (obj == null)
+		}
+		if (obj == null) {
 			return false;
-		if (getClass() != obj.getClass())
+		}
+		if (getClass() != obj.getClass()) {
 			return false;
+		}
 		Event other = (Event) obj;
-		if (id != other.id)
+		if (id != other.id) {
 			return false;
+		}
 		if (name == null) {
-			if (other.name != null)
+			if (other.name != null) {
 				return false;
-		} else if (!name.equals(other.name))
+			}
+		} else if (!name.equals(other.name)) {
 			return false;
+		}
 		return true;
 	}
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/HttpMethodsService.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/HttpMethodsService.java
index 4dd8e01..a82fd9f 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/HttpMethodsService.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/rest/HttpMethodsService.java
@@ -25,7 +25,6 @@
 import org.androidannotations.annotations.rest.Put;
 import org.androidannotations.annotations.rest.Rest;
 import org.androidannotations.api.rest.RestClientErrorHandling;
-import org.androidannotations.api.rest.RestErrorHandler;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;
@@ -52,7 +51,7 @@
 
 	@Put("/put/")
 	void put();
-	
+
 	void setRestTemplate(RestTemplate restTemplate);
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/MapActivityWithRoboGuice.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/MapActivityWithRoboGuice.java
index ccfb182..6716c17 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/MapActivityWithRoboGuice.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/MapActivityWithRoboGuice.java
@@ -15,13 +15,9 @@
  */
 package org.androidannotations.test15.roboguice;
 
-import android.app.Activity;
-
 import org.androidannotations.annotations.EActivity;
-import org.androidannotations.annotations.RoboGuice;
 
 import roboguice.activity.RoboActivity;
-import roboguice.activity.RoboMapActivity;
 
 //Commented because Maps is not Open Source
 @EActivity
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/SampleRoboApplication.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/SampleRoboApplication.java
index ff82872..37253e6 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/SampleRoboApplication.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/roboguice/SampleRoboApplication.java
@@ -20,14 +20,13 @@
 import org.androidannotations.annotations.OrmLiteDao;
 import org.androidannotations.test15.ebean.EmptyDependency;
 import org.androidannotations.test15.ormlite.DatabaseHelper;
-import org.androidannotations.test15.ormlite.User;
 import org.androidannotations.test15.ormlite.UserDao;
 
 import android.app.Application;
 
 @EApplication
 public class SampleRoboApplication extends Application {
-	
+
 	@Bean
 	public EmptyDependency someDependency;
 
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockActivity.java
index 2789828..6294bd1 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockActivity.java
@@ -15,27 +15,31 @@
  */
 package org.androidannotations.test15.sherlock;
 
-
-
-import android.os.Bundle;
-import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.view.MenuItem;
 import org.androidannotations.annotations.EActivity;
 import org.androidannotations.annotations.OptionsItem;
 import org.androidannotations.annotations.OptionsMenu;
 import org.androidannotations.annotations.OptionsMenuItem;
 import org.androidannotations.test15.R;
 
+import android.os.Bundle;
+
+import com.actionbarsherlock.app.SherlockActivity;
+import com.actionbarsherlock.view.MenuItem;
+
 @EActivity
 @OptionsMenu(R.menu.my_menu)
 public class MySherlockActivity extends SherlockActivity {
 
+	// CHECKSTYLE:OFF
+
 	@OptionsMenuItem
 	MenuItem menu_refresh;
 
+	// CHECKSTYLE:ON
+
 	boolean menuRefreshSelected;
 	boolean multipleMenuItems;
-	boolean menu_add;
+	boolean menuAdd;
 
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
@@ -54,8 +58,10 @@ boolean multipleMenuItems() {
 	}
 
 	@OptionsItem
+	// CHECKSTYLE:OFF
 	void menu_add(MenuItem item) {
-		menu_add = true;
+		// CHECKSTYLE:ON
+		menuAdd = true;
 	}
-	
+
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockFragment.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockFragment.java
index 8559ada..16a973e 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockFragment.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/sherlock/MySherlockFragment.java
@@ -15,19 +15,18 @@
  */
 package org.androidannotations.test15.sherlock;
 
-
-import com.actionbarsherlock.app.SherlockFragment;
-import com.actionbarsherlock.view.MenuItem;
 import org.androidannotations.annotations.EFragment;
 import org.androidannotations.annotations.OptionsItem;
 import org.androidannotations.annotations.OptionsMenu;
 import org.androidannotations.test15.R;
 
+import com.actionbarsherlock.app.SherlockFragment;
+import com.actionbarsherlock.view.MenuItem;
+
 @EFragment
 @OptionsMenu(R.menu.my_menu)
 public class MySherlockFragment extends SherlockFragment {
 
-
 	@OptionsItem
 	void menuRefreshSelected() {
 	}
@@ -38,7 +37,9 @@ boolean multipleMenuItems() {
 	}
 
 	@OptionsItem
+	// CHECKSTYLE:OFF
 	void menu_add(MenuItem item) {
+		// CHECKSTYLE:ON
 	}
-	
+
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/trace/TracedActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/trace/TracedActivity.java
index b81313b..78c3985 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/trace/TracedActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/org/androidannotations/test15/trace/TracedActivity.java
@@ -15,7 +15,6 @@
  */
 package org.androidannotations.test15.trace;
 
-
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
@@ -36,7 +35,7 @@
 
 @EActivity
 public class TracedActivity extends Activity {
-	
+
 	public boolean tracedMethodCalled = false;
 	public boolean voidTracedMethodCalled = false;
 	public boolean voidTracedMethodDebugCalled = false;
@@ -54,15 +53,13 @@ public void onCreate(Bundle savedInstanceState) {
 	}
 
 	@Trace
-	Object tracedMethod(List<Map<String, List<Set<Void>>>> param1, Void param2)
-			throws IOException {
+	Object tracedMethod(List<Map<String, List<Set<Void>>>> param1, Void param2) throws IOException {
 		tracedMethodCalled = true;
 		return null;
 	}
 
 	@Trace
-	void voidTracedMethod(List<Map<String, List<Set<Void>>>> param1, Void param2)
-			throws IOException {
+	void voidTracedMethod(List<Map<String, List<Set<Void>>>> param1, Void param2) throws IOException {
 		voidTracedMethodCalled = true;
 	}
 
@@ -126,8 +123,7 @@ void mixedTransactionalMethod(SQLiteDatabase db) {
 	}
 
 	@Trace
-	void tracedUsingArrayParameters(MySerializableBean[] array,
-			MySerializableBean[][] multiDimArray) {
+	void tracedUsingArrayParameters(MySerializableBean[] array, MySerializableBean[][] multiDimArray) {
 	}
 
 	@Trace
diff --git a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/ThreadActivityTest.java b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/ThreadActivityTest.java
index e42859f..058ecef 100644
--- a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/ThreadActivityTest.java
+++ b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/ThreadActivityTest.java
@@ -15,9 +15,9 @@
  */
 package org.androidannotations.test15;
 
+import static org.fest.reflect.core.Reflection.staticField;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.fest.reflect.core.Reflection.staticField;
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -37,7 +37,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mockito;
+import org.mockito.Matchers;
 import org.mockito.internal.util.MockUtil;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
@@ -66,7 +66,7 @@ public void setup() {
 	public void after() throws InterruptedException {
 		Thread.setDefaultUncaughtExceptionHandler(defaultExceptionHandler);
 
-		List<String> tasks = staticField("tasks") //
+		List<String> tasks = staticField("TASKS") //
 				.ofType(new TypeRef<List<String>>() {
 				}) //
 				.in(BackgroundExecutor.class) //
@@ -74,7 +74,7 @@ public void after() throws InterruptedException {
 
 		tasks.clear();
 
-		ThreadLocal<String> currentSerial = staticField("currentSerial") //
+		ThreadLocal<String> currentSerial = staticField("CURRENT_SERIAL") //
 				.ofType(new TypeRef<ThreadLocal<String>>() {
 				}) //
 				.in(BackgroundExecutor.class) //
@@ -109,17 +109,17 @@ public void backgroundDelegatesToExecutor() {
 
 		activity.emptyBackgroundMethod();
 
-		verify(executor).execute(Mockito.<Runnable> any());
+		verify(executor).execute(Matchers.<Runnable> any());
 	}
 
 	/**
 	 * Verify that non-serialized background tasks <strong>are not</strong>
 	 * serialized (ensure that serial feature does not force all background
 	 * tasks to be serialized).
-	 * 
+	 *
 	 * Start several requests which add an item to a list in background, without
 	 * "@Background" serial attribute enabled.
-	 * 
+	 *
 	 * Once all tasks have completed execution, verify that the items in the
 	 * list are not ordered (with very little false-negative probability).
 	 */
@@ -131,8 +131,7 @@ public void parallelBackgroundTasks() {
 		/* set an executor with 4 threads */
 		BackgroundExecutor.setExecutor(Executors.newFixedThreadPool(4));
 
-		List<Integer> list = Collections
-				.synchronizedList(new ArrayList<Integer>());
+		List<Integer> list = Collections.synchronizedList(new ArrayList<Integer>());
 
 		/* sem.acquire() will be unlocked exactly after NB_ADD releases */
 		Semaphore sem = new Semaphore(1 - NB_ADD);
@@ -151,10 +150,8 @@ public void parallelBackgroundTasks() {
 
 		try {
 			/* wait for all tasks to be completed */
-			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME,
-					TimeUnit.MILLISECONDS);
-			Assert.assertTrue(
-					"Requested tasks should have completed execution", acquired);
+			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME, TimeUnit.MILLISECONDS);
+			Assert.assertTrue("Requested tasks should have completed execution", acquired);
 
 			/*
 			 * verify that list items are in the wrong order (the probability it
@@ -166,18 +163,17 @@ public void parallelBackgroundTasks() {
 			}
 			Assert.assertFalse("Items should not be in order", rightOrder);
 		} catch (InterruptedException e) {
-			Assert.assertFalse("Testing thread should never be interrupted",
-					true);
+			Assert.assertFalse("Testing thread should never be interrupted", true);
 		}
 	}
 
 	/**
 	 * Verify that serialized background tasks are correctly serialized.
-	 * 
+	 *
 	 * Start several requests which add an item to a list in background, with
 	 * "@Background" serial attribute enabled, so the requests must be executed
 	 * sequentially.
-	 * 
+	 *
 	 * Once all tasks have completed execution, verify that the items in the
 	 * list are ordered.
 	 */
@@ -193,8 +189,7 @@ public void serializedBackgroundTasks() {
 		 * the calls are serialized, but not necessarily on the same thread, so
 		 * we need to synchronize to avoid cache effects
 		 */
-		List<Integer> list = Collections
-				.synchronizedList(new ArrayList<Integer>());
+		List<Integer> list = Collections.synchronizedList(new ArrayList<Integer>());
 
 		/* sem.acquire() will be unlocked exactly after NB_ADD releases */
 		Semaphore sem = new Semaphore(1 - NB_ADD);
@@ -213,28 +208,24 @@ public void serializedBackgroundTasks() {
 
 		try {
 			/* wait for all tasks to be completed */
-			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME,
-					TimeUnit.MILLISECONDS);
-			Assert.assertTrue(
-					"Requested tasks should have completed execution", acquired);
+			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME, TimeUnit.MILLISECONDS);
+			Assert.assertTrue("Requested tasks should have completed execution", acquired);
 
 			for (int i = 0; i < NB_ADD; i++) {
-				Assert.assertEquals("Items must be in order", i,
-						(int) list.get(i));
+				Assert.assertEquals("Items must be in order", i, (int) list.get(i));
 			}
 		} catch (InterruptedException e) {
-			Assert.assertFalse("Testing thread should never be interrupted",
-					true);
+			Assert.assertFalse("Testing thread should never be interrupted", true);
 		}
 	}
 
 	/**
 	 * Verify that cancellable background tasks are correctly cancelled, and
 	 * others are not.
-	 * 
+	 *
 	 * Start several requests which add an item to a list in background, half
 	 * explicitly cancelled, half not cancelled.
-	 * 
+	 *
 	 * Once all tasks have completed execution, check if and only if the items
 	 * from the uncancelled tasks are in the list.
 	 */
@@ -250,8 +241,7 @@ public void cancellableBackgroundTasks() {
 		 * the calls are serialized, but not necessarily on the same thread, so
 		 * we need to synchronize to avoid cache effects
 		 */
-		List<Integer> list = Collections
-				.synchronizedList(new ArrayList<Integer>());
+		List<Integer> list = Collections.synchronizedList(new ArrayList<Integer>());
 
 		/* sem.acquire() will be unlocked exactly after NB_ADD releases */
 		Semaphore sem = new Semaphore(1 - NB_ADD);
@@ -272,21 +262,16 @@ public void cancellableBackgroundTasks() {
 
 		try {
 			/* wait for all non cancelled tasks to be completed */
-			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME,
-					TimeUnit.MILLISECONDS);
-			Assert.assertTrue(
-					"Requested tasks should have completed execution", acquired);
+			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME, TimeUnit.MILLISECONDS);
+			Assert.assertTrue("Requested tasks should have completed execution", acquired);
 
-			Assert.assertEquals("Only uncancelled tasks must have added items",
-					list.size(), NB_ADD);
+			Assert.assertEquals("Only uncancelled tasks must have added items", list.size(), NB_ADD);
 
 			for (int i = 0; i < NB_ADD; i++) {
-				Assert.assertTrue("Items must be only from uncancelled tasks",
-						i < NB_ADD);
+				Assert.assertTrue("Items must be only from uncancelled tasks", i < NB_ADD);
 			}
 		} catch (InterruptedException e) {
-			Assert.assertFalse("Testing thread should never be interrupted",
-					true);
+			Assert.assertFalse("Testing thread should never be interrupted", true);
 		}
 	}
 
@@ -302,8 +287,7 @@ public void cancellableSerializedBackgroundTasks() {
 		 * the calls are serialized, but not necessarily on the same thread, so
 		 * we need to synchronize to avoid cache effects
 		 */
-		List<Integer> list = Collections
-				.synchronizedList(new ArrayList<Integer>());
+		List<Integer> list = Collections.synchronizedList(new ArrayList<Integer>());
 
 		/* sem.acquire() will be unlocked exactly after NB_ADD releases */
 		Semaphore sem = new Semaphore(1 - NB_ADD);
@@ -324,25 +308,20 @@ public void cancellableSerializedBackgroundTasks() {
 
 		try {
 			/* wait for all non cancelled tasks to be completed */
-			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME,
-					TimeUnit.MILLISECONDS);
-			Assert.assertTrue(
-					"Requested tasks should have completed execution", acquired);
+			boolean acquired = sem.tryAcquire(MAX_WAITING_TIME, TimeUnit.MILLISECONDS);
+			Assert.assertTrue("Requested tasks should have completed execution", acquired);
 
 			/* cancel all tasks with id "to_cancel_2" */
 			BackgroundExecutor.cancelAll("to_cancel_2", true);
 
-			Assert.assertEquals("Only uncancelled tasks must have added items",
-					list.size(), NB_ADD);
+			Assert.assertEquals("Only uncancelled tasks must have added items", list.size(), NB_ADD);
 
 			for (int i = 0; i < NB_ADD; i++) {
-				Assert.assertTrue("Items must be only from uncancelled tasks",
-						i < NB_ADD);
+				Assert.assertTrue("Items must be only from uncancelled tasks", i < NB_ADD);
 			}
 
 		} catch (InterruptedException e) {
-			Assert.assertFalse("Testing thread should never be interrupted",
-					true);
+			Assert.assertFalse("Testing thread should never be interrupted", true);
 		}
 	}
 
@@ -382,7 +361,7 @@ public void run() {
 		synchronized (threadActivityHolder) {
 			do {
 				threadActivityHolder.wait();
-			} while(threadActivityHolder[0] == null);
+			} while (threadActivityHolder[0] == null);
 		}
 
 		Field handlerField = ThreadActivity_.class.getDeclaredField("handler_");
@@ -396,7 +375,7 @@ public void run() {
 	public void propagateExceptionToGlobalExceptionHandler() {
 		/* set an executor with 4 threads */
 		BackgroundExecutor.setExecutor(Executors.newFixedThreadPool(4));
-		
+
 		// Prepare lock on which we'll wait for the
 		// background exception handler to catch the exception
 		final Object LOCK = new Object();
@@ -420,8 +399,8 @@ public void uncaughtException(Thread thread, Throwable ex) {
 	}
 
 	/**
-	 * Call wait() on the given object with the specified timeout.
-	 * Avoid boilerplate code like synchronized or try..catch.
+	 * Call wait() on the given object with the specified timeout. Avoid
+	 * boilerplate code like synchronized or try..catch.
 	 */
 	private void waitOn(Object lock, long timeout) {
 		synchronized (lock) {
diff --git a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/eintentservice/MyIntentServiceTest.java b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/eintentservice/MyIntentServiceTest.java
index ea5f6ef..c3229e7 100644
--- a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/eintentservice/MyIntentServiceTest.java
+++ b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/eintentservice/MyIntentServiceTest.java
@@ -35,14 +35,14 @@ public void testAction() {
 		// Simulate call to intent builder and retrieve the configured Intent
 		EmptyActivityWithoutLayout context = new EmptyActivityWithoutLayout_();
 		Intent intent = IntentServiceHandledAction_.intent(context) //
-				.MyActionOneParam("test") //
+				.myActionOneParam("test") //
 				.get();
 
 		// Simulate the creation of IntentService by Android
 		IntentServiceHandledAction intentServiceHandledAction = new IntentServiceHandledAction_();
 		intentServiceHandledAction.onHandleIntent(intent);
 
-		assertThat(IntentServiceHandledAction_.actionForTestHandled).isEqualTo("test");
+		assertThat(IntentServiceHandledAction.actionForTestHandled).isEqualTo("test");
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/menu/OptionsMenuActivityTest.java b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/menu/OptionsMenuActivityTest.java
index dffc6d9..18e3664 100644
--- a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/menu/OptionsMenuActivityTest.java
+++ b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/menu/OptionsMenuActivityTest.java
@@ -76,7 +76,7 @@ public void defaultIdUnderscore() {
 
 		activity.onOptionsItemSelected(item);
 
-		assertThat(activity.menu_add).isTrue();
+		assertThat(activity.menuAdd).isTrue();
 	}
 
 }
diff --git a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/sherlock/MySherlockActivityTest.java b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/sherlock/MySherlockActivityTest.java
index ea0ff69..f5bfcd1 100644
--- a/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/sherlock/MySherlockActivityTest.java
+++ b/AndroidAnnotations/functional-test-1-5/src/test/java/org/androidannotations/test15/sherlock/MySherlockActivityTest.java
@@ -76,7 +76,7 @@ public void defaultIdUnderscore() {
 
 		activity.onOptionsItemSelected(item);
 
-		assertThat(activity.menu_add).isTrue();
+		assertThat(activity.menuAdd).isTrue();
 	}
 
 }
diff --git a/AndroidAnnotations/pom.xml b/AndroidAnnotations/pom.xml
index 43e15db..10d457b 100644
--- a/AndroidAnnotations/pom.xml
+++ b/AndroidAnnotations/pom.xml
@@ -245,14 +245,23 @@
 					<artifactId>maven-deploy-plugin</artifactId>
 					<version>2.8.2</version>
 				</plugin>
+				<plugin>
+					<groupId>org.apache.maven.plugins</groupId>
+					<artifactId>maven-checkstyle-plugin</artifactId>
+					<version>2.13</version>
+					<configuration>
+						<configLocation>checkstyle-checks.xml</configLocation>
+						<consoleOutput>true</consoleOutput>
+					</configuration>
+				</plugin>
 			</plugins>
 		</pluginManagement>
 		<plugins>
 			<plugin>
 				<!-- Checks for license headers. Use "mvn license:format" to update files. -->
-				<groupId>com.mycila.maven-license-plugin</groupId>
-				<artifactId>maven-license-plugin</artifactId>
-				<version>1.9.0</version>
+                <groupId>com.mycila.maven-license-plugin</groupId>
+                <artifactId>maven-license-plugin</artifactId>
+                <version>1.9.0</version>
 				<configuration>
 					<header>src/etc/header.txt</header>
 					<excludes>
@@ -288,6 +297,17 @@
 					</execution>
 				</executions>
 			</plugin>
+			<plugin>
+				<artifactId>maven-checkstyle-plugin</artifactId>
+				<executions>
+					<execution>
+						<phase>process-sources</phase>
+						<goals>
+							<goal>check</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>
 		</plugins>
 	</build>
 
@@ -328,5 +348,17 @@
 		</profile>
 	</profiles>
 
+	<reporting>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-checkstyle-plugin</artifactId>
+				<version>2.12.1</version>
+				<configuration>
+					<configLocation>checkstyle-checks.xml</configLocation>
+				</configuration>
+			</plugin>
+		</plugins>
+	</reporting>
 
 </project>

From bc99f075af1858110d91e96bb28845f5b359c37b Mon Sep 17 00:00:00 2001
From: WonderCsabo <kozakcsabi@gmail.com>
Date: Sun, 19 Oct 2014 21:45:13 +0200
Subject: [PATCH 2/5] Update license plugin

---
 AndroidAnnotations/androidannotations-api/pom.xml  | 17 ++++++++++++++++
 .../androidannotations-bundle/pom.xml              | 17 ++++++++++++++++
 .../androidannotations-with-codemodel/pom.xml      | 17 ++++++++++++++++
 AndroidAnnotations/androidannotations/pom.xml      | 17 ++++++++++++++++
 AndroidAnnotations/checkstyle-checks.xml           | 17 ++++++++++++++++
 AndroidAnnotations/functional-test-1-5/pom.xml     | 17 ++++++++++++++++
 AndroidAnnotations/pom.xml                         | 23 +++++++++++++++++++---
 7 files changed, 122 insertions(+), 3 deletions(-)

diff --git a/AndroidAnnotations/androidannotations-api/pom.xml b/AndroidAnnotations/androidannotations-api/pom.xml
index 5d76fd4..abcbd9e 100644
--- a/AndroidAnnotations/androidannotations-api/pom.xml
+++ b/AndroidAnnotations/androidannotations-api/pom.xml
@@ -1,4 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
diff --git a/AndroidAnnotations/androidannotations-bundle/pom.xml b/AndroidAnnotations/androidannotations-bundle/pom.xml
index 5f5e71a..a30987b 100644
--- a/AndroidAnnotations/androidannotations-bundle/pom.xml
+++ b/AndroidAnnotations/androidannotations-bundle/pom.xml
@@ -1,4 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
diff --git a/AndroidAnnotations/androidannotations-with-codemodel/pom.xml b/AndroidAnnotations/androidannotations-with-codemodel/pom.xml
index 3bdeb79..5cada7d 100644
--- a/AndroidAnnotations/androidannotations-with-codemodel/pom.xml
+++ b/AndroidAnnotations/androidannotations-with-codemodel/pom.xml
@@ -1,4 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
diff --git a/AndroidAnnotations/androidannotations/pom.xml b/AndroidAnnotations/androidannotations/pom.xml
index 1b3a74c..8d62c50 100644
--- a/AndroidAnnotations/androidannotations/pom.xml
+++ b/AndroidAnnotations/androidannotations/pom.xml
@@ -1,4 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
     <modelVersion>4.0.0</modelVersion>
 
diff --git a/AndroidAnnotations/checkstyle-checks.xml b/AndroidAnnotations/checkstyle-checks.xml
index cf3d012..86c7a75 100644
--- a/AndroidAnnotations/checkstyle-checks.xml
+++ b/AndroidAnnotations/checkstyle-checks.xml
@@ -1,4 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
 <!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
 
 <module name="Checker">
diff --git a/AndroidAnnotations/functional-test-1-5/pom.xml b/AndroidAnnotations/functional-test-1-5/pom.xml
index c1aa32c..e0a2bc9 100644
--- a/AndroidAnnotations/functional-test-1-5/pom.xml
+++ b/AndroidAnnotations/functional-test-1-5/pom.xml
@@ -1,4 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
diff --git a/AndroidAnnotations/pom.xml b/AndroidAnnotations/pom.xml
index 10d457b..dd8d0e7 100644
--- a/AndroidAnnotations/pom.xml
+++ b/AndroidAnnotations/pom.xml
@@ -1,4 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
@@ -259,9 +276,9 @@
 		<plugins>
 			<plugin>
 				<!-- Checks for license headers. Use "mvn license:format" to update files. -->
-                <groupId>com.mycila.maven-license-plugin</groupId>
-                <artifactId>maven-license-plugin</artifactId>
-                <version>1.9.0</version>
+                <groupId>com.mycila</groupId>
+                <artifactId>license-maven-plugin</artifactId>
+                <version>2.6</version>
 				<configuration>
 					<header>src/etc/header.txt</header>
 					<excludes>

From f82dc918a1f2565a016244db932d2834621e2fec Mon Sep 17 00:00:00 2001
From: WonderCsabo <kozakcsabi@gmail.com>
Date: Mon, 20 Oct 2014 17:48:46 +0200
Subject: [PATCH 3/5] Check JavaDoc with Checkstyle for all annotations

---
 .../annotations/AfterTextChange.java               |  8 +++++
 .../androidannotations/annotations/Background.java |  4 ---
 .../org/androidannotations/annotations/Bean.java   |  4 +++
 .../annotations/BeforeTextChange.java              |  6 ++++
 .../annotations/CheckedChange.java                 | 10 +++++-
 .../org/androidannotations/annotations/Click.java  |  9 ++++-
 .../annotations/CustomTitle.java                   |  4 +++
 .../androidannotations/annotations/EActivity.java  |  7 ++++
 .../org/androidannotations/annotations/EBean.java  | 12 +++++--
 .../androidannotations/annotations/EFragment.java  |  7 ++++
 .../androidannotations/annotations/EViewGroup.java |  7 ++++
 .../annotations/EditorAction.java                  | 14 +++++---
 .../org/androidannotations/annotations/Extra.java  |  3 ++
 .../annotations/FocusChange.java                   |  9 +++--
 .../annotations/FragmentArg.java                   |  3 ++
 .../annotations/FragmentById.java                  | 12 +++++--
 .../annotations/FragmentByTag.java                 |  9 +++--
 .../androidannotations/annotations/FromHtml.java   |  7 ++++
 .../annotations/HttpsClient.java                   | 25 +++++++++++++
 .../androidannotations/annotations/ItemClick.java  | 11 ++++--
 .../annotations/ItemLongClick.java                 | 11 ++++--
 .../androidannotations/annotations/ItemSelect.java | 11 ++++--
 .../androidannotations/annotations/LongClick.java  |  7 ++++
 .../annotations/OnActivityResult.java              |  7 ++++
 .../annotations/OptionsItem.java                   |  6 ++++
 .../annotations/OptionsMenu.java                   |  7 ++++
 .../annotations/OptionsMenuItem.java               | 11 ++++--
 .../androidannotations/annotations/OrmLiteDao.java |  4 +++
 .../androidannotations/annotations/Receiver.java   | 34 ++++++++++++++++--
 .../annotations/ReceiverAction.java                | 16 ++++++---
 .../org/androidannotations/annotations/ResId.java  | 10 ++++++
 .../androidannotations/annotations/RoboGuice.java  |  2 --
 .../annotations/SeekBarProgressChange.java         |  6 ++++
 .../annotations/SeekBarTouchStart.java             |  6 ++++
 .../annotations/SeekBarTouchStop.java              |  6 ++++
 .../annotations/ServiceAction.java                 |  2 --
 .../annotations/SupposeBackground.java             |  4 +--
 .../androidannotations/annotations/TextChange.java |  6 ++++
 .../org/androidannotations/annotations/Touch.java  |  7 ++++
 .../org/androidannotations/annotations/Trace.java  | 11 +++++-
 .../androidannotations/annotations/UiThread.java   | 28 ++++++++++-----
 .../androidannotations/annotations/ViewById.java   |  7 ++++
 .../androidannotations/annotations/ViewsById.java  | 32 ++++++++++-------
 .../androidannotations/annotations/WakeLock.java   | 41 ++++++++++++++++++----
 .../annotations/WindowFeature.java                 |  4 ++-
 .../annotations/res/AnimationRes.java              |  7 ++++
 .../annotations/res/BooleanRes.java                |  7 ++++
 .../annotations/res/ColorRes.java                  |  7 ++++
 .../annotations/res/ColorStateListRes.java         |  8 +++++
 .../annotations/res/DimensionPixelOffsetRes.java   |  8 +++++
 .../annotations/res/DimensionPixelSizeRes.java     |  8 +++++
 .../annotations/res/DimensionRes.java              |  7 ++++
 .../annotations/res/DrawableRes.java               |  7 ++++
 .../annotations/res/HtmlRes.java                   |  7 ++++
 .../annotations/res/IntArrayRes.java               |  7 ++++
 .../annotations/res/IntegerRes.java                |  7 ++++
 .../annotations/res/LayoutRes.java                 |  7 ++++
 .../annotations/res/MovieRes.java                  |  7 ++++
 .../annotations/res/StringArrayRes.java            |  6 ++++
 .../annotations/res/StringRes.java                 |  6 ++++
 .../annotations/res/TextArrayRes.java              |  7 ++++
 .../annotations/res/TextRes.java                   |  7 ++++
 .../annotations/rest/Accept.java                   |  6 ++++
 .../annotations/rest/Delete.java                   |  4 +++
 .../androidannotations/annotations/rest/Get.java   |  4 +++
 .../androidannotations/annotations/rest/Head.java  |  4 +++
 .../annotations/rest/Options.java                  |  4 +++
 .../androidannotations/annotations/rest/Post.java  |  4 +++
 .../androidannotations/annotations/rest/Put.java   |  4 +++
 .../annotations/rest/RequiresCookie.java           |  4 +++
 .../annotations/rest/RequiresCookieInUrl.java      |  4 +++
 .../annotations/rest/RequiresHeader.java           |  4 +++
 .../androidannotations/annotations/rest/Rest.java  | 15 ++++++++
 .../annotations/rest/SetsCookie.java               |  3 ++
 .../sharedpreferences/DefaultBoolean.java          |  7 ++++
 .../sharedpreferences/DefaultFloat.java            |  7 ++++
 .../annotations/sharedpreferences/DefaultInt.java  |  7 ++++
 .../annotations/sharedpreferences/DefaultLong.java |  7 ++++
 .../annotations/sharedpreferences/DefaultRes.java  | 11 ++++++
 .../sharedpreferences/DefaultString.java           |  7 ++++
 .../sharedpreferences/DefaultStringSet.java        |  3 ++
 .../annotations/sharedpreferences/SharedPref.java  | 37 ++++++++++++++++++-
 AndroidAnnotations/checkstyle-checks.xml           |  7 ++--
 AndroidAnnotations/checkstyle-suppressions.xml     | 25 +++++++++++++
 AndroidAnnotations/pom.xml                         |  1 +
 85 files changed, 681 insertions(+), 75 deletions(-)
 create mode 100644 AndroidAnnotations/checkstyle-suppressions.xml

diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
index f448bb0..bc726c2 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
@@ -74,8 +74,16 @@
 @Target(ElementType.METHOD)
 public @interface AfterTextChange {
 
+	/**
+	 * The R.id.* fields which refer to the TextViews.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as a strings which refer to the TextViews.
+	 * 
+	 * @return
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
index e59a2c2..2712949 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
@@ -181,15 +181,12 @@
 	 * boolean mayInterruptIfRunning = true;
 	 * BackgroundExecutor.cancelAll(&quot;my_background_id&quot;, mayInterruptIfRunning);
 	 * </pre>
-	 *
-	 * @return the identifier for task cancellation
 	 **/
 	String id() default "";
 
 	/**
 	 * Minimum delay, in milliseconds, before the background task is executed.
 	 *
-	 * @return the minimum delay before execution
 	 */
 	int delay() default 0;
 
@@ -199,7 +196,6 @@
 	 * All background tasks having the same <code>serial</code> will be executed
 	 * sequentially.
 	 *
-	 * @return the serial execution group
 	 **/
 	String serial() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java
index b60a062..bf0a726 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java
@@ -60,5 +60,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface Bean {
+
+	/**
+	 * The implementation class.
+	 */
 	Class<?> value() default Void.class;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java
index 2b97910..66219aa 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java
@@ -82,8 +82,14 @@
 @Target(ElementType.METHOD)
 public @interface BeforeTextChange {
 
+	/**
+	 * The R.id.* fields which refer to the TextViews.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as a strings which refer to the TextViews.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java
index b1c7b29..2b39ab4 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java
@@ -69,12 +69,20 @@
  * 
  * </blockquote>
  * 
- * @author Rostislav Chekan
  */
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface CheckedChange {
+
+	/**
+	 * The R.id.* fields which refer to the CompoundButtons or subclasses of
+	 * CompoundButton.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the CompoundButtons or
+	 * subclasses of CompoundButton.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java
index b5390be..4a4423e 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java
@@ -34,7 +34,8 @@
  * The method MAY have one parameter:
  * </p>
  * <ul>
- * <li>A {@link android.view.View} parameter to know which view has been clicked</li>
+ * <li>A {@link android.view.View} parameter to know which view has been clicked
+ * </li>
  * </ul>
  * <blockquote>
  * 
@@ -61,8 +62,14 @@
 @Target(ElementType.METHOD)
 public @interface Click {
 
+	/**
+	 * The R.id.* fields which refer to the Views.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the Views.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java
index 0688073..a9f638b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java
@@ -44,5 +44,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
 public @interface CustomTitle {
+
+	/**
+	 * R.layout.* field which refers the the title layout.
+	 */
 	int value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java
index eba0f85..8bbb3e2 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java
@@ -87,7 +87,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
 public @interface EActivity {
+
+	/**
+	 * The R.layout.* field which refer to the layout.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refer to the layout.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java
index 2a81eea..c5c209a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java
@@ -41,8 +41,8 @@
  * Most annotations are supported in {@link EBean} classes, except the ones
  * related to extras. Views related annotations will only work if the bean was
  * injected in an activity with a layout containing the views you're dealing
- * with. If your bean needs a {@link android.content.Context} you can inject on by
- * using an {@link RootContext} annotated field.
+ * with. If your bean needs a {@link android.content.Context} you can inject on
+ * by using an {@link RootContext} annotated field.
  * </p>
  * <p>
  * Beans have two possible scopes : default or singleton. Default scope should
@@ -91,10 +91,13 @@
 @Target(ElementType.TYPE)
 public @interface EBean {
 
+	/**
+	 * The scope of an enhanced bean.
+	 */
 	public enum Scope {
 
 		/**
-		 * A new instance of the bean is created each time it is needed
+		 * A new instance of the bean is created each time it is needed.
 		 */
 		Default, //
 
@@ -105,6 +108,9 @@
 		Singleton, //
 	}
 
+	/**
+	 * The scope of the enhanced bean.
+	 */
 	Scope scope() default Scope.Default;
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java
index 395fa97..f9b716b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java
@@ -108,8 +108,15 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
 public @interface EFragment {
+
+	/**
+	 * The R.layout.* field which refer to the layout.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refer to the layout.
+	 */
 	String resName() default "";
 
 	/**
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java
index 4d58be2..fbb59d7 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java
@@ -75,7 +75,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
 public @interface EViewGroup {
+
+	/**
+	 * The R.layout.* field which refer to the layout.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refer to the layout.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java
index 9cfb53d..245a20f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java
@@ -57,22 +57,22 @@
  * void onEditorActionsOnHelloTextView(TextView hello, int actionId, KeyEvent keyEvent) {
  * 	// Something Here
  * }
- *
+ * 
  * &#064;EditorAction
  * void <b>helloTextView</b>EditorAction(TextView hello) {
  * 	// Something Here
  * }
- *
+ * 
  * &#064;EditorAction(<b>{R.id.editText, R.id.helloTextView}</b>)
  * void onEditorActionsOnSomeTextViews(TextView tv, int actionId) {
  * 	// Something Here
  * }
- *
+ * 
  * &#064;EditorAction(<b>R.id.helloTextView</b>)
  * void onEditorActionsOnHelloTextView() {
  * 	// Something Here
  * }
- *
+ * 
  * &#064;EditorAction(R.id.helloTextView)
  * <b>boolean</b> onEditorActionsOnHelloTextView() {
  * 	// Something Here
@@ -86,8 +86,14 @@
 @Target(ElementType.METHOD)
 public @interface EditorAction {
 
+	/**
+	 * The R.id.* fields which refer to the TextViews.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as a strings which refer to the TextViews.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
index 80b3b5b..bbd2b1f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
@@ -80,5 +80,8 @@
 @Target(ElementType.FIELD)
 public @interface Extra {
 
+	/**
+	 * The key of the injected extra.
+	 */
 	String value() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java
index b763251..903442d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java
@@ -68,13 +68,18 @@
  * </pre>
  * 
  * </blockquote>
- * 
- * @author Rostislav Chekan
  */
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface FocusChange {
+
+	/**
+	 * The R.id.* fields which refer to the Views.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the Views.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
index 6b17c13..4780f78 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
@@ -72,5 +72,8 @@
 @Target(ElementType.FIELD)
 public @interface FragmentArg {
 
+	/**
+	 * The key of the injected Fragment argument.
+	 */
 	String value() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java
index 7dfed34..066d372 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java
@@ -22,9 +22,8 @@
 
 /**
  * <p>
- * Use it on android.app.Fragment or
- * android.support.v4.app.Fragment fields in activity classes to
- * retrieve and inject a fragment.
+ * Use it on android.app.Fragment or android.support.v4.app.Fragment fields in
+ * activity classes to retrieve and inject a fragment.
  * </p>
  * <p>
  * The annotation value should be one of R.id.* fields. If not set, the field
@@ -72,7 +71,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface FragmentById {
+
+	/**
+	 * The R.id.* field which is the id of the Fragment.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the id of the Fragment.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java
index 47ccc7a..c936d9f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java
@@ -22,9 +22,8 @@
 
 /**
  * <p>
- * Use it on android.app.Fragment or
- * android.support.v4.app.Fragment fields in activity classes to
- * retrieve and inject a fragment.
+ * Use it on android.app.Fragment or android.support.v4.app.Fragment fields in
+ * activity classes to retrieve and inject a fragment.
  * </p>
  * <p>
  * The annotation value should be one of fragment tag. If not set, the field
@@ -73,5 +72,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface FragmentByTag {
+
+	/**
+	 * The tag of the Fragment.
+	 */
 	String value() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
index 3839765..d40e747 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
@@ -58,7 +58,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface FromHtml {
+
+	/**
+	 * The R.string.* field which refers to the html string resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the html string resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
index d32a707..9d7638c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
@@ -89,19 +89,44 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface HttpsClient {
+
+	/**
+	 * The default value of {@link #trustStorePwd()} and {@link #keyStorePwd()}.
+	 */
 	String DEFAULT_PASSWD = "changeit";
 
+	/**
+	 * The R.id.* field id which refers to the trust store file.
+	 */
 	int trustStore() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the trust store file.
+	 */
 	String trustStoreResName() default "";
 
+	/**
+	 * The trust store password.
+	 */
 	String trustStorePwd() default DEFAULT_PASSWD;
 
+	/**
+	 * The R.id.* field id which refers to the key store file.
+	 */
 	int keyStore() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the key store file.
+	 */
 	String keyStoreResName() default "";
 
+	/**
+	 * The key store password.
+	 */
 	String keyStorePwd() default DEFAULT_PASSWD;
 
+	/**
+	 * <b>true</b> if authorizes any TLS/SSL hostname, <b>false</b> otherwise.
+	 */
 	boolean allowAllHostnames() default true;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java
index 6c8be37..9e75752 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java
@@ -23,8 +23,8 @@
 /**
  * <p>
  * This annotation is intended to be used on methods to receive events defined
- * by {@link
- * android.widget.AdapterView.OnItemClickListener#onItemClick(android.widget.AdapterView, android.view.View, int, long)}
+ * by
+ * {@link android.widget.AdapterView.OnItemClickListener#onItemClick(android.widget.AdapterView, android.view.View, int, long)}
  * when a list item has been clicked by the user.
  * </p>
  * <p>
@@ -68,7 +68,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface ItemClick {
+
+	/**
+	 * The R.id.* fields which refer to the AdapterViews.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the AdapterViews.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java
index 34b897e..4bc1fd9 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java
@@ -23,8 +23,8 @@
 /**
  * <p>
  * This annotation is intended to be used on methods to receive events defined
- * by {@link
- * android.widget.AdapterView.OnItemLongClickListener#onItemLongClick(android.widget.AdapterView, android.view.View, int, long)}
+ * by
+ * {@link android.widget.AdapterView.OnItemLongClickListener#onItemLongClick(android.widget.AdapterView, android.view.View, int, long)}
  * when a list item has been long clicked by the user.
  * </p>
  * <p>
@@ -68,7 +68,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface ItemLongClick {
+
+	/**
+	 * The R.id.* fields which refer to the AdapterViews.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the AdapterViews.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java
index 9afa8d7..6b9fd16 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java
@@ -23,8 +23,8 @@
 /**
  * <p>
  * This annotation is intended to be used on methods to receive events defined
- * by {@link
- * android.widget.AdapterView.OnItemSelectedListener#onItemSelected(android.widget.AdapterView, android.view.View, int, long)}
+ * by
+ * {@link android.widget.AdapterView.OnItemSelectedListener#onItemSelected(android.widget.AdapterView, android.view.View, int, long)}
  * when a list item has been selected by the user.
  * </p>
  * <p>
@@ -74,7 +74,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface ItemSelect {
+
+	/**
+	 * The R.id.* fields which refer to the AdapterViews.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the AdapterViews.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java
index 9600cbb..88ad78a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java
@@ -73,7 +73,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface LongClick {
+
+	/**
+	 * The R.id.* fields which refer to the Views.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the Views.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
index de12ea8..0142a83 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
@@ -78,6 +78,9 @@
 @Target(ElementType.METHOD)
 public @interface OnActivityResult {
 
+	/**
+	 * The <b>requestCode</b> associated with the given result.
+	 */
 	int value();
 
 	/**
@@ -119,6 +122,10 @@
 	@Retention(RetentionPolicy.CLASS)
 	@Target(ElementType.PARAMETER)
 	public @interface Extra {
+
+		/**
+		 * They key of the result data.
+		 */
 		String value() default "";
 	}
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java
index 7f61d68..105c57c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java
@@ -77,8 +77,14 @@
 @Target(ElementType.METHOD)
 public @interface OptionsItem {
 
+	/**
+	 * The R.id.* field which refers to the menu item.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the menu item.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java
index d491cd5..d8701fa 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java
@@ -57,7 +57,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
 public @interface OptionsMenu {
+
+	/**
+	 * The R.menu.* fields which refers to the menus.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refers to the menus.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java
index 01782c7..c0f41f9 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java
@@ -22,9 +22,8 @@
 
 /**
  * <p>
- * Use it on android.app.Fragment or
- * android.support.v4.app.Fragment fields in activity classes to inject
- * a menu item.
+ * Use it on android.app.Fragment or android.support.v4.app.Fragment fields in
+ * activity classes to inject a menu item.
  * </p>
  * <p>
  * The field MUST be of type {@link android.view.MenuItem} or
@@ -58,8 +57,14 @@
 @Target(ElementType.FIELD)
 public @interface OptionsMenuItem {
 
+	/**
+	 * The R.id.* fields which refers to the menu items.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refers to the menu items.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
index dee6596..67701fb 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
@@ -67,9 +67,13 @@
 @Target(ElementType.FIELD)
 public @interface OrmLiteDao {
 
+	/**
+	 * The class of the used database helper.
+	 */
 	Class<?> helper();
 
 	/**
+	 * The class of the model what this DAO can manage.
 	 * 
 	 * @deprecated Since <b>3.1</b> the model class is inferred from the type of
 	 *             the annotated field. This parameter will be removed in a
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java
index 3ea69aa..526cd5d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java
@@ -86,16 +86,46 @@
 @Target(ElementType.METHOD)
 public @interface Receiver {
 
+	/**
+	 * The strings indicating the actions which will spark the method.
+	 */
 	String[] actions();
 
+	/**
+	 * The strings indicating the data schemes which should be handled.
+	 */
 	String[] dataSchemes() default {};
 
+	/**
+	 * The event pair when the receiver should be registered/unregistered.
+	 */
 	RegisterAt registerAt() default RegisterAt.OnCreateOnDestroy;
 
+	/**
+	 * <b>true</b>, if LocalBroadcastManager should be used.
+	 */
 	boolean local() default false;
 
+	/**
+	 * Represents event pairs for BroadcastReceiver registration/unregistration.
+	 */
 	public enum RegisterAt {
-		OnCreateOnDestroy, OnStartOnStop, OnResumeOnPause, OnAttachOnDetach
+		/**
+		 * Register in the onCreate method, unregister in the onDestroy method.
+		 */
+		OnCreateOnDestroy, //
+		/**
+		 * Register in the onStart method, unregister in the onStop method.
+		 */
+		OnStartOnStop, //
+		/**
+		 * Register in the onResume method, unregister in the onPause method.
+		 */
+		OnResumeOnPause, //
+		/**
+		 * Register in the onAttach method, unregister in the onDetach method.
+		 */
+		OnAttachOnDetach
 	}
 
 	/**
@@ -115,8 +145,6 @@
 		/**
 		 * Define the extra's name. If this parameter isn't set the annotated
 		 * parameter name will be used.
-		 *
-		 * @return the extra's name
 		 */
 		String value() default "";
 	}
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java
index c953588..c4e4069 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java
@@ -30,7 +30,15 @@
  * The class MAY contain several {@link ReceiverAction} annotated methods.
  * </p>
  * <p>
- * The method annotated with {@link ReceiverAction} may have as parameters :
+ * The method annotated with {@link ReceiverAction} may have as parameters : - A
+ * {@link android.content.Context} which will be the context given in
+ * {@code void onReceive(Context context, Intent intent)} - A
+ * {@link android.content.Intent} which will be the intent given in
+ * {@code void onReceive(Context context, Intent intent)} - Some any native,
+ * {@link android.os.Parcelable} or {@link java.io.Serializable} parameters
+ * annotated with {@link ReceiverAction.Extra} which will be the extra put in
+ * the intent. The key of this extra is the value of the annotation
+ * {@link ReceiverAction.Extra} if set or the name of the parameter.
  * </p>
  * <ul>
  * <li>A {@link android.content.Context} which will be the context given in
@@ -96,8 +104,6 @@
 	/**
 	 * Define a set of actions this method should handle. If this field isn't
 	 * set the annotated method name will be used.
-	 *
-	 * @return the actions
 	 */
 	String[] value() default {};
 
@@ -126,8 +132,8 @@
 		/**
 		 * Define the extra's name. If this parameter isn't set the annotated
 		 * parameter name will be used.
-		 *
-		 * @return the extra's name
+		 * 
+		 * @return the name of the extra
 		 */
 		String value() default "";
 	}
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ResId.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ResId.java
index 2843e5f..a0b740e 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ResId.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ResId.java
@@ -15,10 +15,20 @@
  */
 package org.androidannotations.annotations;
 
+/**
+ * This class holds the default resource id.
+ */
 public abstract class ResId {
 
+	/**
+	 * This value is used when the client does not defines the resource id for a
+	 * resource.
+	 */
 	public static final int DEFAULT_VALUE = -1;
 
+	/**
+	 * Utility classes should not be instantiated.
+	 */
 	private ResId() {
 	}
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java
index 9dbb704..0f7a73b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java
@@ -68,8 +68,6 @@
 	/**
 	 * The RoboGuice listener classes to bind to this activity. Will add an
 	 * injected listener field to the subclass.
-	 *
-	 * @return The RoboGuice listener classes to bind to this activity
 	 */
 	Class<?>[] value() default {};
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java
index adaf5a4..c31ec5c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java
@@ -82,8 +82,14 @@
 @Target(ElementType.METHOD)
 public @interface SeekBarProgressChange {
 
+	/**
+	 * The R.id.* fields which refer to the SeekBars.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the SeekBars.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
index 60f33d0..7670cba 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
@@ -78,8 +78,14 @@
 @Target(ElementType.METHOD)
 public @interface SeekBarTouchStart {
 
+	/**
+	 * The R.id.* fields which refer to the SeekBars.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the SeekBars.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
index 8b696f4..c71cffe 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
@@ -78,8 +78,14 @@
 @Target(ElementType.METHOD)
 public @interface SeekBarTouchStop {
 
+	/**
+	 * The R.id.* fields which refer to the SeekBars.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the SeekBars.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java
index 3803cfa..a2822fa 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java
@@ -96,8 +96,6 @@
 	/**
 	 * Define the action's name. If this field isn't set the annotated method
 	 * name will be used.
-	 *
-	 * @return the action's name
 	 */
 	String value() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
index 31c690a..3686947 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
@@ -60,8 +60,8 @@
 public @interface SupposeBackground {
 
 	/**
-	 * @return Allowed serials to restrict a calling thread. If it is an empty
-	 *         list, then any background thread is allowed.
+	 * Allowed serials to restrict a calling thread. If it is an empty list,
+	 * then any background thread is allowed.
 	 *
 	 * @see org.androidannotations.api.BackgroundExecutor#checkBgThread(String...)
 	 */
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java
index 0eb6269..5622594 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java
@@ -81,8 +81,14 @@
 @Target(ElementType.METHOD)
 public @interface TextChange {
 
+	/**
+	 * The R.id.* fields which refer to the TextViews.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as a strings which refer to the TextViews.
+	 */
 	String[] resName() default "";
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
index 15f7c71..ed3ccd5 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
@@ -74,7 +74,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface Touch {
+
+	/**
+	 * The R.id.* fields which refer to the Views.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource names as strings which refer to the Views.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
index 357cfe7..826550e 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
@@ -29,7 +29,7 @@
  * </p>
  * <p>
  * Since <i>AndroidAnnotations 3.1</i> log messages contain the method parameter
- * and return values
+ * and return values.
  * </p>
  * <p>
  * All annotation values are optional :
@@ -72,10 +72,19 @@
 @Target(ElementType.METHOD)
 public @interface Trace {
 
+	/**
+	 * The string indicating that no tag was given for the log message.
+	 */
 	String DEFAULT_TAG = "NO_TAG";
 
+	/**
+	 * The tag used for the log message.
+	 */
 	String tag() default DEFAULT_TAG;
 
+	/**
+	 * The log level used for the log message.
+	 */
 	int level() default Log.INFO;
 
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
index 8d462ce..fcb5a18 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
@@ -93,20 +93,32 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface UiThread {
+
+	/**
+	 * The delay of the execution in milliseconds.
+	 */
 	long delay() default 0;
 
 	/**
-	 * If propagation = REUSE, the method will check first if it is inside the
-	 * UI thread already. If so, it will directly call the method instead of
-	 * using the handler. The default value is ENQUEUE, which will always call
-	 * the handler.
-	 * 
-	 * @return whether the method should be posted or executed if it's in the UI
-	 *         thread
+	 * If propagation is {@link Propagation#REUSE}, the method will check first
+	 * if it is inside the UI thread already. If so, it will directly call the
+	 * method instead of using the handler. The default value is
+	 * {@link Propagation#ENQUEUE}, which will always call the handler.
 	 */
 	Propagation propagation() default Propagation.ENQUEUE;
 
+	/**
+	 * Indicates the propagation behavior of the UiThread annotated method.
+	 */
 	public enum Propagation {
-		ENQUEUE, REUSE
+
+		/**
+		 * The method will always call the Handler.
+		 */
+		ENQUEUE, //
+		/**
+		 * The method will check first if it is inside the UI thread already.
+		 */
+		REUSE
 	}
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java
index f28a584..80cc5ba 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java
@@ -63,7 +63,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface ViewById {
+
+	/**
+	 * The R.id.* field which refers to the injected View.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the injected View.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java
index 5cb959f..2973bcb 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java
@@ -22,16 +22,18 @@
 
 /**
  * <p>
- * Use it on a {@link java.util.List} of {@link android.view.View} or {@link android.view.View} subtype
- * fields in a view related (ie {@link org.androidannotations.annotations.EActivity}, {@link org.androidannotations.annotations.EFragment},
+ * Use it on a {@link java.util.List} of {@link android.view.View} or
+ * {@link android.view.View} subtype fields in a view related (ie
+ * {@link org.androidannotations.annotations.EActivity},
+ * {@link org.androidannotations.annotations.EFragment},
  * {@link org.androidannotations.annotations.EViewGroup}, ...) annotated class.
  * </p>
  * <p>
  * The annotation value should be an array of R.id.* fields.
  * </p>
  * <p>
- * Your code related to injected views should go in an {@link org.androidannotations.annotations.AfterViews}
- * annotated method.
+ * Your code related to injected views should go in an
+ * {@link org.androidannotations.annotations.AfterViews} annotated method.
  * </p>
  * <blockquote>
  *
@@ -40,19 +42,19 @@
  * <pre>
  * &#064;EActivity(R.layout.main)
  * public class MyActivity extends Activity {
- *
+ * 
  * 	// Injects R.id.edit1 and R.id.edit2 into the List.
- * 	&#064;ViewsById({R.id.edit1, R.id.edit2})
+ * 	&#064;ViewsById({ R.id.edit1, R.id.edit2 })
  * 	List&lt;EditText&gt; myEditTexts;
- *
- * 	&#064;ViewsById({R.id.myTextView1, R.id.myOtherTextView})
+ * 
+ * 	&#064;ViewsById({ R.id.myTextView1, R.id.myOtherTextView })
  * 	List&lt;TextView&gt; textViews;
- *
+ * 
  * 	&#064;AfterViews
  * 	void updateTextWithDate() {
- * 	    for (TextView textView : textViews) {
- *   		textView.setText(&quot;Date: &quot; + new Date());
- *   	}
+ * 		for (TextView textView : textViews) {
+ * 			textView.setText(&quot;Date: &quot; + new Date());
+ * 		}
  * 	}
  * }
  * </pre>
@@ -65,7 +67,13 @@
 @Target(ElementType.FIELD)
 public @interface ViewsById {
 
+	/**
+	 * The array of R.id.* fields which refer to the injected Views.
+	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The array resource names which refer to the injected Views.
+	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java
index 875af7a..45268e3 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java
@@ -52,44 +52,73 @@
 @Target(ElementType.METHOD)
 public @interface WakeLock {
 
+	/**
+	 * Indicates the client did not give a tag.
+	 */
 	String DEFAULT_TAG = "NO_TAG";
 
+	/**
+	 * The tag of the WakeLock.
+	 * 
+	 * @see {@link android.os.PowerManager#newWakeLock(int, String)}
+	 */
 	String tag() default DEFAULT_TAG;
 
+	/**
+	 * The level of the created {@link android.os.PowerManager.WakeLock
+	 * WakeLock}.
+	 * 
+	 * @see {@link android.os.PowerManager#newWakeLock(int, String)}
+	 */
 	Level level() default Level.PARTIAL_WAKE_LOCK;
 
+	/**
+	 * The optional flags for the created
+	 * {@link android.os.PowerManager.WakeLock WakeLock}.
+	 * 
+	 * @see {@link android.os.PowerManager#newWakeLock(int, String)}
+	 */
 	Flag[] flags() default {};
 
+	/**
+	 * A convenience wrapper enum for the
+	 * {@link android.os.PowerManager.WakeLock WakeLock} level integer values.
+	 */
 	public enum Level {
 		/**
-		 * @see android.os.PowerManager#FULL_WAKE_LOCK
+		 * Represents {@link android.os.PowerManager#FULL_WAKE_LOCK}.
 		 */
 		FULL_WAKE_LOCK,
 
 		/**
-		 * @see android.os.PowerManager#PARTIAL_WAKE_LOCK
+		 * Represents {@link android.os.PowerManager#PARTIAL_WAKE_LOCK}.
 		 */
 		PARTIAL_WAKE_LOCK,
 
 		/**
-		 * @see android.os.PowerManager#SCREEN_BRIGHT_WAKE_LOCK
+		 * Represents {@link android.os.PowerManager#SCREEN_BRIGHT_WAKE_LOCK}.
 		 */
 		SCREEN_BRIGHT_WAKE_LOCK,
 
 		/**
-		 * @see android.os.PowerManager#SCREEN_DIM_WAKE_LOCK
+		 * Represents {@link android.os.PowerManager#SCREEN_DIM_WAKE_LOCK}.
 		 */
 		SCREEN_DIM_WAKE_LOCK;
 	}
 
+	/**
+	 * A convenience wrapper enum for the
+	 * {@link android.os.PowerManager.WakeLock WakeLock} flag integer values.
+	 */
 	public enum Flag {
+
 		/**
-		 * @see android.os.PowerManager#ACQUIRE_CAUSES_WAKEUP
+		 * Represents {@link android.os.PowerManager#ACQUIRE_CAUSES_WAKEUP}.
 		 */
 		ACQUIRE_CAUSES_WAKEUP,
 
 		/**
-		 * @see android.os.PowerManager#ON_AFTER_RELEASE
+		 * Represents {@link android.os.PowerManager#ON_AFTER_RELEASE}.
 		 */
 		ON_AFTER_RELEASE
 	}
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java
index c0e56a2..720a7a1 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java
@@ -51,6 +51,8 @@
 @Target(ElementType.TYPE)
 public @interface WindowFeature {
 
+	/**
+	 * An array of integers which are <code>Window.FEATURE_*</code> fields.
+	 */
 	int[] value();
-
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
index c844959..ad54416 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface AnimationRes {
+
+	/**
+	 * The R.anim.* field which refers to the animation.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the animation.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
index 8a4ceed..014c296 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface BooleanRes {
+
+	/**
+	 * The R.boolean.* field which refers to the boolean resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the boolean resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
index f72b18f..2d2695e 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface ColorRes {
+
+	/**
+	 * The R.color.* field which refers to the color resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the color resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
index 332e161..85d2fc5 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
@@ -35,7 +35,15 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface ColorStateListRes {
+
+	/**
+	 * The R.color.* field which refers to the ColorStateList resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the ColorStateList
+	 * resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
index 3ec4af1..2f14148 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
@@ -36,7 +36,15 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface DimensionPixelOffsetRes {
+
+	/**
+	 * The R.dimen.* field which refers to the dimension pixel offset resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as string which refers to the dimension pixel offset
+	 * resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
index d78ee23..dd31005 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
@@ -36,7 +36,15 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface DimensionPixelSizeRes {
+
+	/**
+	 * The R.dimen.* field which refers to the dimension pixel size resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as string which refers to the dimension pixel size
+	 * resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
index 2461ac7..dc4a3d7 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface DimensionRes {
+
+	/**
+	 * The resource name as string which refers to the dimension resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as string which refers to the dimension resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
index 8e23731..1fc1212 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface DrawableRes {
+
+	/**
+	 * The R.id.* field which refers to the drawable resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the drawable resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
index 378a777..acc9e27 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
@@ -36,7 +36,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface HtmlRes {
+
+	/**
+	 * The R.id.* field which refers to the HTML string resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the HTML string resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
index b886468..b266e7f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
@@ -36,7 +36,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface IntArrayRes {
+
+	/**
+	 * The R.array.* field which refers to the integer array resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the integer array resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
index 3f2aea6..632b313 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface IntegerRes {
+
+	/**
+	 * The R.integer.* field which refers to the integer resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the integer resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
index b818c67..31c587a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface LayoutRes {
+
+	/**
+	 * The R.layout.* field which refers to the layout resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the layout resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
index c3a36a6..162a4df 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface MovieRes {
+
+	/**
+	 * The R.movie.* field which refers to the movie resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the movie resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
index f191d98..386475f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
@@ -36,7 +36,13 @@
 @Target(ElementType.FIELD)
 public @interface StringArrayRes {
 
+	/**
+	 * The R.array.* field which refers to the string array resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the string array resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
index f663845..4d03843 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
@@ -36,7 +36,13 @@
 @Target(ElementType.FIELD)
 public @interface StringRes {
 
+	/**
+	 * The R.string.* field which refers to the string resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the string resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
index c80e71c..197bc25 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface TextArrayRes {
+
+	/**
+	 * The R.array.* field which refers to the text array resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers to the text array resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
index 0e2f3ad..2dc1fd4 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
@@ -35,7 +35,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.FIELD)
 public @interface TextRes {
+
+	/**
+	 * The R.string.* field which refers to the text resource.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name as a string which refers to the text resource.
+	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
index a1fd7bf..ed24c1a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
@@ -62,5 +62,11 @@
 @Retention(RetentionPolicy.CLASS)
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface Accept {
+
+	/**
+	 * The accepted media type.
+	 * 
+	 * @see {@link org.androidannotations.api.rest.MediaType MediaType}
+	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java
index fe8a56e..32de743 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java
@@ -56,5 +56,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface Delete {
+
+	/**
+	 * The URI or the full URL of the web service.
+	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java
index aa5772c..08cbe66 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java
@@ -75,5 +75,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface Get {
+
+	/**
+	 * The URI or the full URL of the web service.
+	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java
index ab5c722..d2af95c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java
@@ -57,5 +57,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface Head {
+
+	/**
+	 * The URI or the full URL of the web service.
+	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
index d5c8e3b..e560988 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
@@ -57,5 +57,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface Options {
+
+	/**
+	 * The URI or the full URL of the web service.
+	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java
index 541cc36..38030de 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java
@@ -60,5 +60,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface Post {
+
+	/**
+	 * The URI or the full URL of the web service.
+	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java
index 5099076..b02c134 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java
@@ -56,5 +56,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface Put {
+
+	/**
+	 * The URI or the full URL of the web service.
+	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
index 3df7e2c..570aebf 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
@@ -81,5 +81,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface RequiresCookie {
+
+	/**
+	 * The names of the cookies.
+	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
index 16a70dc..8f6cfb1 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
@@ -37,5 +37,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface RequiresCookieInUrl {
+
+	/**
+	 * The names of the cookies.
+	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
index 88ad0ef..ebd2ece 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
@@ -81,5 +81,9 @@
 @Retention(RetentionPolicy.CLASS)
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface RequiresHeader {
+
+	/**
+	 * The names of the headers.
+	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
index f1ab516..63769dc 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
@@ -202,11 +202,26 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
 public @interface Rest {
+
+	/**
+	 * The root url of the webservice.
+	 */
 	String rootUrl() default "";
 
+	/**
+	 * The classes of the converters which should be used to convert received
+	 * data into Java objects.
+	 */
 	Class<?>[] converters();
 
+	/**
+	 * The classes of interceptors which are used to do extra processing before
+	 * or after requests.
+	 */
 	Class<?>[] interceptors() default {};
 
+	/**
+	 * TODO .
+	 */
 	Class<?> requestFactory() default Void.class;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
index 03afdc5..c7feb1f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
@@ -62,5 +62,8 @@
 @Target({ ElementType.METHOD, ElementType.TYPE })
 public @interface SetsCookie {
 
+	/**
+	 * The names of the cookies to be kept.
+	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
index a0d466d..fe00636 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
@@ -39,7 +39,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface DefaultBoolean {
+
+	/**
+	 * The default value of the preference.
+	 */
 	boolean value();
 
+	/**
+	 * The R.string.* field which refers to the key of the preference.
+	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
index cd4b56a..ebaa9ee 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
@@ -39,7 +39,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface DefaultFloat {
+
+	/**
+	 * The default value of the preference.
+	 */
 	float value();
 
+	/**
+	 * The R.string.* field which refers to the key of the preference.
+	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
index 12bc2d8..8d93e8b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
@@ -39,7 +39,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface DefaultInt {
+
+	/**
+	 * The default value of the preference.
+	 */
 	int value();
 
+	/**
+	 * The R.string.* field which refers to the key of the preference.
+	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
index a1bde5a..0201a94 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
@@ -39,7 +39,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface DefaultLong {
+
+	/**
+	 * The default value of the preference.
+	 */
 	long value();
 
+	/**
+	 * The R.string.* field which refers to the key of the preference.
+	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
index cb5ee53..7aa9f86 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
@@ -41,9 +41,20 @@
 @Target(ElementType.METHOD)
 public @interface DefaultRes {
 
+	/**
+	 * The R.id.* field which refers the the resource which is used as the
+	 * default value of the preference.
+	 */
 	int value() default ResId.DEFAULT_VALUE;
 
+	/**
+	 * The resource name which refers the the resource which is used as the
+	 * default value of the preference.
+	 */
 	String resName() default "";
 
+	/**
+	 * The R.string.* field which refers to the key of the preference.
+	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
index cc60797..12c22a6 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
@@ -39,7 +39,14 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.METHOD)
 public @interface DefaultString {
+
+	/**
+	 * The default value of the preference.
+	 */
 	String value();
 
+	/**
+	 * The R.string.* field which refers to the key of the preference.
+	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java
index f0b81b6..648a8fe 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java
@@ -50,5 +50,8 @@
 @Target(ElementType.METHOD)
 public @interface DefaultStringSet {
 
+	/**
+	 * The R.string.* field which refers to the key of the preference.
+	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
index 7f82c1f..8134931 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
@@ -70,11 +70,46 @@
 @Retention(RetentionPolicy.CLASS)
 @Target(ElementType.TYPE)
 public @interface SharedPref {
+
+	/**
+	 * Represents the scope of a SharedPreference.
+	 */
 	public enum Scope {
-		APPLICATION_DEFAULT, ACTIVITY, ACTIVITY_DEFAULT, UNIQUE;
+		/**
+		 * The default shared SharedPreference.
+		 */
+		APPLICATION_DEFAULT, //
+		/**
+		 * The name of the SharedPreference will contain the name of the
+		 * Activity and the name annotated interface.
+		 */
+		ACTIVITY, //
+
+		/**
+		 * The name of the SharedPreference will contain the name of the
+		 * Activity (also available through activity.getPreferences()).
+		 */
+		ACTIVITY_DEFAULT, //
+
+		/**
+		 * The name of the SharedPreference will be the name of the annotated
+		 * interface.
+		 */
+		UNIQUE;
 	}
 
+	/**
+	 * The scope of the preferences, this will change the name of the
+	 * SharedPreference.
+	 */
 	Scope value() default Scope.ACTIVITY;
 
+	/**
+	 * The operating mode.
+	 * 
+	 * @see Context#MODE_PRIVATE
+	 * @see Context#MODE_WORLD_READABLE
+	 * @see Context#MODE_WORLD_WRITEABLE
+	 */
 	int mode() default Context.MODE_PRIVATE;
 }
diff --git a/AndroidAnnotations/checkstyle-checks.xml b/AndroidAnnotations/checkstyle-checks.xml
index 86c7a75..4844672 100644
--- a/AndroidAnnotations/checkstyle-checks.xml
+++ b/AndroidAnnotations/checkstyle-checks.xml
@@ -127,8 +127,11 @@
 		<module name="UpperEll" />
 		<module name="OuterTypeFilename" />
 		<module name="OuterTypeNumber" />
+		<module name="JavadocType" />
+		<module name="JavadocMethod" />
+		<module name="JavadocVariable" />
+		<module name="JavadocStyle" />
 	</module>
 	<module name="FileLength" />
-	<module name="SuppressionCommentFilter">
-	</module>
+	<module name="SuppressionCommentFilter" />
 </module>
diff --git a/AndroidAnnotations/checkstyle-suppressions.xml b/AndroidAnnotations/checkstyle-suppressions.xml
new file mode 100644
index 0000000..bbccf22
--- /dev/null
+++ b/AndroidAnnotations/checkstyle-suppressions.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<!--
+
+    Copyright (C) 2010-2014 eBusiness Information, Excilys Group
+
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not
+    use this file except in compliance with the License. You may obtain a copy of
+    the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed To in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+    License for the specific language governing permissions and limitations under
+    the License.
+
+-->
+<!DOCTYPE suppressions PUBLIC "-//Puppy Crawl//DTD Suppressions 1.1//EN"
+    "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
+
+<suppressions>
+    <suppress files="org[\\/]androidannotations[\\/](?:[^\\/]+$|(?!annotations)[^\\/]+[\\/])" checks="JavadocType|JavadocMethod|JavadocVariable|JavadocStyle" />
+    <suppress files="com[\\/]" checks="JavadocType|JavadocMethod|JavadocVariable|JavadocStyle" />
+</suppressions>
\ No newline at end of file
diff --git a/AndroidAnnotations/pom.xml b/AndroidAnnotations/pom.xml
index dd8d0e7..a6e4328 100644
--- a/AndroidAnnotations/pom.xml
+++ b/AndroidAnnotations/pom.xml
@@ -268,6 +268,7 @@
 					<version>2.13</version>
 					<configuration>
 						<configLocation>checkstyle-checks.xml</configLocation>
+						<suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
 						<consoleOutput>true</consoleOutput>
 					</configuration>
 				</plugin>

From f643816642a45696900f76deb20ed2991154547a Mon Sep 17 00:00:00 2001
From: WonderCsabo <kozakcsabi@gmail.com>
Date: Mon, 20 Oct 2014 17:56:54 +0200
Subject: [PATCH 4/5] Move Checkstyle execution to a separate profile for
 Travis

It can be really annoying for contributors for always fixing the code
due to broken build by Checkstyle even before starting implementing a
feature. That's why the Checkstyle execution is moved to a separate
profile what will be used by Travis CI. Contributors are still
encouraged to run Checkstyle manually before pushing code, but Travis
will reject malformatted code in the PRs anyway.
---
 .travis.yml                |  2 +-
 AndroidAnnotations/pom.xml | 29 ++++++++++++++++++-----------
 2 files changed, 19 insertions(+), 12 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index dc00c11..35db80c 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -22,7 +22,7 @@ before_script:
   - export TERM=dumb
 
 script:
-  - mvn -f AndroidAnnotations/pom.xml install
+  - mvn -f AndroidAnnotations/pom.xml install -P travis
   - mvn -f examples/maveneclipse/pom.xml install -Dandroidannotations.version=3.3-SNAPSHOT
   - ./examples/gradle/gradlew build --build-file examples/gradle/build.gradle
 
diff --git a/AndroidAnnotations/pom.xml b/AndroidAnnotations/pom.xml
index a6e4328..a94bd9f 100644
--- a/AndroidAnnotations/pom.xml
+++ b/AndroidAnnotations/pom.xml
@@ -315,17 +315,6 @@
 					</execution>
 				</executions>
 			</plugin>
-			<plugin>
-				<artifactId>maven-checkstyle-plugin</artifactId>
-				<executions>
-					<execution>
-						<phase>process-sources</phase>
-						<goals>
-							<goal>check</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
 		</plugins>
 	</build>
 
@@ -364,6 +353,24 @@
 				</plugins>
 			</build>
 		</profile>
+		<profile>
+			<id>travis</id>
+			<build>
+				<plugins>
+					<plugin>
+						<artifactId>maven-checkstyle-plugin</artifactId>
+						<executions>
+							<execution>
+								<phase>process-sources</phase>
+								<goals>
+									<goal>check</goal>
+								</goals>
+							</execution>
+						</executions>
+					</plugin>
+				</plugins>
+			</build>
+		</profile>
 	</profiles>
 
 	<reporting>

From 11e5621be9e78164e5d802332effe6209881b2b0 Mon Sep 17 00:00:00 2001
From: WonderCsabo <kozakcsabi@gmail.com>
Date: Mon, 20 Oct 2014 20:43:48 +0200
Subject: [PATCH 5/5] Adding @return to all method JavaDoc

JDK8 JavaDoc needs @return on all non-void methods. Unfortunetaly
Checkstyle does not know about this
(http://sourceforge.net/p/checkstyle/bugs/543/), so we have to disable
the JavaDocMethod check for now.
---
 .../androidannotations/annotations/AfterTextChange.java |  4 +++-
 .../org/androidannotations/annotations/Background.java  |  4 ++++
 .../java/org/androidannotations/annotations/Bean.java   |  4 +++-
 .../annotations/BeforeTextChange.java                   |  4 ++++
 .../androidannotations/annotations/CheckedChange.java   |  4 ++++
 .../java/org/androidannotations/annotations/Click.java  |  4 ++++
 .../org/androidannotations/annotations/CustomTitle.java |  2 ++
 .../org/androidannotations/annotations/EActivity.java   |  4 ++++
 .../java/org/androidannotations/annotations/EBean.java  |  2 ++
 .../org/androidannotations/annotations/EFragment.java   |  4 ++++
 .../org/androidannotations/annotations/EViewGroup.java  |  4 ++++
 .../androidannotations/annotations/EditorAction.java    |  4 ++++
 .../java/org/androidannotations/annotations/Extra.java  |  2 ++
 .../org/androidannotations/annotations/FocusChange.java |  4 ++++
 .../org/androidannotations/annotations/FragmentArg.java |  2 ++
 .../androidannotations/annotations/FragmentById.java    |  4 ++++
 .../androidannotations/annotations/FragmentByTag.java   |  4 +++-
 .../org/androidannotations/annotations/FromHtml.java    |  4 ++++
 .../org/androidannotations/annotations/HttpsClient.java | 17 ++++++++++++++++-
 .../org/androidannotations/annotations/ItemClick.java   |  4 ++++
 .../androidannotations/annotations/ItemLongClick.java   |  4 ++++
 .../org/androidannotations/annotations/ItemSelect.java  |  4 ++++
 .../org/androidannotations/annotations/LongClick.java   |  4 ++++
 .../annotations/OnActivityResult.java                   |  4 ++++
 .../org/androidannotations/annotations/OptionsItem.java |  4 ++++
 .../org/androidannotations/annotations/OptionsMenu.java |  4 ++++
 .../androidannotations/annotations/OptionsMenuItem.java |  4 ++++
 .../org/androidannotations/annotations/OrmLiteDao.java  |  4 ++++
 .../org/androidannotations/annotations/Receiver.java    | 16 ++++++++++++++--
 .../androidannotations/annotations/ReceiverAction.java  | 16 +++++-----------
 .../org/androidannotations/annotations/RoboGuice.java   |  2 ++
 .../annotations/SeekBarProgressChange.java              |  4 ++++
 .../annotations/SeekBarTouchStart.java                  |  4 ++++
 .../annotations/SeekBarTouchStop.java                   |  4 ++++
 .../androidannotations/annotations/ServiceAction.java   |  2 ++
 .../annotations/SupposeBackground.java                  |  2 ++
 .../org/androidannotations/annotations/TextChange.java  |  4 ++++
 .../java/org/androidannotations/annotations/Touch.java  |  4 ++++
 .../java/org/androidannotations/annotations/Trace.java  |  4 ++++
 .../org/androidannotations/annotations/UiThread.java    |  6 ++++++
 .../org/androidannotations/annotations/ViewById.java    |  4 ++++
 .../org/androidannotations/annotations/ViewsById.java   |  4 ++++
 .../org/androidannotations/annotations/WakeLock.java    | 14 ++++++++++----
 .../androidannotations/annotations/WindowFeature.java   |  2 ++
 .../annotations/res/AnimationRes.java                   |  4 ++++
 .../androidannotations/annotations/res/BooleanRes.java  |  4 ++++
 .../androidannotations/annotations/res/ColorRes.java    |  4 ++++
 .../annotations/res/ColorStateListRes.java              |  4 ++++
 .../annotations/res/DimensionPixelOffsetRes.java        |  4 ++++
 .../annotations/res/DimensionPixelSizeRes.java          |  4 ++++
 .../annotations/res/DimensionRes.java                   |  4 ++++
 .../androidannotations/annotations/res/DrawableRes.java |  4 ++++
 .../org/androidannotations/annotations/res/HtmlRes.java |  4 ++++
 .../androidannotations/annotations/res/IntArrayRes.java |  4 ++++
 .../androidannotations/annotations/res/IntegerRes.java  |  4 ++++
 .../androidannotations/annotations/res/LayoutRes.java   |  4 ++++
 .../androidannotations/annotations/res/MovieRes.java    |  4 ++++
 .../annotations/res/StringArrayRes.java                 |  4 ++++
 .../androidannotations/annotations/res/StringRes.java   |  4 ++++
 .../annotations/res/TextArrayRes.java                   |  4 ++++
 .../org/androidannotations/annotations/res/TextRes.java |  4 ++++
 .../org/androidannotations/annotations/rest/Accept.java |  4 +++-
 .../org/androidannotations/annotations/rest/Delete.java |  2 ++
 .../org/androidannotations/annotations/rest/Get.java    |  2 ++
 .../org/androidannotations/annotations/rest/Head.java   |  2 ++
 .../androidannotations/annotations/rest/Options.java    |  2 ++
 .../org/androidannotations/annotations/rest/Post.java   |  2 ++
 .../org/androidannotations/annotations/rest/Put.java    |  2 ++
 .../annotations/rest/RequiresCookie.java                |  2 ++
 .../annotations/rest/RequiresCookieInUrl.java           |  2 ++
 .../annotations/rest/RequiresHeader.java                |  2 ++
 .../org/androidannotations/annotations/rest/Rest.java   | 10 +++++++++-
 .../androidannotations/annotations/rest/SetsCookie.java |  2 ++
 .../annotations/sharedpreferences/DefaultBoolean.java   |  4 ++++
 .../annotations/sharedpreferences/DefaultFloat.java     |  4 ++++
 .../annotations/sharedpreferences/DefaultInt.java       |  4 ++++
 .../annotations/sharedpreferences/DefaultLong.java      |  4 ++++
 .../annotations/sharedpreferences/DefaultRes.java       |  6 ++++++
 .../annotations/sharedpreferences/DefaultString.java    |  4 ++++
 .../annotations/sharedpreferences/DefaultStringSet.java |  2 ++
 .../annotations/sharedpreferences/SharedPref.java       |  4 ++++
 AndroidAnnotations/checkstyle-checks.xml                |  3 ++-
 82 files changed, 322 insertions(+), 24 deletions(-)

diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
index bc726c2..ffafd1a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/AfterTextChange.java
@@ -76,13 +76,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the TextViews.
+	 * 
+	 * @return the ids of the TextViews.
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as a strings which refer to the TextViews.
 	 * 
-	 * @return
+	 * @return the resource names of the TextViews.
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
index 2712949..0500faf 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Background.java
@@ -181,12 +181,15 @@
 	 * boolean mayInterruptIfRunning = true;
 	 * BackgroundExecutor.cancelAll(&quot;my_background_id&quot;, mayInterruptIfRunning);
 	 * </pre>
+	 * 
+	 * @return the task id for cancellation
 	 **/
 	String id() default "";
 
 	/**
 	 * Minimum delay, in milliseconds, before the background task is executed.
 	 *
+	 * @return the delay of the execution
 	 */
 	int delay() default 0;
 
@@ -196,6 +199,7 @@
 	 * All background tasks having the same <code>serial</code> will be executed
 	 * sequentially.
 	 *
+	 * @return the serial execution group
 	 **/
 	String serial() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java
index bf0a726..8489055 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Bean.java
@@ -62,7 +62,9 @@
 public @interface Bean {
 
 	/**
-	 * The implementation class.
+	 * The implementation class of the injected bean.
+	 * 
+	 * @return the implementation class
 	 */
 	Class<?> value() default Void.class;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java
index 66219aa..a757460 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/BeforeTextChange.java
@@ -84,11 +84,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the TextViews.
+	 * 
+	 * @return the ids of the TextViews.
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as a strings which refer to the TextViews.
+	 * 
+	 * @return the resource names of the TextViews.
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java
index 2b39ab4..0f840af 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CheckedChange.java
@@ -77,12 +77,16 @@
 	/**
 	 * The R.id.* fields which refer to the CompoundButtons or subclasses of
 	 * CompoundButton.
+	 * 
+	 * @return the ids of the CompoundButtons
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the CompoundButtons or
 	 * subclasses of CompoundButton.
+	 * 
+	 * @return the resource names of the CompoundButtons
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java
index 4a4423e..e962862 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Click.java
@@ -64,11 +64,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the Views.
+	 * 
+	 * @return the ids of the Views
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the Views.
+	 * 
+	 * @return the resource names of the Views
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java
index a9f638b..6191d47 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/CustomTitle.java
@@ -47,6 +47,8 @@
 
 	/**
 	 * R.layout.* field which refers the the title layout.
+	 * 
+	 * @return the id of the layout
 	 */
 	int value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java
index 8bbb3e2..1ce2948 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EActivity.java
@@ -90,11 +90,15 @@
 
 	/**
 	 * The R.layout.* field which refer to the layout.
+	 * 
+	 * @return the id of the layout
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refer to the layout.
+	 * 
+	 * @return the resource name of the layout
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java
index c5c209a..660ff1c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EBean.java
@@ -110,6 +110,8 @@
 
 	/**
 	 * The scope of the enhanced bean.
+	 * 
+	 * @return the scope of the bean.
 	 */
 	Scope scope() default Scope.Default;
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java
index f9b716b..b891f95 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EFragment.java
@@ -111,11 +111,15 @@
 
 	/**
 	 * The R.layout.* field which refer to the layout.
+	 * 
+	 * @return the id of the layout
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refer to the layout.
+	 * 
+	 * @return the resource name of the layout
 	 */
 	String resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java
index fbb59d7..76873c1 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EViewGroup.java
@@ -78,11 +78,15 @@
 
 	/**
 	 * The R.layout.* field which refer to the layout.
+	 * 
+	 * @return the id of the layout
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refer to the layout.
+	 * 
+	 * @return the resource name of the layout
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java
index 245a20f..69fad8c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/EditorAction.java
@@ -88,11 +88,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the TextViews.
+	 * 
+	 * @return the ids of the TextViews
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as a strings which refer to the TextViews.
+	 * 
+	 * @return the resource names of the TextViews
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
index bbd2b1f..fbb62bf 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Extra.java
@@ -82,6 +82,8 @@
 
 	/**
 	 * The key of the injected extra.
+	 * 
+	 * @return the key of the extra
 	 */
 	String value() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java
index 903442d..bcc9aa1 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FocusChange.java
@@ -75,11 +75,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the Views.
+	 * 
+	 * @return the ids of the Views
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the Views.
+	 * 
+	 * @return the resource names of the Views
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
index 4780f78..42ba072 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentArg.java
@@ -74,6 +74,8 @@
 
 	/**
 	 * The key of the injected Fragment argument.
+	 * 
+	 * @return the key of the argument
 	 */
 	String value() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java
index 066d372..470a08e 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentById.java
@@ -74,11 +74,15 @@
 
 	/**
 	 * The R.id.* field which is the id of the Fragment.
+	 * 
+	 * @return the id of the Fragment
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the id of the Fragment.
+	 * 
+	 * @return the resource name of the Fragment
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java
index c936d9f..ba8e57b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FragmentByTag.java
@@ -74,7 +74,9 @@
 public @interface FragmentByTag {
 
 	/**
-	 * The tag of the Fragment.
+	 * The tag of the injected Fragment.
+	 * 
+	 * @return the tag of the Fragment
 	 */
 	String value() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
index d40e747..e26a760 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/FromHtml.java
@@ -61,11 +61,15 @@
 
 	/**
 	 * The R.string.* field which refers to the html string resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the html string resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
index 9d7638c..09eb6cb 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/HttpsClient.java
@@ -97,36 +97,51 @@
 
 	/**
 	 * The R.id.* field id which refers to the trust store file.
+	 * 
+	 * @return the id of the trust store file
 	 */
 	int trustStore() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the trust store file.
+	 * 
+	 * @return the resource name of the trust store file.
 	 */
 	String trustStoreResName() default "";
 
 	/**
 	 * The trust store password.
+	 * 
+	 * @return the trust store password
 	 */
 	String trustStorePwd() default DEFAULT_PASSWD;
 
 	/**
 	 * The R.id.* field id which refers to the key store file.
+	 * 
+	 * @return the id of the key store file
 	 */
 	int keyStore() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the key store file.
+	 * 
+	 * @return the resource name of the key store file
 	 */
 	String keyStoreResName() default "";
 
 	/**
 	 * The key store password.
+	 * 
+	 * @return the key store password
 	 */
 	String keyStorePwd() default DEFAULT_PASSWD;
 
 	/**
-	 * <b>true</b> if authorizes any TLS/SSL hostname, <b>false</b> otherwise.
+	 * Whether to authorizes any TLS/SSL hostname.
+	 * 
+	 * @return <b>true</b> if authorizes any TLS/SSL hostname, <b>false</b>
+	 *         otherwise.
 	 */
 	boolean allowAllHostnames() default true;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java
index 9e75752..535fd8f 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemClick.java
@@ -71,11 +71,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the AdapterViews.
+	 * 
+	 * @return the ids of the AdapterViews
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the AdapterViews.
+	 * 
+	 * @return the resource names of the AdapterViews
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java
index 4bc1fd9..86bafbe 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemLongClick.java
@@ -71,11 +71,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the AdapterViews.
+	 * 
+	 * @return the ids of the AdapterViews
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the AdapterViews.
+	 * 
+	 * @return the resource names of the AdapterViews
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java
index 6b9fd16..97650a6 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ItemSelect.java
@@ -77,11 +77,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the AdapterViews.
+	 * 
+	 * @return the ids of the AdapterViews
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the AdapterViews.
+	 * 
+	 * @return the resource names of the AdapterViews
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java
index 88ad78a..5dffc8c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/LongClick.java
@@ -76,11 +76,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the Views.
+	 * 
+	 * @return the ids of the Views
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the Views.
+	 * 
+	 * @return the resource names of the Views
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
index 0142a83..d1f2296 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OnActivityResult.java
@@ -80,6 +80,8 @@
 
 	/**
 	 * The <b>requestCode</b> associated with the given result.
+	 * 
+	 * @return the requestCode
 	 */
 	int value();
 
@@ -125,6 +127,8 @@
 
 		/**
 		 * They key of the result data.
+		 * 
+		 * @return the key
 		 */
 		String value() default "";
 	}
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java
index 105c57c..061176d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsItem.java
@@ -79,11 +79,15 @@
 
 	/**
 	 * The R.id.* field which refers to the menu item.
+	 * 
+	 * @return the id of the menu item
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the menu item.
+	 *
+	 * @return the resource name of the menu item
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java
index d8701fa..0b55c22 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenu.java
@@ -60,11 +60,15 @@
 
 	/**
 	 * The R.menu.* fields which refers to the menus.
+	 * 
+	 * @return the ids of the menus
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refers to the menus.
+	 * 
+	 * @return the resource names of the menus
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java
index c0f41f9..7fc9d83 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OptionsMenuItem.java
@@ -59,11 +59,15 @@
 
 	/**
 	 * The R.id.* fields which refers to the menu items.
+	 * 
+	 * @return the ids of the menus
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refers to the menu items.
+	 * 
+	 * @return the resource names of the menus
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
index 67701fb..7eef2b6 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/OrmLiteDao.java
@@ -69,6 +69,8 @@
 
 	/**
 	 * The class of the used database helper.
+	 * 
+	 * @return the helper class
 	 */
 	Class<?> helper();
 
@@ -78,6 +80,8 @@
 	 * @deprecated Since <b>3.1</b> the model class is inferred from the type of
 	 *             the annotated field. This parameter will be removed in a
 	 *             future version.
+	 * 
+	 * @return the model class
 	 */
 	@Deprecated
 	Class<?> model() default Void.class;
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java
index 526cd5d..edfe859 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Receiver.java
@@ -88,21 +88,31 @@
 
 	/**
 	 * The strings indicating the actions which will spark the method.
+	 * 
+	 * @return the actions which will spark the method
 	 */
 	String[] actions();
 
 	/**
 	 * The strings indicating the data schemes which should be handled.
+	 * 
+	 * @return the data schemes which should be handled
 	 */
 	String[] dataSchemes() default {};
 
 	/**
 	 * The event pair when the receiver should be registered/unregistered.
+	 * 
+	 * @return the registration/unregistration point
 	 */
 	RegisterAt registerAt() default RegisterAt.OnCreateOnDestroy;
 
 	/**
-	 * <b>true</b>, if LocalBroadcastManager should be used.
+	 * Whether to use LocalBroadcastManager.
+	 * 
+	 * @return <b>true</b>, if LocalBroadcastManager should be used,
+	 *         <b>false</b> otherwise
+	 *
 	 */
 	boolean local() default false;
 
@@ -143,8 +153,10 @@
 	public @interface Extra {
 
 		/**
-		 * Define the extra's name. If this parameter isn't set the annotated
+		 * Defines the extra's name. If this parameter isn't set the annotated
 		 * parameter name will be used.
+		 * 
+		 * @return the name of the extra
 		 */
 		String value() default "";
 	}
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java
index c4e4069..c953588 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ReceiverAction.java
@@ -30,15 +30,7 @@
  * The class MAY contain several {@link ReceiverAction} annotated methods.
  * </p>
  * <p>
- * The method annotated with {@link ReceiverAction} may have as parameters : - A
- * {@link android.content.Context} which will be the context given in
- * {@code void onReceive(Context context, Intent intent)} - A
- * {@link android.content.Intent} which will be the intent given in
- * {@code void onReceive(Context context, Intent intent)} - Some any native,
- * {@link android.os.Parcelable} or {@link java.io.Serializable} parameters
- * annotated with {@link ReceiverAction.Extra} which will be the extra put in
- * the intent. The key of this extra is the value of the annotation
- * {@link ReceiverAction.Extra} if set or the name of the parameter.
+ * The method annotated with {@link ReceiverAction} may have as parameters :
  * </p>
  * <ul>
  * <li>A {@link android.content.Context} which will be the context given in
@@ -104,6 +96,8 @@
 	/**
 	 * Define a set of actions this method should handle. If this field isn't
 	 * set the annotated method name will be used.
+	 *
+	 * @return the actions
 	 */
 	String[] value() default {};
 
@@ -132,8 +126,8 @@
 		/**
 		 * Define the extra's name. If this parameter isn't set the annotated
 		 * parameter name will be used.
-		 * 
-		 * @return the name of the extra
+		 *
+		 * @return the extra's name
 		 */
 		String value() default "";
 	}
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java
index 0f7a73b..4bccc58 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/RoboGuice.java
@@ -68,6 +68,8 @@
 	/**
 	 * The RoboGuice listener classes to bind to this activity. Will add an
 	 * injected listener field to the subclass.
+	 * 
+	 * @return the RoboGuice listener classes
 	 */
 	Class<?>[] value() default {};
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java
index c31ec5c..2d79b88 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarProgressChange.java
@@ -84,11 +84,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the SeekBars.
+	 * 
+	 * @return the ids of the SeekBars
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the SeekBars.
+	 * 
+	 * @return the resource names of the SeekBars
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
index 7670cba..3deb577 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStart.java
@@ -80,11 +80,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the SeekBars.
+	 * 
+	 * @return the ids of the SeekBars
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the SeekBars.
+	 * 
+	 * @return the resource names of the SeekBars
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
index c71cffe..e505a96 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SeekBarTouchStop.java
@@ -80,11 +80,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the SeekBars.
+	 * 
+	 * @return the ids of the SeekBars
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the SeekBars.
+	 * 
+	 * @return the resource names of the SeekBars
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java
index a2822fa..e824ba7 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ServiceAction.java
@@ -96,6 +96,8 @@
 	/**
 	 * Define the action's name. If this field isn't set the annotated method
 	 * name will be used.
+	 * 
+	 * @return the name of the action
 	 */
 	String value() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
index 3686947..7d8867d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/SupposeBackground.java
@@ -64,6 +64,8 @@
 	 * then any background thread is allowed.
 	 *
 	 * @see org.androidannotations.api.BackgroundExecutor#checkBgThread(String...)
+	 * 
+	 * @return the allowed serials
 	 */
 	String[] serial() default {};
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java
index 5622594..7591589 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/TextChange.java
@@ -83,11 +83,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the TextViews.
+	 * 
+	 * @return the ids of the TextViews.
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as a strings which refer to the TextViews.
+	 * 
+	 * @return the resource names of the TextViews.
 	 */
 	String[] resName() default "";
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
index ed3ccd5..8aed129 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Touch.java
@@ -77,11 +77,15 @@
 
 	/**
 	 * The R.id.* fields which refer to the Views.
+	 * 
+	 * @return the ids of the Views
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource names as strings which refer to the Views.
+	 * 
+	 * @return the resource names of the Views
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
index 826550e..fe6447d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/Trace.java
@@ -79,11 +79,15 @@
 
 	/**
 	 * The tag used for the log message.
+	 * 
+	 * @return the tag of the message
 	 */
 	String tag() default DEFAULT_TAG;
 
 	/**
 	 * The log level used for the log message.
+	 * 
+	 * @return the logging level of the message
 	 */
 	int level() default Log.INFO;
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
index fcb5a18..dbf7430 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/UiThread.java
@@ -96,6 +96,8 @@
 
 	/**
 	 * The delay of the execution in milliseconds.
+	 * 
+	 * @return the delay of the execution
 	 */
 	long delay() default 0;
 
@@ -104,6 +106,10 @@
 	 * if it is inside the UI thread already. If so, it will directly call the
 	 * method instead of using the handler. The default value is
 	 * {@link Propagation#ENQUEUE}, which will always call the handler.
+	 * 
+	 * @return {@link Propagation#ENQUEUE} to always call the handler,
+	 *         {@link Propagation#REUSE}, to check whether it is already on the
+	 *         UI thread
 	 */
 	Propagation propagation() default Propagation.ENQUEUE;
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java
index 80cc5ba..1ff3938 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewById.java
@@ -66,11 +66,15 @@
 
 	/**
 	 * The R.id.* field which refers to the injected View.
+	 * 
+	 * @return the id of the View
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the injected View.
+	 * 
+	 * @return the resource name of the View
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java
index 2973bcb..c08ac80 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/ViewsById.java
@@ -69,11 +69,15 @@
 
 	/**
 	 * The array of R.id.* fields which refer to the injected Views.
+	 * 
+	 * @return the ids of the Views
 	 */
 	int[] value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The array resource names which refer to the injected Views.
+	 * 
+	 * @return the resource names of the Views
 	 */
 	String[] resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java
index 45268e3..662616a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WakeLock.java
@@ -58,9 +58,11 @@
 	String DEFAULT_TAG = "NO_TAG";
 
 	/**
-	 * The tag of the WakeLock.
+	 * The tag of the created WakeLock.
 	 * 
-	 * @see {@link android.os.PowerManager#newWakeLock(int, String)}
+	 * @see android.os.PowerManager#newWakeLock(int, String)
+	 * 
+	 * @return the tag of the WakeLock
 	 */
 	String tag() default DEFAULT_TAG;
 
@@ -68,7 +70,9 @@
 	 * The level of the created {@link android.os.PowerManager.WakeLock
 	 * WakeLock}.
 	 * 
-	 * @see {@link android.os.PowerManager#newWakeLock(int, String)}
+	 * @see android.os.PowerManager#newWakeLock(int, String)
+	 * 
+	 * @return the level of the WakeLock
 	 */
 	Level level() default Level.PARTIAL_WAKE_LOCK;
 
@@ -76,7 +80,9 @@
 	 * The optional flags for the created
 	 * {@link android.os.PowerManager.WakeLock WakeLock}.
 	 * 
-	 * @see {@link android.os.PowerManager#newWakeLock(int, String)}
+	 * @see android.os.PowerManager#newWakeLock(int, String)
+	 * 
+	 * @return the flags of the WakeLock
 	 */
 	Flag[] flags() default {};
 
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java
index 720a7a1..a537de1 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/WindowFeature.java
@@ -53,6 +53,8 @@
 
 	/**
 	 * An array of integers which are <code>Window.FEATURE_*</code> fields.
+	 * 
+	 * @return the Window feature constants
 	 */
 	int[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
index ad54416..d8dc6f4 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/AnimationRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.anim.* field which refers to the animation.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the animation.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
index 014c296..8c18832 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/BooleanRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.boolean.* field which refers to the boolean resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the boolean resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
index 2d2695e..211c84b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.color.* field which refers to the color resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the color resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
index 85d2fc5..ca3db78 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/ColorStateListRes.java
@@ -38,12 +38,16 @@
 
 	/**
 	 * The R.color.* field which refers to the ColorStateList resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the ColorStateList
 	 * resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
index 2f14148..1647dd5 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelOffsetRes.java
@@ -39,12 +39,16 @@
 
 	/**
 	 * The R.dimen.* field which refers to the dimension pixel offset resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as string which refers to the dimension pixel offset
 	 * resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
index dd31005..d8f2053 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionPixelSizeRes.java
@@ -39,12 +39,16 @@
 
 	/**
 	 * The R.dimen.* field which refers to the dimension pixel size resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as string which refers to the dimension pixel size
 	 * resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
index dc4a3d7..5d51935 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DimensionRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The resource name as string which refers to the dimension resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as string which refers to the dimension resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
index 1fc1212..f6f3442 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/DrawableRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.id.* field which refers to the drawable resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the drawable resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
index acc9e27..a14b770 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/HtmlRes.java
@@ -39,11 +39,15 @@
 
 	/**
 	 * The R.id.* field which refers to the HTML string resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the HTML string resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
index b266e7f..8e652a9 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntArrayRes.java
@@ -39,11 +39,15 @@
 
 	/**
 	 * The R.array.* field which refers to the integer array resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the integer array resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
index 632b313..c583c68 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/IntegerRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.integer.* field which refers to the integer resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the integer resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
index 31c587a..03b0f40 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/LayoutRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.layout.* field which refers to the layout resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the layout resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
index 162a4df..5262f33 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/MovieRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.movie.* field which refers to the movie resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the movie resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
index 386475f..6f45434 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringArrayRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.array.* field which refers to the string array resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the string array resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
index 4d03843..fc13b2b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/StringRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.string.* field which refers to the string resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the string resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
index 197bc25..97a559b 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextArrayRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.array.* field which refers to the text array resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers to the text array resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
index 2dc1fd4..695117d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/res/TextRes.java
@@ -38,11 +38,15 @@
 
 	/**
 	 * The R.string.* field which refers to the text resource.
+	 * 
+	 * @return the id of the resource
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name as a string which refers to the text resource.
+	 * 
+	 * @return the resource name of the resource
 	 */
 	String resName() default "";
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
index ed24c1a..47fa509 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Accept.java
@@ -66,7 +66,9 @@
 	/**
 	 * The accepted media type.
 	 * 
-	 * @see {@link org.androidannotations.api.rest.MediaType MediaType}
+	 * @see org.androidannotations.api.rest.MediaType
+	 * 
+	 * @return the media type
 	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java
index 32de743..e1f7f89 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Delete.java
@@ -59,6 +59,8 @@
 
 	/**
 	 * The URI or the full URL of the web service.
+	 * 
+	 * @return the address of the web service
 	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java
index 08cbe66..6096c7c 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Get.java
@@ -78,6 +78,8 @@
 
 	/**
 	 * The URI or the full URL of the web service.
+	 * 
+	 * @return the address of the web service
 	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java
index d2af95c..ca43244 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Head.java
@@ -60,6 +60,8 @@
 
 	/**
 	 * The URI or the full URL of the web service.
+	 * 
+	 * @return the address of the web service
 	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
index e560988..a171544 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Options.java
@@ -60,6 +60,8 @@
 
 	/**
 	 * The URI or the full URL of the web service.
+	 * 
+	 * @return the address of the web service
 	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java
index 38030de..ec049fe 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Post.java
@@ -63,6 +63,8 @@
 
 	/**
 	 * The URI or the full URL of the web service.
+	 * 
+	 * @return the address of the web service
 	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java
index b02c134..d9b395a 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Put.java
@@ -59,6 +59,8 @@
 
 	/**
 	 * The URI or the full URL of the web service.
+	 * 
+	 * @return the address of the web service
 	 */
 	String value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
index 570aebf..11df53d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookie.java
@@ -84,6 +84,8 @@
 
 	/**
 	 * The names of the cookies.
+	 * 
+	 * @return the cookie names
 	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
index 8f6cfb1..363cca6 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresCookieInUrl.java
@@ -40,6 +40,8 @@
 
 	/**
 	 * The names of the cookies.
+	 * 
+	 * @return the cookie names
 	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
index ebd2ece..a59080e 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/RequiresHeader.java
@@ -84,6 +84,8 @@
 
 	/**
 	 * The names of the headers.
+	 * 
+	 * @return the header names
 	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
index 63769dc..f4a7766 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/Rest.java
@@ -204,24 +204,32 @@
 public @interface Rest {
 
 	/**
-	 * The root url of the webservice.
+	 * The root url of the web service.
+	 * 
+	 * @return the root url of the web service
 	 */
 	String rootUrl() default "";
 
 	/**
 	 * The classes of the converters which should be used to convert received
 	 * data into Java objects.
+	 * 
+	 * @return the converter classes
 	 */
 	Class<?>[] converters();
 
 	/**
 	 * The classes of interceptors which are used to do extra processing before
 	 * or after requests.
+	 * 
+	 * @return the interceptor classes
 	 */
 	Class<?>[] interceptors() default {};
 
 	/**
 	 * TODO .
+	 * 
+	 * @return TODO
 	 */
 	Class<?> requestFactory() default Void.class;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
index c7feb1f..5862071 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/rest/SetsCookie.java
@@ -64,6 +64,8 @@
 
 	/**
 	 * The names of the cookies to be kept.
+	 * 
+	 * @return the cookie names
 	 */
 	String[] value();
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
index fe00636..5328d5d 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultBoolean.java
@@ -42,11 +42,15 @@
 
 	/**
 	 * The default value of the preference.
+	 * 
+	 * @return the default value
 	 */
 	boolean value();
 
 	/**
 	 * The R.string.* field which refers to the key of the preference.
+	 * 
+	 * @return the resource name of the preference key
 	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
index ebaa9ee..1119b98 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultFloat.java
@@ -42,11 +42,15 @@
 
 	/**
 	 * The default value of the preference.
+	 * 
+	 * @return the default value
 	 */
 	float value();
 
 	/**
 	 * The R.string.* field which refers to the key of the preference.
+	 * 
+	 * @return the resource name of the preference key
 	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
index 8d93e8b..db45c89 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultInt.java
@@ -42,11 +42,15 @@
 
 	/**
 	 * The default value of the preference.
+	 * 
+	 * @return the default value
 	 */
 	int value();
 
 	/**
 	 * The R.string.* field which refers to the key of the preference.
+	 * 
+	 * @return the resource name of the preference key
 	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
index 0201a94..e430bb4 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultLong.java
@@ -42,11 +42,15 @@
 
 	/**
 	 * The default value of the preference.
+	 * 
+	 * @return the default value
 	 */
 	long value();
 
 	/**
 	 * The R.string.* field which refers to the key of the preference.
+	 * 
+	 * @return the resource name of the preference key
 	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
index 7aa9f86..ccae606 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultRes.java
@@ -44,17 +44,23 @@
 	/**
 	 * The R.id.* field which refers the the resource which is used as the
 	 * default value of the preference.
+	 * 
+	 * @return the default value
 	 */
 	int value() default ResId.DEFAULT_VALUE;
 
 	/**
 	 * The resource name which refers the the resource which is used as the
 	 * default value of the preference.
+	 * 
+	 * @return the resource name of the default value
 	 */
 	String resName() default "";
 
 	/**
 	 * The R.string.* field which refers to the key of the preference.
+	 * 
+	 * @return the resource name of the preference key
 	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
index 12c22a6..fb46c16 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultString.java
@@ -42,11 +42,15 @@
 
 	/**
 	 * The default value of the preference.
+	 * 
+	 * @return the default value
 	 */
 	String value();
 
 	/**
 	 * The R.string.* field which refers to the key of the preference.
+	 * 
+	 * @return the resource name of the preference key
 	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java
index 648a8fe..21cc749 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/DefaultStringSet.java
@@ -52,6 +52,8 @@
 
 	/**
 	 * The R.string.* field which refers to the key of the preference.
+	 * 
+	 * @return the resource name of the preference key
 	 */
 	int keyRes() default ResId.DEFAULT_VALUE;
 }
diff --git a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
index 8134931..276a0be 100644
--- a/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
+++ b/AndroidAnnotations/androidannotations-api/src/main/java/org/androidannotations/annotations/sharedpreferences/SharedPref.java
@@ -101,6 +101,8 @@
 	/**
 	 * The scope of the preferences, this will change the name of the
 	 * SharedPreference.
+	 * 
+	 * @return the scope of the preferences
 	 */
 	Scope value() default Scope.ACTIVITY;
 
@@ -110,6 +112,8 @@
 	 * @see Context#MODE_PRIVATE
 	 * @see Context#MODE_WORLD_READABLE
 	 * @see Context#MODE_WORLD_WRITEABLE
+	 * 
+	 * @return the operating mode
 	 */
 	int mode() default Context.MODE_PRIVATE;
 }
diff --git a/AndroidAnnotations/checkstyle-checks.xml b/AndroidAnnotations/checkstyle-checks.xml
index 4844672..11113c9 100644
--- a/AndroidAnnotations/checkstyle-checks.xml
+++ b/AndroidAnnotations/checkstyle-checks.xml
@@ -128,7 +128,8 @@
 		<module name="OuterTypeFilename" />
 		<module name="OuterTypeNumber" />
 		<module name="JavadocType" />
-		<module name="JavadocMethod" />
+		<!-- sourceforge.net/p/checkstyle/bugs/543/ -->
+        <!-- <module name="JavadocMethod" /> -->
 		<module name="JavadocVariable" />
 		<module name="JavadocStyle" />
 	</module>

StructureParser.java
