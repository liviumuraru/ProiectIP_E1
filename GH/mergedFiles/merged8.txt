C:\Users\flori\Documents\ProiectIP_E1\GH\git\github-crawler\crawler\src\main\java\uds\Config.java
package uds;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * Created by peter on 5/9/17.
 */
public class Config {

  public static final String URL = "github.url";
  public static final String USERNAME = "github.username";
  public static final String PASSWORD = "github.password";
  public static final String TOKEN = "github.token";

  public static final String FILE = "config.properties";
  private static final Logger log = LoggerFactory.getLogger(Config.class);

  private final Properties p = new Properties();

  public void load() throws IOException {
    InputStream stream = Config.class.getClassLoader().getResourceAsStream(FILE);
    if (stream == null) {
      throw new IOException();
    }
    p.clear();
    p.load(stream);
    log.debug("Loaded config {}", p);
  }

  public String getString(String param) {
    if (p.containsKey(param)) {
      return p.getProperty(param);
    }
    throw new RuntimeException("Property missing: " + param);
  }

  public String getUrl() {
    return getString(URL);
  }

  public String getUsername() {
    return getString(USERNAME);
  }

  public String getPassword() {
    return getString(PASSWORD);
  }

  public String getToken() {
    return getString(TOKEN);
  }


}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github-crawler\crawler\src\main\java\uds\ConfigException.java
package uds;

/**
 * Created by peter on 5/9/17.
 */
public class ConfigException extends CrawlerException {
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github-crawler\crawler\src\main\java\uds\CrawlerException.java
package uds;

/**
 * Created by peter on 5/9/17.
 */
public class CrawlerException extends Exception {
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github-crawler\crawler\src\main\java\uds\Request.java
package uds;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Created by peter on 5/9/17.
 */
public class Request {

  public static final String ENDPOINT_AUTHORIZATION = "authorizations";
  public static final String REGISTRATION_TOKEN = "token";

  private static final Logger log = LoggerFactory.getLogger(Request.class);


  public static String getData(String url, JSONObject params, @NotNull String token) {
    HttpResponse<String> response;


//    Unirest.setTimeouts(10000, 60000 ); //default
//    Unirest.setTimeouts(30000, 180000 );

    try {
      response = Unirest.post(url)
          .header("content-type", "application/json")
          .header("accept", "application/json")
          .header("authorization", "token " + token)
          .body(params)
          .asString();
    } catch (UnirestException e) {
      log.error("Request failed for '{}': {} with token '{}'", url, params, token, e);
      throw new RuntimeException("Request failed", e);
//      return;
    }
    if (log.isDebugEnabled()) {
      log.debug("Code = " + response.getStatus());
      log.debug("Stat = " + response.getStatusText());
      log.debug("Body = " + response.getBody());
    }
    if (response.getStatus() == 200) {
      return response.getBody();
//      log.debug("Body = " + jr.toString(2));
    }
    throw new RuntimeException("request failed: " + response.getStatus() + ": " + response.getBody());
  }

  public static String register(String url, String username, String password, @Nullable JSONObject params) {
    HttpResponse<String> response;

//    Unirest.setTimeouts(10000, 60000 ); //default
    if (params == null) {
      params = new JSONObject();
      params.put("note", "whatever2");
    }

    try {
      response = Unirest.post(url)
          .header("content-type", "application/json")
          .header("accept", "application/json")
          .basicAuth(username, password)
          .body(params)
          .asString();
    } catch (UnirestException e) {
      log.error("Request failed for '{}': {}", url, params, e);
      throw new RuntimeException("Request failed", e);
    }
    if (log.isDebugEnabled()) {
      log.debug("Code = " + response.getStatus());
      log.debug("Stat = " + response.getStatusText());
      log.debug("Body = " + response.getBody());
    }
    if (response.getStatus() == 201) {
//      log.debug("Body = " + jr.toString(2));
      return response.getBody();
    }
    throw new RuntimeException("request failed: " + response.getStatus() + ": " + response.getBody());
  }

  public static String register(Config config) {
    String res = register(config.getUrl() + ENDPOINT_AUTHORIZATION, config.getUsername(), config.getPassword(), null);
    JSONObject jo = new JSONObject(res);
    log.info(jo.toString(2));
    return jo.getString(REGISTRATION_TOKEN);
  }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github-crawler\crawler\src\test\java\uds\Main.java
package uds;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

/**
 * Created by peter on 5/9/17.
 */
public class Main {
  private static final Logger log = LoggerFactory.getLogger(Main.class);

  public static void main(String[] args) throws IOException {
    Config c = new Config();
    c.load();
    String token = Request.register(c);
    System.out.println(token);
  }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github-crawler\examples\RepoKeywordSearcher.java
import java.io.IOException;
import java.net.URL;
import java.util.*;
import java.util.logging.Logger;
import java.net.HttpURLConnection;
import java.util.zip.*;

/*
@author Andreas Denger
Requires Java 8
*/
public class RepoKeywordSearcher {
    private static final Logger log = Logger.getLogger(RepoKeywordSearcher.class.getName());
    private static final Set<String> VALID_EXT = new HashSet<>(Arrays.asList("java", "cpp", "py"));
    private static final int FILE_MAX_BYTES = 20000;

    public Map<String, List<Integer>> search(String pattern, String user, String repo) throws IOException {
        Map<String, List<Integer>> matches = new HashMap<>();
        log.info("Searching for word \"" + pattern + "\" in repository " + repo + " of user " + user);
        ZipInputStream zipInputStream = establishConnection(user, repo);
        for (ZipEntry zipEntry; (zipEntry = zipInputStream.getNextEntry()) != null; ) {
            String fileName = zipEntry.getName();
            if (!checkZipEntry(zipEntry)) {
                zipInputStream.skip(zipEntry.getSize());
                continue;
            }
            log.info("parsing file: " + fileName);
            List<Integer> matchingLines = getMatches(zipInputStream, pattern);
            if (!matchingLines.isEmpty()) {
                matches.put(fileName, matchingLines);
            }
        }
        return matches;
    }

    private ZipInputStream establishConnection(String user, String repo) throws IOException {
        URL url = new URL("https://api.github.com/repos/" + user + "/" + repo + "/zipball/master");
        log.info("Querying GitHub API with URL " + url.toString());
        HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
        int httpResponse = httpConnection.getResponseCode();
        if (httpResponse != 200) {
            log.info("Connection failed: HTTP response code " + httpResponse);
            throw new IOException("HTTP response " + httpResponse);
        }
        log.info("Connection accepted, server said OK");
        // files and lines
        return new ZipInputStream(httpConnection.getInputStream());
    }

    private boolean checkZipEntry(ZipEntry zipEntry) {
        String fileName = zipEntry.getName();
        if (zipEntry.isDirectory()) {
            //automatically searches recursively
            log.info("Entering directory " + fileName);
            return false;
        }
        log.info("checking file: " + fileName);
        //valid file extension?
        String extension = fileName.substring(fileName.lastIndexOf(".") + 1);
        if (!VALID_EXT.contains(extension)) {
            log.info("file extension " + extension + " not supported, skipping file");
            return false;
        }
        //checks file size in bytes
        if (zipEntry.getSize() > FILE_MAX_BYTES) {
            //TODO returns -1 if file size unknown (did not happen so far)
            log.info("file size was larger than predefined size of " + FILE_MAX_BYTES + " bytes, skipping file");
            return false;
        }
        return true;
    }

    private List<Integer> getMatches(ZipInputStream zipInputStream, String pattern) {
        List<Integer> matchingLines = new LinkedList<>();
        Scanner scanner = new Scanner(zipInputStream);
        for (int lineCounter = 1; scanner.hasNextLine(); lineCounter++) {
            //TODO more efficient algorithm like shift-and or KMP? regex patterns?
            if (scanner.nextLine().contains(pattern)) {
                log.info("Found match in line " + lineCounter);
                //save match
                matchingLines.add(lineCounter);
            }
        }
        return matchingLines;
    }

    public static void main(String[] args) {
        String pattern, user, repo;
        if (args.length >= 3) {
            pattern = args[0];
            user = args[1];
            repo = args[2];
        } else {
            //TODO test case, remove
            pattern = "Mutation";
            user = "adenger";
            repo = "thesis-program";
        }
        try {
            Map<String, List<Integer>> results = new RepoKeywordSearcher().search(pattern, user, repo);
            for (Map.Entry<String, List<Integer>> entry : results.entrySet()) {
                System.out.println(entry.getKey() + " " + entry.getValue().toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github-crawler\examples\Search.java

import java.io.IOException;
import java.util.Scanner;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
//Created by Karolina on 16/05/2017
public class Search {

	//This class provides possibility to search without using the API
	
	public String searchTerm;
        public Search(String search)
{
searchTerm=search;

//Taking search term input from console
		
		
		
	
		

		
		String searchURL = "https://github.com/search?utf8=✓&q=platform%3A+"+ searchTerm+"ref=simplesearch";
		//without proper User-Agent, we will get 403 error
		Document doc = Jsoup.connect(searchURL).userAgent("Mozilla/5.0").get();
		
		//the class of the items we need to derive is topics-row...
		Elements results = doc.getElementsByClass("topics-row-container col-9 d-inline-flex flex-wrap flex-items-center f6 my -l");

		for (Element result : results) {
			String linkHref = result.attr("href");
			String linkText = result.text();
			System.out.println("Text::" + linkText + ", URL::" + linkHref.substring(6, linkHref.indexOf("&")));
		}
	}


	
		

}
