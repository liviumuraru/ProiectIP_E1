C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\common\URLFilter.java
package edu.scu.common;

import java.util.BitSet;

/**
 * @author ��Դ����
 *  ��¡�㷨
 *  ����ȡ��urlȥ��
 *  �㷨�ܽ�
 *  1.����һ����¡������������һ���㹻��λ�ռ䣨�������������� 
 *	2.���һЩ����������������һЩ�в�ͬ��ӳ�亯������ϣ�������� 
 *	3.���ÿ��urlռ����λ����ÿ��url��������ֽڵĴ洢�ռ䣻 
 *	4.ʹ��һϵ�еĹ�ϣ�����Դ�url�е�ÿһ��Ԫ�ؽ��м��㣬����һϵ�е��������Ҳ������Ϣָ�ƣ� 
 *	5.����Ϣָ�Ʒ��䵽�ղŵ�url��ռ���ֽڿռ䣻 
 *	6.����Ϣָ������Ӧ��һϵ��ʮ�������ֶ�Ӧ����¡����������Ӧλ���ϣ��ж��Ƿ��Ѿ������ڲ�¡������֮�С�
 */
public class URLFilter 
{
	 private static final  int  DEFAULT_SIZE  =2 << 24 ;
	  //��������������ӣ��ɲ���6����ͬ�������������
	    private static final  int [] seeds =new  int []{5,7, 11 , 13 , 31 , 37 , 61};
	  //Java�еİ�λ�洢��˼�룬���㷨�ľ���ʵ�֣���¡��������
	    private BitSet bits= new  BitSet(DEFAULT_SIZE);
	  //��������������ӣ�����6����ϣ����
	    private  SimpleHash[]  func=new  SimpleHash[seeds.length];

	    public  URLFilter() 
	    {
	        for( int  i= 0 ; i< seeds.length; i ++ ) {
	            func[i]=new  SimpleHash(DEFAULT_SIZE, seeds[i]);
	        }
	    }

	    public void  add(String value) {
	        for(SimpleHash f : func) {
	            bits.set(f.hash(value),  true );
	        }
	    }

	  //���ݴ�URL�õ��ڲ�¡�������еĶ�Ӧλ�����ж����־λ��6����ͬ�Ĺ�ϣ��������6�ֲ�ͬ��ӳ�䣩
	    public boolean  contains(String value) {
	        if(value ==null ) {
	            return false ;
	        }
	        boolean  ret  = true ;
	        for(SimpleHash f : func) {
	            ret=ret&& bits.get(f.hash(value));
	        }
	        return  ret;
	    }
	  //Ĭ�Ϲ���������ϣ��Ĭ��ΪDEFAULT_SIZE��С���˹�ϣ����������Ϊseed
	    public static class SimpleHash {
	        private int cap;
	        private int seed;

	        public SimpleHash(int cap, int seed) {
	            this.cap = cap;
	            this.seed = seed;
	        }

	        public int hash(String value) {
	            int result = 0;
	            int len = value.length();
	            for (int i = 0; i < len; i++) {
	            	//����URL�ù�ϣ��������һ��ֵ��ʹ�õ��˼����е�ÿһ��Ԫ�أ�
	                result = seed * result + value.charAt(i);
	            }
	          //����������Ϣָ��
	            return (cap - 1) & result;
	        }
	    }

	    public static void  main(String[] args) {
	        String value  = "cc.scu.edu.cn" ;
	        URLFilter filter=new URLFilter();
	        System.out.println(filter.contains(value));
	        filter.add(value);
	        System.out.println(filter.contains(value));
	    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\crawler\Crawler.java
package edu.scu.crawler;

import java.util.concurrent.Callable;
/**
 * 
 * @author ���
 * ��װ���������������ύ�̳߳�
 */

public class Crawler implements Callable<Result>{
	
	public static int CrawlerID = 0;//����ID���ɹ���һ��������1������Ҳ������Ϊ����������
    private String url = null;//������Ҫ����Url

    public Crawler(String url) {
        this.url = url;
    }

    @Override
    public Result call() throws Exception {
        HtmlParserTool parserTool = new HtmlParserTool();
        Result result=parserTool.getResult(url,CrawlerStart.ifUseProxy);//ͨ��HtmlParserTool��ȡ���
        CrawlerID++;
        return result;
    }

    public String getLinks() {
        return url;
    }

    public void setLinks(String links) {
        this.url = links;
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\crawler\CrawlerStart.java
package edu.scu.crawler;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import edu.scu.common.URLFilter;
import edu.scu.db.dao.ResultDao;
import edu.scu.proxypool.ProxyPool;

/**
 * 
 * @author ���������
 *
 */
public class CrawlerStart {
	
	public static URLFilter urlFilter = new URLFilter();//ʹ���˲�¡�����㷨��URLȥ��
	public static ExecutorService crawlerThreadPool = Executors.newFixedThreadPool(20);//�����̳߳�
	public static Queue<Result> resultsQueue= new LinkedList<>();//������У�������HTML�������Ľ����������
	
	public static int taskCounter = 0;//���ã����������
    public static final int MAX_TASK_NUM = 1000;//���ã����������
	
    public static boolean ifUseProxy=false;//�Ƿ�ʹ�ô���ؽ�������
	//public static Result queueTop = new Result();
	
	
	public CrawlerStart initial(String url){ //��һ��url��ʼ������
        HtmlParserTool parserTool = new HtmlParserTool();
        resultsQueue.add(parserTool.getResult(url,ifUseProxy));//�������������������
        urlFilter.add(url);//������url����ȥ��filter
        return this;
    }
	public void launch()
	{
		ResultDao.persistent(resultsQueue.peek());//��������ȡ����������ݳ־û�
		while(resultsQueue.size()>0)
		{
			
			System.out.println("*********Already Crawled: "+Crawler.CrawlerID+" lemmas*********");
			Result resultInQueueTop = resultsQueue.poll();//���������ȡ��һ�����
			ArrayList< FutureTask<Result> > tasks = new ArrayList<>();//���������б�
			
			//����ȡ����е�����ȡ������ѯ�Ƿ�������û�����url����ȥ��filter�����������б�
			for(String link:resultInQueueTop.getUrlLink()) 
            {                                   
                if(!urlFilter.contains(link)) //��û����ȡ�����ҳ��
                {                                            
                	urlFilter.add(link);
                    tasks.add(new FutureTask<>(new Crawler(link)));
                }
            }
			//�������б��е������ύ���̳߳ؽ��д���
			for(FutureTask<Result> task:tasks)
            {                                         //�̳߳�ִ��������߳�
				//System.out.println(">>>>>>>>>>Submit");
				crawlerThreadPool.submit(task);
            }
			//TODO: Not Tested,Maybe Dangerous
        	//taskCounter += tasks.size();
        	//�ȴ������б��е�����ȫ����ɣ���ɺ󽫽������������׼���´�ȡ�������ѽ�����ݳ־û�
			for(FutureTask<Result> task:tasks) 
            {
                try {
                    Result taskResult = task.get(5, TimeUnit.SECONDS);      //��ȡ����Ľ��,����ÿ������ĳ�ʱʱ��Ϊ1s
                    taskCounter--;
                    if(!taskResult.getTitle().equals("")) //���˵�����������
                    {                           
                    	System.out.println(taskResult.getTitle());
                        resultsQueue.add(taskResult);
                        ResultDao.persistent(taskResult);
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } catch (ExecutionException e) {
                    e.printStackTrace();
                } catch (TimeoutException e) {
                    e.printStackTrace();
                }
            }
			
		}
	}
	
	//�������
	public static void main(String[] args) 
	{
		if(args.length!=0)
		{
			if(args[0]=="EnableProxy")
				ifUseProxy=true;
			else if(args[0]=="DisableProxy")
				ifUseProxy=false;
		}
		if(ifUseProxy)//���ʹ�ô�������������߳�
		{
			ProxyPool proxyPool=new ProxyPool();
			proxyPool.initProxyPool();
			Thread proxyPoolThread=new Thread(proxyPool);
	    	proxyPoolThread.start();
		}
		long st = System.currentTimeMillis();
        new CrawlerStart().initial("http://baike.baidu.com/item/�Ĵ���ѧ").launch();
		//new CrawlerStart().initial("https://baike.baidu.com/view/21087.html").launch();
        System.out.println("\n�����ܹ�����ʱ�䣺"+ (System.currentTimeMillis()-st));
	}

}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\crawler\DownLoadHTML.java
package edu.scu.crawler;

import java.util.List;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.Page;
import com.gargoylesoftware.htmlunit.ProxyConfig;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.WebResponse;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.util.NameValuePair;

import edu.scu.proxypool.Proxy;
import edu.scu.proxypool.ProxyPool;


/**
 * @author �����졢���
 * ����HTML��
 */

public class DownLoadHTML {
	private WebClient client;
	private boolean isUseJs=false;
	private int timeOut=5000;//ms
	private boolean isUseHttps=false;
	
	private String referer = "";
	private Proxy proxy;
	
	
	private boolean outputHeaderInfo=false;
	
	public DownLoadHTML()
	{
		
	}
	/**
	 * @author Aaron
	 * @param m_timeOut ��ʱʱ��ms Ĭ��5000
	 * @param m_referer httpͷ����Ϣ Ĭ�������ַ���
	 * @param m_isUseHttps �Ƿ���httpsЭ�� Ĭ�Ͽ���
	 * @param m_isUseJs �Ƿ���JS Ĭ�Ϲر�
	 * @param m_outputHeaderInfo ��Client�Ƿ�Ҫ�����Ӧͷ����Ϣ
	 * @param m_proxy ������Ϣ
	 */
	public DownLoadHTML(int m_timeOut,String m_referer,boolean m_isUseHttps,boolean m_isUseJs,boolean m_outputHeaderInfo,Proxy m_proxy)
	{
		timeOut=m_timeOut;
		referer=m_referer;
		isUseHttps=m_isUseHttps;
		isUseJs=m_isUseJs;
		outputHeaderInfo=m_outputHeaderInfo;
		proxy=m_proxy;
	}
	public void initDownloadClient()
	{
		BrowserVersion[] versions = { BrowserVersion.CHROME, BrowserVersion.FIREFOX_38, BrowserVersion.INTERNET_EXPLORER_11, BrowserVersion.INTERNET_EXPLORER_8};
		this.client= new WebClient(versions[(int)(versions.length * Math.random())]);
		//��Client��������
		this.client.getOptions().setThrowExceptionOnFailingStatusCode(false);
		this.client.getOptions().setJavaScriptEnabled(isUseJs);
		this.client.getOptions().setCssEnabled(false);
		this.client.getOptions().setThrowExceptionOnScriptError(false);
		this.client.getOptions().setTimeout(timeOut);
		this.client.getOptions().setAppletEnabled(true);
		this.client.getOptions().setGeolocationEnabled(true);
		this.client.getOptions().setRedirectEnabled(true);
		
		// ���д����������HTTPS��վ
		this.client.getOptions().setUseInsecureSSL(isUseHttps);
		
		if (referer != null && !"".equals(referer)) {
			this.client.addRequestHeader("Referer", referer);
		}
		//���ô���
		if (proxy != null) {
			ProxyConfig proxyConfig = new ProxyConfig(proxy.getIp(),proxy.getPort());
			this.client.getOptions().setProxyConfig(proxyConfig);
		}
		else {
			//System.out.println("Proxy null.");
		}
	}
	//����html
	public String downloadHtml(String url)
	{
		try 
		{
			String html="";
			
			Page page = client.getPage(url);
			WebResponse response = page.getWebResponse();
			if (outputHeaderInfo) 
			{
				// ���httpͷ����Ϣ
				List<NameValuePair> headers = response.getResponseHeaders();
				for (NameValuePair nameValuePair : headers) 
				{
					System.out.println(nameValuePair.getName() + "-->" + nameValuePair.getValue());
				}
			}
			
			if (response.getContentType().equals("application/json")) {
				html = response.getContentAsString();
				//System.out.println("Return Content is Json");
			}else if(page.isHtmlPage()){
				html = ((HtmlPage)page).asXml();
			}
			return html;
		}catch (Exception e) {
			if(CrawlerStart.ifUseProxy)
				{
					ProxyPool.addInvalidProxy(proxy);//�����쳣�������Ǵ��������⣬�ʼ���ʧЧ������У��ȴ�����ؽ�ʧЧ����Ӵ������ȥ��
					System.err.println("Proxy:"+proxy + " " + e.getMessage());
				}
			else
				System.err.println("Download HTML failed:"+e.getMessage());
		} finally {
			client.close();
		}
		return null;
	}
	
	
}
		
		
	


C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\crawler\HtmlParserTool.java
package edu.scu.crawler;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import org.jsoup.Jsoup;
import org.jsoup.nodes.*;
import org.jsoup.select.Elements;

import edu.scu.proxypool.ProxyPool;
/**
 * HtmlParserTool HTML��������
 * @author ��Ƽ
 * ������Ҫ����HTML����������html�еı�ǩ���ݷֽ������Ҫ�ı��⡢��顢Ŀ¼��
 */
public class HtmlParserTool {

    public  ArrayList<String> parseLink(String html){
        Document dom =  Jsoup.parse(html);            
        
        Elements paras = dom.getElementsByClass("para");        //��ȡclassΪpara������

        StringBuffer sb = new StringBuffer();                    

        for(Element link : paras){
            sb.append(link);
        }
        

        dom = Jsoup.parse(sb.toString());                           
        paras = dom.select("a[href]");                              //��ȡ����Ϊhref��Ԫ��

        ArrayList<String> links = new ArrayList<>();

        for(Element link:paras){
            links.add("http://baike.baidu.com"+link.attr("href"));  //����url
        }
        return links;
    }

    

    public  String parseTitle(String html){//��ȡ���������

        StringBuffer title = new StringBuffer();
        Document dom = Jsoup.parse(html);
        Elements elements = dom.select("h1");
        for(Element element:elements){
            title.append(element.text());                              
        }
        return title.toString();
    }
    
    public String parseSummary(String html)
    {
    	StringBuffer  summary=new StringBuffer();
    	Document dom = Jsoup.parse(html);
    	Elements elements = dom.getElementsByClass("lemma-summary");//���
    	//Elements elements = dom.getElementsByClass("lemma-summary").get(0).getElementsByClass("para");
    	for(Element element:elements){
    		summary.append(element.text()+"\n");
        }
        return summary.toString();
    }
    public String parseBasicInfo(String html)
    {
    	StringBuffer  basicInfo=new StringBuffer();
    	Document dom = Jsoup.parse(html);
    	Elements elements = dom.getElementsByClass("basicInfo-item");//������Ϣ
    	boolean isName=true;
    	for(Element element:elements){
    		if(isName)
    			basicInfo.append(element.text()+"  ");
    		else
    			basicInfo.append(element.text()+"\n");
    		
    		isName=!isName;
        }
        return basicInfo.toString();
    }
    public String parseIndex(String html)
    {
    	StringBuffer  index=new StringBuffer();
    	Document dom = Jsoup.parse(html);
    	Elements elements = dom.getElementsByClass("lemma-catalog");//Ŀ¼
    	for(Element element:elements){
    		index.append(element.text()+"\n");
        }
        return index.toString();
    }
    public  String parseContext(String html){
        StringBuffer context = new StringBuffer();
        Document dom = Jsoup.parse(html);
        Elements elements = dom.getElementsByClass("para");//��������
        for(Element element:elements){
            context.append(element.text()+"\n");
        }

        return context.toString();
    }
    public  String parseStatistics(String html){// ����ͳ��
        StringBuffer Statistics = new StringBuffer();
        Document dom = Jsoup.parse(html);
        Elements elements = dom.getElementsByClass("lemma-statistics");
        for(Element element:elements){
        	Statistics.append(element.text()+"\n");
        }
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//�������ڸ�ʽ
        df.format(new Date());
        return df.format(new Date())+"\n"+Statistics.toString();
    }
    //reference-list
    public String parseRef(String html)
    {
    	StringBuffer  Ref=new StringBuffer();
    	Document dom = Jsoup.parse(html);
    	Elements elements = dom.getElementsByClass("reference-item");//������Ϣ
    	for(Element element:elements){
    		Ref.append(element.text()+"  "+"http://baike.baidu.com"+element.getElementsByClass("text").attr("href")+"\n");
        }
        return Ref.toString();
    }
    //open-tag-item
    public String parseTag(String html)
    {
    	StringBuffer  tag=new StringBuffer();
    	Document dom = Jsoup.parse(html);
    	Elements elements = dom.getElementsByClass("taglist");//������Ϣ
    	for(Element element:elements){
    		tag.append(element.text()+"\n");
        }
        return tag.toString();
    }

    public  Result getResult(String url,boolean ifUseProxy){
        Result result = new Result();
        //TODO���������޸Ĺ��캯�����ò����Խ��������趨,������������
        /**
    	 * @author ��Ƽ
    	 * @param m_timeOut ��ʱʱ��ms Ĭ��5000
    	 * @param m_referer httpͷ����Ϣ Ĭ�������ַ���
    	 * @param m_isUseHttps �Ƿ���httpsЭ�� Ĭ�Ͽ���
    	 * @param m_isUseJs �Ƿ���JS Ĭ�Ϲر�
    	 * @param m_outputHeaderInfo ��Client�Ƿ�Ҫ�����Ӧͷ����Ϣ
    	 * @param m_proxy ������Ϣ
    	 */
        DownLoadHTML downLoadHTML;
        if(ifUseProxy)
        	 downLoadHTML = new DownLoadHTML(5000,"",true,false,false,ProxyPool.getProxy());
        else
        	 downLoadHTML = new DownLoadHTML(5000,"",true,false,false,null);
        downLoadHTML.initDownloadClient();
        String html = downLoadHTML.downloadHtml(url);
        
        result.setTitle(parseTitle(html));
        result.setUrl(url);
        result.setSummary(parseSummary(html));
        result.setBasicInfo(parseBasicInfo(html));
        result.setIndex(parseIndex(html));
        result.setContext(parseContext(html));
        result.setReference(parseRef(html));
        result.setTags(parseTag(html));
        result.setStatics(parseStatistics(html));
        
        
        result.setUrlLink(parseLink(html));
        
        /*System.out.println("Title:\n"+
        parseTitle(html)+"\nSummary:\n"
        +parseSummary(html) +"\nBasicInfo:\n"
        +parseBasicInfo(html)+"\nIndex:\n"
        +parseIndex(html)+"\nStatistics:\n"
        +parseStatistics(html)+"\nRef:\n"+
        parseRef(html) +"\nTag:\n"+
        parseTag(html));*/
        
        return result;
    }
    //����ڣ�������
    public static void main(String []args){
    	//Thread proxyPoolThread=new Thread(new ProxyPool());
    	//proxyPoolThread.start();
    	//System.out.println("ProxyPoolThread InitComplete.");
        long st = System.currentTimeMillis();
        
    	//HtmlParserTool test=new HtmlParserTool();
    	//Result result=test.getResult("http://baike.baidu.com/item/�����ѧ��ʷ��ò��",false);

        //System.out.println(" Result:\n"+result+"Time Last:"+(System.currentTimeMillis()-st));
    	System.out.println("Time Last:"+(System.currentTimeMillis()-st));
    } 
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\crawler\Result.java
package edu.scu.crawler;

import java.util.ArrayList;
/**
 * 
 * @author ���
 *
 */

//����Ϊ����࣬��ȡ�������������
public class Result {
    private String title;//����
    private String url;//����
    private String summary;//��Ҫ
    private String basicInfo;//������Ϣ
    private String index;//Ŀ¼
    private String context;//��������
    private String reference;//�ο����ף������ӣ�
    private String tags;//��ǩ
    private String statics;//����ͳ�ƣ���ȡ��ʱ�䡢���ٴα༭���ϴθ���ʱ�䣩
    
    private ArrayList<String> urlLink ;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContext() {
        return context;
    }

    public void setContext(String context) {
        this.context = context;
    }

    public ArrayList<String> getUrlLink() {
        return urlLink;
    }

    public void setUrlLink(ArrayList<String> urlLink) {
        this.urlLink = urlLink;
    }
    public String toString()
	{
		return "Title:"+title+"\nContext:\n"+context+"\nUrlLink:"+urlLink+"\n";
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public String getSummary() {
		return summary;
	}

	public void setSummary(String summary) {
		this.summary = summary;
	}

	public String getBasicInfo() {
		return basicInfo;
	}

	public void setBasicInfo(String basicInfo) {
		this.basicInfo = basicInfo;
	}

	public String getIndex() {
		return index;
	}

	public void setIndex(String index) {
		this.index = index;
	}

	public String getReference() {
		return reference;
	}

	public void setReference(String reference) {
		this.reference = reference;
	}

	public String getTags() {
		return tags;
	}

	public void setTags(String tags) {
		this.tags = tags;
	}

	public String getStatics() {
		return statics;
	}

	public void setStatics(String statics) {
		this.statics = statics;
	}
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\db\dao\ResultDao.java
package edu.scu.db.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import edu.scu.crawler.Result;
import edu.scu.db.utils.DBUtils;
//TODO����д���ݲ������������Ӹ�������
/**
 * 
 * @author ���
 *
 */
public class ResultDao 
{
	 private static Connection connection = null;                           //���ݿ�����
	 private static ResultSet resultSet = null;                             //�����
	 private static PreparedStatement preparedStatement = null;             //Ԥ����� SQL���
	 
	 public static void insert(Result result){                               //���ӣ����������ݿ�
	        String sql = "insert into crawlerresult(title,url,summary,basicinfo,catalog,context,reference,tags,statics) values(?,?,?,?,?,?,?,?,?);";
	        connection = new DBUtils().openConnection();                                 
	        try {
	            preparedStatement = connection.prepareStatement(sql);
	            preparedStatement.setString(1,result.getTitle());                     
	            preparedStatement.setString(2,result.getUrl());
	            preparedStatement.setString(3,result.getSummary());
	            preparedStatement.setString(4,result.getBasicInfo());
	            preparedStatement.setString(5,result.getIndex());
	            preparedStatement.setString(6,result.getContext());
	            preparedStatement.setString(7,result.getReference());
	            preparedStatement.setString(8,result.getTags());
	            preparedStatement.setString(9,result.getStatics());
	            preparedStatement.execute();                                           
	        } catch (SQLException e) {
	            e.printStackTrace();
	        } finally {
	            ReleaseConnection();
	        }
	    }
	 public static ResultSet Query() {//��ȡ��ѯ
	        String sql = " SELECT * FROM text;";
	        connection = new DBUtils().openConnection();
	        try {
	            preparedStatement = connection.prepareStatement(sql);
	            resultSet = preparedStatement.executeQuery();
	            return resultSet;
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	        return resultSet;
	    }

	    public static void ReleaseConnection() {//�ͷ�
	        try {
	            if(connection!=null) {
	                connection.close();
	                connection = null;
	            }
	            if(preparedStatement!=null){
	                preparedStatement.close();
	                preparedStatement = null;
	            }
	            if(resultSet!=null){
	                resultSet.close();
	                resultSet=null;
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }

	    public static void persistent(Result result){
	        insert(result);
	    }
	    
	    //����ڣ�������
	    public static void main(String []args){
	    new ResultDao();
	      Result result=new Result();
	      result.setBasicInfo("1");
	      result.setContext("2");
	      result.setIndex("3");
	      result.setReference("4");
	      result.setStatics("5");
	      result.setSummary("6");
	      result.setTags("7");
	      result.setTitle("8");
	      result.setUrl("9");
	      result.setUrlLink(null);
	      
	       ResultDao.insert(result);
//	        try {
//	            while(rs.next()){
//	                String s = rs.getString(1);
//	                String n = rs.getString(2);
//	                System.out.printf("%s %s\n",s,n);
//	            }
//	        } catch (SQLException e) {
//	            e.printStackTrace();
//	        } finally {
//	            ReleaseConnection();
//	        }
	    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\db\utils\DBUtils.java
package edu.scu.db.utils;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

/**
 * 
 * @author ������
 *
 */
public class DBUtils {
    private static String driver;                       //����·��
    private static String url;                          //���ݿ����ӵ�ַ��˿�
    private static String dbName;                       //���ݿ�����
    private static String dbPassWd;                     //���ݿ�����

    static {                                            //��̬����飬��ʼ�����ݱ���
        Properties properties = new Properties();       //�����ļ�
        Reader in =null;                                
        try {
        	in =new FileReader("config//db-config//config.properties");
            properties.load(in);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        driver = properties.getProperty("driver");
        url=properties.getProperty("url");
        dbName=properties.getProperty("dbName");
        dbPassWd=properties.getProperty("dbPassWd");
    }

    public Connection openConnection(){
        Connection connection = null;                       
        try {
            Class.forName(driver);
            connection = DriverManager.getConnection(url,dbName,dbPassWd);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\proxypool\Proxy.java
package edu.scu.proxypool;
/**
 * 
 * @author ���
 *
 */
public class Proxy 
{
	private String ip;//����ip��ַ
	private int port;//����˿�
	public Proxy(String m_ip,int m_port)
	{
		this.ip=m_ip;
		this.port=m_port;
	}
	public String getIp()
	{
		return ip;
	}
	public int getPort()
	{
		return port;
	}
	public void setIp(String m_ip)
	{
		this.ip=m_ip;
	}
	public void setPort(int m_port)
	{
		this.port=m_port;
	}
	public String toString()
	{
		return "IP:"+ip+" Port:"+port;
	}
	
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\BaiduBaikeCrawler\SCUBaiduBaikeCrawler\src\edu\scu\proxypool\ProxyPool.java
package edu.scu.proxypool;

import java.io.BufferedInputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.util.LinkedList;
import java.util.Random;
/**
 * 
 * @author ���
 * �������
 * ÿsleepMs�Ӵ���Ӧ�̻�ȡn��ip��������
 * ����getProxy������Ӵ������ȡ��һ��������
 * ����addInvalidProxy����ʧЧ������������һ��ʧЧ����
 * ���򽫻ᶨʱ����ʧЧ����
 * 
 * 
 * ���������ڴ���ȽϹ���������˵�ÿ5�����1�η���1��IP�Ĵ���Ӧ����ÿ��ip��һ���Ӻ��ʧЧ
 * ���Ե������������Ϊ10��ÿ5���ȡһ�������˺󣬾�ÿ����ȥ��һ�������ִ���ؿ�����
 * 
 */
public class ProxyPool implements Runnable
{
	private static long sleepMs = 5000;//��ȡip��ʱ����
	private final static int MAX_SIZE=10;//������������
	private final static int INIT_SIZE=1;//����س�ʼ����������������ִ���ؽ��������÷�ֱ������س�ʼ�����ﵽ
	private static String order = "398f73ca16adf5cd29d0933162b99c56";//data5u����Ӧ���ṩ�Ķ�����
	
	private static LinkedList<Proxy> proxyPool = new LinkedList<Proxy>();//����أ��Ǹ�����
	public static LinkedList<Proxy> invalidProxyQueue = new LinkedList<Proxy>();//��Ч����أ�������л�ˮ����û�õĴ���
	public void initProxyPool()//��ȡһ���ִ����Գ�ʼ�������
	{
		System.out.println("����������ڻ�ȡ������...");
		for(int i=0;i<INIT_SIZE;i++)
		{
			proxyPool.offer(requestProxy());
			try {
				Thread.sleep(sleepMs);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("��������ȡ������ɣ�");
	}
	public static Proxy getProxy()//�Ӵ�������������һ������
	{
		Random random=new Random(System.currentTimeMillis());
		return proxyPool.get(random.nextInt(proxyPool.size()));
	}
	public static void addInvalidProxy(Proxy proxy)//����Ч����������һ����Ч����
	{
		invalidProxyQueue.offer(proxy);
	}
	
	
	@Override
	public void run() 
	{
		while(true)
		{
			//������غ���Ч����ؽ���ƥ�䣬ƥ�䵽�ľʹӴ������ɾ��
			while(invalidProxyQueue!=null&&!invalidProxyQueue.isEmpty())
			{
				Proxy invalidProxy=invalidProxyQueue.poll();
				proxyPool.remove(invalidProxy);
				//System.out.println("Deleting Invalid Proxy:"+invalidProxy);
			}
			//������������������ɾ��һ��
			if(proxyPool.size()>MAX_SIZE)
			{
				//Debug
				//System.out.println(">>>>>>>>>>>>>>Too Much Proxy");
				proxyPool.poll();
				continue;
			}
			//��Ӵ��������
			proxyPool.offer(requestProxy());
			
			//�߳�˯�ߣ��ȴ�����Ӧ���ܸ����´���
			try {
				Thread.sleep(sleepMs);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
	}
	//���������������http����data5u����Ӧ���ǣ���ȡ����
	private Proxy requestProxy()
	{
		try {
			java.net.URL url = new java.net.URL("http://api.ip.data5u.com/dynamic/get.html?order=" + order + "&ttl&random=true");
			
	    	HttpURLConnection connection = (HttpURLConnection)url.openConnection();
	    	connection.setConnectTimeout(3000);
	    	connection = (HttpURLConnection)url.openConnection();
	    	
	        InputStream raw = connection.getInputStream();  
	        InputStream in = new BufferedInputStream(raw);  
	        byte[] data = new byte[in.available()];
	        int bytesRead = 0;  
	        int offset = 0;  
	        while(offset < data.length) {  
	            bytesRead = in.read(data, offset, data.length - offset);  
	            if(bytesRead == -1) {  
	                break;  
	            }  
	            offset += bytesRead;  
	        }  
	        in.close();  
	        raw.close();
			String[] res = new String(data, "UTF-8").split("\n");
			//System.out.println(">>>>>>>>>>>>>>��ǰ����IP�� " + res.length);
			for (String ip : res) 
			{
				Proxy pb=new Proxy((ip.split(",")[0]).split(":")[0], Integer.parseInt((ip.split(",")[0]).split(":")[1]));
				//proxyPool.offer(pb);
				//System.out.println(">>>>>>>>>>>>>>��ǰ����IP�� " + pb.getIp()+" port:" + pb.getPort());
				//new Crawler(100, targetUrl, useJs, timeOut, ip, referer, https, outputHeaderInfo).start();
				return pb;
			}
		} catch (Exception e) {
			System.err.println(">>>>>>>>>>>>>>��ȡIP����, " + e.getMessage());
		}
		return null;
	}
	
}
