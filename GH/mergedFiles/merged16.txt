C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\Downloader\Graber.java
package Downloader;

import org.apache.http.HttpEntity;

import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * Created by moontell on 2017/8/11.
 */
public interface Graber {

    void clearRequestQuene();

    void clearCookie();

    ConcurrentLinkedQueue<HttpEntity> getResponseQuene();

    /**
     * 增加请求列表
     *
     * @param requestEntity
     */
    void add(RequestEntity requestEntity);

    /**
     * 主要就是用于关闭response和关闭client
     */
    void close();

    void clearResponseQuene();

    /**
     * 抓取列表里的请求实体
     *
     * @return
     */
    ConcurrentLinkedQueue<HttpEntity> grab();

    void addCoookie(String key, String value);


}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\Downloader\GraberImpl\ConcurrentGraber.java
package Downloader.GraberImpl;

import Downloader.Graber;
import Downloader.Method;
import Downloader.MyHttpClient;
import Downloader.RequestEntity;
import org.apache.http.HttpEntity;

import java.net.URI;
import java.util.Map;
import java.util.concurrent.ConcurrentLinkedQueue;

import static java.lang.Thread.sleep;

/**
 * Created by moontell on 2017/8/11.
 */
public class ConcurrentGraber implements Graber {

    private class DownloadThread extends Thread{
        private final int i;
        private MyHttpClient client;
        public DownloadThread(int i){
            this.i=i;
            client=clients[i];
        }

        @Override
        public void run(){
            HttpEntity response = null;
            RequestEntity requestEntity;
            while((requestEntity=requestEntityQuene.poll())!=null){
                URI uri = requestEntity.getUri();
                System.out.println(uri);
                Method method = requestEntity.getMethod();

                switch (method) {
                    case GET:
                        response = client.get(uri);
                        break;
                    case POST:
                        Map<String, String> postData = requestEntity.getPostData();
                        response = client.post(uri, postData);
                        break;
                    default:
                        break;
                }
                responseQuene.add(response);




            }
            System.out.println(i+"  退出");
        }
    }

    private MyHttpClient[] clients;

    private int threadNum;

    private static ConcurrentLinkedQueue<HttpEntity> responseQuene=new ConcurrentLinkedQueue<HttpEntity>();

    private ConcurrentLinkedQueue<RequestEntity> requestEntityQuene;

    public ConcurrentGraber(long waittime,int retryTime,int threadNum) {
        this.requestEntityQuene = new ConcurrentLinkedQueue<RequestEntity>();
        this.threadNum=threadNum;
        clients=new MyHttpClient[threadNum];
        for (int i=0;i<threadNum;i++){
            clients[i]=new MyHttpClient(waittime,retryTime);
        }
    }

    public ConcurrentLinkedQueue<HttpEntity> getResponseQuene() {
        return responseQuene;
    }

    public void clearRequestQuene() {
        this.requestEntityQuene.clear();
    }

    public void clearCookie() {
        for (MyHttpClient cell:clients
             ) {
            cell.clearCookie();
        }
    }

    public void add(RequestEntity requestEntity) {
        requestEntityQuene.add(requestEntity);
    }

    public void close() {
        for (MyHttpClient cell:clients
                ) {
            cell.close();
        }
    }

    public void clearResponseQuene() {
        responseQuene.clear();
    }

    public ConcurrentLinkedQueue<HttpEntity> grab() {
        for (int i = 0; i <threadNum ; i++) {
            DownloadThread thread=new DownloadThread(i);
            thread.start();
        }
        while(!requestEntityQuene.isEmpty()){
            try {
                sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        return responseQuene;
    }

    public void addCoookie(String key, String value) {
        for (MyHttpClient cell:clients
                ) {
            cell.addCookie(key,value);
        }
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\Downloader\GraberImpl\LinearGraber.java
package Downloader.GraberImpl;

import Downloader.Graber;
import Downloader.Method;
import Downloader.MyHttpClient;
import Downloader.RequestEntity;
import org.apache.http.HttpEntity;

import java.net.URI;
import java.util.Map;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * Created by moontell on 2017/8/11.
 */
public class LinearGraber implements Graber {

    private MyHttpClient client;

    public ConcurrentLinkedQueue<HttpEntity> getResponseQuene() {
        return responseQuene;
    }

    private ConcurrentLinkedQueue<HttpEntity> responseQuene=new ConcurrentLinkedQueue<HttpEntity>();

    /**
     * 需要抓取的网页实体的队列，将会链式地请求这些列表，过程中会增加cookie，最终返回最后一个的response的Entity
     */
    private ConcurrentLinkedQueue<RequestEntity> requestEntityQuene;

    public LinearGraber(MyHttpClient client) {
        this.requestEntityQuene = new ConcurrentLinkedQueue<RequestEntity>();
        this.client = client;
    }


    public void clearRequestQuene() {
        requestEntityQuene.clear();
    }

    public void clearCookie() {
        client.clearCookie();
    }

    public void add(RequestEntity requestEntity) {
        requestEntityQuene.add(requestEntity);
    }

    public void close() {
        client.close();
    }

    public void clearResponseQuene() {
        responseQuene.clear();
    }


    public ConcurrentLinkedQueue<HttpEntity> grab() {
        HttpEntity entity = null;
        for (RequestEntity requestEntity : requestEntityQuene
                ) {
            URI uri = requestEntity.getUri();
            Method method = requestEntity.getMethod();

            switch (method) {
                case GET:
                    entity = client.get(uri);
                    break;
                case POST:
                    Map<String, String> postData = requestEntity.getPostData();
                    entity = client.post(uri, postData);
                    break;
                default:
                    break;
            }
        }
        responseQuene.add(entity);
        return responseQuene;
    }

    public void addCoookie(String key, String value) {
        client.addCookie(key, value);
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\Downloader\Method.java
package Downloader;

/**
 * Created by arloor on 17-5-7.
 */
public enum Method {
    POST, GET
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\Downloader\MyHttpClient.java
package Downloader;

import org.apache.http.*;
import org.apache.http.client.config.CookieSpecs;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.conn.socket.LayeredConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.IOException;
import java.net.URI;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Created by arloor on 17-5-7.
 */

/**
 * todo:需要线程封闭
 */

public class MyHttpClient {
    private final CloseableHttpClient client;
    private final long waittime;
    private final int retryNum;
    //用于保存获取的cookie，每访问一个网页都会通过setcookie方法增加新的cookie
    private Map<String, String> cookieMap = new HashMap<String, String>(64);
    private CloseableHttpResponse response;

    /**
     * 构造方法
     * 使用STANDARD_STRICT的cookie策略
     */
    public MyHttpClient(long waittime, int retryNum) {
        // Create a trust manager that does not validate certificate chains
        TrustManager[] trustAllCerts = new TrustManager[]{
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }

                    public void checkClientTrusted(X509Certificate[] certs, String authType) {
                        // don't check
                    }

                    public void checkServerTrusted(X509Certificate[] certs, String authType) {
                        // don't check
                    }
                }
        };

        SSLContext ctx = null;
        try {
            ctx = SSLContext.getInstance("TLS");
            ctx.init(null, trustAllCerts, null);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (KeyManagementException e) {
            e.printStackTrace();
        }


        LayeredConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(ctx);

        RequestConfig requestConfig = RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD_STRICT).build();
        this.client = HttpClients.custom().setDefaultRequestConfig(requestConfig).setSSLSocketFactory(sslSocketFactory).build();
        this.waittime = waittime;
        this.retryNum = retryNum;
    }

    public MyHttpClient(long waittime) {
        this(waittime, 5);
    }

    public MyHttpClient() {
        this(500, 5);
    }

    /**
     * get请求网页，如果response不正确，会重试retryNum次
     *
     * @param uri 要请求的uri
     * @return 如果请求失败返回null，如果请求成功返回HttpEntity
     */
    public HttpEntity get(URI uri) {
        HttpGet get = new HttpGet(uri);

        return doRequest(get, Method.GET);
    }

    /**
     * post请求网页，如果response不正确，会重试retryNum次
     *
     * @param uri      要请求的uri
     * @param postData post数据
     * @return 如果请求失败返回null，如果请求成功返回HttpEntity
     */
    public HttpEntity post(URI uri, Map<String, String> postData) {
        HttpPost post = new HttpPost(uri);

        //构造post数据
        System.out.println("----------------------------------------------------");
        System.out.println("提交的表单数据");
        List<NameValuePair> valuePairs = new LinkedList<NameValuePair>();
        for (Map.Entry<String, String> postDataEntry : postData.entrySet()
                ) {
            valuePairs.add(new BasicNameValuePair(postDataEntry.getKey(), postDataEntry.getValue()));
            System.out.println(postDataEntry.getKey() + ":" + postDataEntry.getValue());
        }
        System.out.println("----------------------------------------------------\n\n\n");
        // 上面的原型是这个
        // valuePairs.add(new BasicNameValuePair("password", "yueyue"));
        UrlEncodedFormEntity postEntity = new UrlEncodedFormEntity(valuePairs, Consts.UTF_8);
        post.setEntity(postEntity);
        return doRequest(post, Method.POST);

    }

    public HttpEntity doRequest(Object request, Method method) {

        HttpUriRequest requestClone;
        switch (method) {
            case GET:
                requestClone = (HttpGet) request;
                break;
            case POST:
                requestClone = (HttpPost) request;
                break;
            default:
                requestClone = (HttpGet) request;
        }
        //设置User-Agent
        requestClone.setHeader("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36");
        System.out.println("请求： " + requestClone.getURI());
        //设置refer 发现如果refer为空很可能被反爬虫
        String[] refers = requestClone.getURI().toString().split("/");
        String refer = refers[0] + "//" + refers[2] + "/";
        requestClone.setHeader("Refer", refer);
        System.out.println(requestClone.getHeaders("Refer")[0]);
        //带cookie爬取
        String cookie = getCookie();
        requestClone.setHeader("Cookie", cookie);
        System.out.println("请求前的Cookie:" + getCookie());
        try {
            boolean responseValid = false;
            //如果response不是200-300则重试retryNum
            int i = 0;
            while (!responseValid) {
                Thread.sleep(waittime);
                response = client.execute(requestClone);
                responseValid = response != null &&
                        //下面这个status需要在200-300,如果直接折秤200会有问题
                        //因为302 状态是登陆验证中经常出现的，githubdeno就因为这个错困扰了很久
                        response.getStatusLine().getStatusCode() < 400 && response.getStatusLine().getStatusCode() >= 200;
                if (i == retryNum) {
                    System.out.println("请求" + retryNum + "次仍然失败，放弃");
                    System.out.println("\n\n\n");
                    return null;
                }
                i++;
            }

            addCookie(response);
            System.out.println("请求后的Cookie:" + getCookie());
            HttpEntity responseEntity = response.getEntity();

            Thread.sleep(waittime);//线程等待waittime
            System.out.println("\n\n\n");
            return responseEntity;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("\n\n\n");
        return null;
    }

    /**
     * 从响应中获取Cookie，保存在cookieMap中
     *
     * @param httpResponse
     */

    public void addCookie(HttpResponse httpResponse) {
        Header headers[] = httpResponse.getHeaders("Set-Cookie");
        if (headers == null || headers.length == 0) {
            return;
        }
        String cookie = "";
        for (int i = 0; i < headers.length; i++) {
            cookie = headers[i].getValue().split(";")[0];
            try {
                String cookieKey = cookie.split("=")[0];
                String cookieValue = cookie.split("=")[1];
                cookieMap.put(cookieKey, cookieValue);
            } catch (ArrayIndexOutOfBoundsException e) {
                //处理如果返回的是空cookie则把value设置成空字符
                try {
                    String cookieKey = cookie.split("=")[0];
                    String cookieValue = "";
                    cookieMap.put(cookieKey, cookieValue);
                    e.printStackTrace();
                } catch (ArrayIndexOutOfBoundsException e1) {
                    e.printStackTrace();
                }
            }
        }
        return;
    }

    public void addCookie(String key, String value) {
        cookieMap.put(key, value);
    }


    public void clearCookie() {
        cookieMap.clear();
    }

    //从cookieMap中获取cookie
    public String getCookie() {
        String cookieString = "";
        for (Map.Entry<String, String> cookie : cookieMap.entrySet()
                ) {
            cookieString += cookie.getKey() + "=" + cookie.getValue() + "; ";
        }
        if (cookieString.length() > 2)
            cookieString = cookieString.substring(0, cookieString.length() - 2);
        return cookieString;
    }

    /**
     * 关闭client
     * 每一个client都需要关闭
     */
    public void close() {
        try {
            if (response != null)
                response.close();
            client.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\Downloader\RequestEntity.java
package Downloader;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by arloor on 17-5-7.
 */

/**
 * httpclient发起请求除了cookie，需要设置的有
 * uri，method，postData
 * 这个类就是这三个东西的一个封装吧
 */
public class RequestEntity {
    private URI uri;
    private Method method;
    private Map<String, String> postData;

    public RequestEntity(URI uri, Map<String, String> postData) {
        this.uri = uri;
        this.method = Method.POST;
        this.postData = postData;
    }

    public RequestEntity(URI uri) {
        this.uri = uri;
        this.method = Method.GET;
        this.postData = new HashMap<String, String>();
    }

    /**
     * 使用addPostData,目的是避免复杂的创建过程
     *
     * @param key
     * @param value
     */
    public void addPostData(String key, String value) {
        setMethod(Method.POST);
        postData.put(key, value);
    }

    public URI getUri() {
        return uri;
    }

    public void setUri(URI uri) {
        this.uri = uri;
    }

    public Method getMethod() {
        return method;
    }

    public void setMethod(Method method) {
        this.method = method;
    }

    public Map<String, String> getPostData() {
        return postData;
    }

    public void clearPostData() {
        postData.clear();
    }

    public void setPostData(Map<String, String> postData) {
        this.postData = postData;
    }

    public void addPostData(Map<String, String> postData) {
        for (Map.Entry<String, String> entry : postData.entrySet()
                ) {
            addPostData(entry.getKey(), entry.getValue());
        }
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\NCBIDemo.java
import Downloader.Graber;
import Downloader.GraberImpl.ConcurrentGraber;
import Downloader.GraberImpl.LinearGraber;
import Downloader.MyHttpClient;
import Downloader.RequestEntity;
import Processor.Parser;
import org.apache.http.HttpEntity;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

import static java.lang.Thread.sleep;

/**
 * Created by moontell on 2017/8/8.
 */
public class NCBIDemo {
    volatile static String pageNo=new String();
    volatile static int curNo=1;
    volatile  static ConcurrentLinkedQueue<String> linkQuene=new ConcurrentLinkedQueue<String>();

    public static void main(String[] args) throws URISyntaxException, InterruptedException {

        Graber graber=new LinearGraber(new MyHttpClient(500, 5));
        //增加一些固定的cookie
        //不然网站会禁止访问
        graber.addCoookie("MyNcbiSigninPreferences","O2dvb2dsZSY%3D");
        graber.addCoookie("_ga","GA1.2.597577670.1502183053");
        graber.addCoookie("_gat","1");
        graber.addCoookie("_gid","GA1.2.1338710214.1502183053");
        graber.addCoookie("__sonar","3622631656911641626");
        graber.addCoookie("id","=1497620414|et=730|cs=002213fd48c264ac1ca119dba5");
        String s= "MyNcbiSigninPreferences\tO2dvb2dsZSY%3D\tN/A\tN/A\tN/A\t40\t\t\t\t\n" +
                "WT_FPC\tid=2d22651696987ce8a7c1502137277672:lv=1502137277672:ss=1502137277672\tN/A\tN/A\tN/A\t78\t\t\t\t\n" +
                "WebEnv\t1vi9e77n77IWD2DK_CFta1PUVVCQEAnil8Q7WN8zFnTd9E3uNZdnCgPeCQS_YeoqWNue_EUlNyEcL83d3jydi3AfCncDoIAfvrfkt%40396A24269897E821_0067SID\tN/A\tN/A\tN/A\t137\t\t\t\t\n" +
                "_ceg.s\toud0nw\tN/A\tN/A\tN/A\t15\t\t\t\t\n" +
                "_ceg.u\toud0nw\tN/A\tN/A\tN/A\t15\t\t\t\t\n" +
                "_ga\tGA1.3.597577670.1502183053\tN/A\tN/A\tN/A\t32\t\t\t\t\n" +
                "_ga\tGA1.2.597577670.1502183053\tN/A\tN/A\tN/A\t32\t\t\t\t\n" +
                "_gat\t1\tN/A\tN/A\tN/A\t8\t\t\t\t\n" +
                "_gid\tGA1.3.1338710214.1502183053\tN/A\tN/A\tN/A\t34\t\t\t\t\n" +
                "_gid\tGA1.2.1338710214.1502183053\tN/A\tN/A\tN/A\t34\t\t\t\t\n" +
                "books.article.report\t\tN/A\tN/A\tN/A\t23\t\t\t\t\n" +
                "ncbi_sid\t396A24269897E821_0067SID\tN/A\tN/A\tN/A\t35\t\t\t\t\n" +
                "starnext\tK4OwNg9ghgJiCmAPALgLgEwF54mQJ3gC8AyAZkwAdgAjAW3hmIBZMYIBjAZ2FuIDZWHbrwDsmABbJaYYgA5M6AAzEAnK3gAzKMDDJiARkWZ24gJYgoB/ZgCsBrKEiwD5fftLob6PgZYUoAObwAPomUCBBBgJQYDL6YlpgnPAG8onJBmqkKnwAQjYAwjYAoiqyAIJ8iioqhor1DQ3FACL1fAXESpjZfMXoIv1llfrlpHWNjUy59ejNndY4+EQApKTlVHQMq+VsXDzbAHIA8gfFnVgA7lcAdCDs1Ka3YLS3puLXARAAbp0siwSEbYbeiMbzYXAAoE0EHbXbCTpif4rNbArZrOH7NbHU6deRIwEiAqomDLQkY2ikgrYs7oNTuPg+UhGER8WRkaz0xlYAZs0jkdIpUgsfDAQU2TDuJgqMgCMYqOykMToJhkeT6WRufRkOkiWQM5hGfTy2rMax8frMLAWZCmL4pJgsRzQOBIPRMcXoYg2VykfU2Fh8Uhsmwevh2GwCLzSmxiLU2eTulU2NTKKqYVPWFkiIA==\tN/A\tN/A\tN/A\t557";
        String[] cookies=s.split("\n");
        for (String cell:cookies
                ) {
            graber.addCoookie(cell.split("\t")[0],cell.split("\t")[1]);
        }

        URI uri;
        RequestEntity requestEntity;
        ConcurrentLinkedQueue<HttpEntity> responses;



        //https://www.ncbi.nlm.nih.gov/pubmed?term=China
        uri =URI.create("https://www.ncbi.nlm.nih.gov/pubmed?term=China");
        requestEntity = new RequestEntity(uri);
        graber.add(requestEntity);
        responses=graber.grab();
        HttpEntity response=responses.peek();





        sleep(2000);

        LinkParser linkParser=new LinkParser(response);
        graber.close();
        List<String> links=linkParser.getLinks();

        graber=new ConcurrentGraber(500,5,20);
        for (String link:links
             ) {
            graber.add(new RequestEntity(URI.create(link)));
        }
        responses = graber.grab();
        sleep(10000);
        int size=responses.size();

        File dir=new File("files");
        if (!dir.exists()){
            dir.mkdir();
        }
        for (int i = 0; i <size ; i++) {
            System.out.println(i);
            File out = new File("files/"+i+".html");
            BufferedOutputStream stream= null;
            if (!out.exists()) {
                try {
                    out.createNewFile();
                } catch (IOException e) {
                    e.printStackTrace();
                    try {
                        out.createNewFile();
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
            }
            try {
                stream = new BufferedOutputStream(new FileOutputStream(out));
                response=responses.poll();
                response.writeTo(stream);
                stream.close();
                //entity.writeTo(System.out);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        graber.close();
    }

    private static class LinkParser extends Parser {

        public LinkParser(HttpEntity entity) {
            super(entity);
        }

        public List<String> getLinks(){
            List<String> links=new LinkedList<String>();
            Elements elements=doc.getElementsByClass("title");
            for (Element cell:elements
                    ) {
                Element link=cell.getElementsByTag("a").first();
                String linkStr=link.attr("href");
                linkStr="https://www.ncbi.nlm.nih.gov"+linkStr;
                links.add(linkStr);
            }
            return links;
        }
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\EasyCrawler\src\main\java\Processor\Parser.java
package Processor;

import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by arloor on 17-5-8.
 */
public abstract class Parser {
    public Document doc;

    public Parser(HttpEntity entity) {
        try {
            this.doc = Jsoup.parse(EntityUtils.toString(entity));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 获取网页中需要填写的表单
     *
     * @return
     */
    public Map<String, String> getCommit() {
        Map<String, String> postData = new HashMap<String, String>();
        Element form = doc.getElementsByTag("form").first();
        Elements elements = form.getElementsByAttribute("name");
        System.out.println("----------------------------------------------------");
        System.out.println("需要填写的表单数据有：");
        for (Element element : elements
                ) {
            System.out.println(element.attr("name") + ":" + element.attr("value"));
            postData.put(element.attr("name"), element.attr("value"));
        }
        System.out.println("----------------------------------------------------");
        return postData;
    }
}
