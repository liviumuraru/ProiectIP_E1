C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubApi.java
package net.trustie.github;

/**
 * Created by g1a@pdl on 2015/9/29 10:23.
 */
public class GithubApi {
    private int id_db;
    private int id;
    private int isdown;
    private String url;
    private String name;
    private String full_name;
    private String description;
    private String created_at;
    private String updated_at;
    private String pushed_at;
    private String homepage;
    private String language;
    private int size;
    private int stargazers_count;
    private int watchers_count;
    private String has_issues;
    private String has_downloads;
    private String has_wiki;
    private String has_pages;
    private int forks_count;
    private int open_issues_count;
    private int forks;
    private int open_issues;
    private int watchers;
    private int network_count;
    private int subscribers_count;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFull_name() {
        return full_name;
    }

    public void setFull_name(String full_name) {
        this.full_name = full_name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getCreated_at() {
        return created_at;
    }

    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    public String getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(String updated_at) {
        this.updated_at = updated_at;
    }

    public String getPushed_at() {
        return pushed_at;
    }

    public void setPushed_at(String pushed_at) {
        this.pushed_at = pushed_at;
    }

    public String getHomepage() {
        return homepage;
    }

    public void setHomepage(String homepage) {
       /* if (homepage==null||homepage.equals(""))
            this.homepage = "null";
        else*/
            this.homepage = homepage;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public int getSize() {
        return size;
    }

    public void setSize(int size) {
        this.size = size;
    }

    public int getStargazers_count() {
        return stargazers_count;
    }

    public void setStargazers_count(int stargazers_count) {
        this.stargazers_count = stargazers_count;
    }

    public int getWatchers_count() {
        return watchers_count;
    }

    public void setWatchers_count(int watchers_count) {
        this.watchers_count = watchers_count;
    }

    public String getHas_issues() {
        return has_issues;
    }

    public void setHas_issues(String has_issues) {
        this.has_issues = has_issues;
    }

    public String getHas_downloads() {
        return has_downloads;
    }

    public void setHas_downloads(String has_downloads) {
        this.has_downloads = has_downloads;
    }

    public String getHas_wiki() {
        return has_wiki;
    }

    public void setHas_wiki(String has_wiki) {
        this.has_wiki = has_wiki;
    }

    public String getHas_pages() {
        return has_pages;
    }

    public void setHas_pages(String has_pages) {
        this.has_pages = has_pages;
    }

    public int getForks_count() {
        return forks_count;
    }

    public void setForks_count(int forks_count) {
        this.forks_count = forks_count;
    }

    public int getOpen_issues_count() {
        return open_issues_count;
    }

    public void setOpen_issues_count(int open_issues_count) {
        this.open_issues_count = open_issues_count;
    }

    public int getForks() {
        return forks;
    }

    public void setForks(int forks) {
        this.forks = forks;
    }

    public int getOpen_issues() {
        return open_issues;
    }

    public void setOpen_issues(int open_issues) {
        this.open_issues = open_issues;
    }

    public int getWatchers() {
        return watchers;
    }

    public void setWatchers(int watchers) {
        this.watchers = watchers;
    }

    public int getNetwork_count() {
        return network_count;
    }

    public void setNetwork_count(int network_count) {
        this.network_count = network_count;
    }

    public int getSubscribers_count() {
        return subscribers_count;
    }

    public void setSubscribers_count(int subscribers_count) {
        this.subscribers_count = subscribers_count;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public int getId_db() {
        return id_db;
    }

    public void setId_db(int id_db) {
        this.id_db = id_db;
    }

    public int getIsdown() {
        return isdown;
    }

    public void setIsdown(int isdown) {
        this.isdown = isdown;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubApiCrawler.java
package net.trustie.github;

import com.alibaba.fastjson.JSON;
import org.apache.log4j.Logger;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;
import us.codecraft.webmagic.*;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;

import javax.annotation.Resource;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by g1a@pdl on 2015/9/29 13:56.
 */
@Component
public class GithubApiCrawler {

    final Site site = Site.me().setRetryTimes(2).setTimeOut(120000).setSleepTime(1000).setDomain("github.com")
            .setUserAgent("Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)");

    final String token="?access_token=877738b0ede13b627605e301dd4f00725697ca0d";
    final String token_access1="?access_token=8368357f10e6318309b7e278b900e375f73421bd";
    final String token_access2="?access_token=6ac08b18aa04a36b602957be808a813900487173";
    final String token_access3="?access_token=e94b02919d147be8df7dfc5ede4de92c3a75b1b4";
    @Resource
    private GithubDao dao;
    private Logger logger = Logger.getLogger(this.getClass());

    public void run() {
        // 404页面也下载
        Set<Integer> set = new HashSet<Integer>();
        set.addAll(Arrays.asList(new Integer[]{200,404,403,503,500,502,504,400}));
        site.setAcceptStatCode(set);
        Spider.create(new PageProcessor() {
            public void process(Page page) {
                GithubApi githubApi = new GithubApi();
                int id_db = dao.findIdbyUrl(page.getUrl().regex("(.*)\\?access_token").toString());
                if (page.getStatusCode() == 200) {
                    logger.info("Fetched! " + page.getUrl().regex("(.*)\\?access_token"));
                    String apiJson = page.getRawText();
                    githubApi = JSON.parseObject(apiJson, GithubApi.class);
                    githubApi.setIsdown(1);
                    githubApi.setId_db(id_db);
                } else {
                    githubApi.setIsdown(0);
                    githubApi.setId_db(id_db);
                }
                // 更新抓取信息
                dao.updateApiInfo(githubApi);
                // 加入下一个任务
                page.addTargetRequest(dao.getApiUrl()+token_access2);
                page.putField("repo", githubApi);
                page.putField("api", page.getRawText());

            }

            public Site getSite() {
                return site;
            }
        }).addPipeline(new Pipeline() {
            public void process(ResultItems resultItems, Task task) {
                // 将api_json持久化
                GithubApi githubApi = (GithubApi) resultItems.get("repo");
                try {
                    dao.insertRepoApi(githubApi.getId(), (String) resultItems.get("api"));
                    logger.info("save success:" + githubApi.getFull_name());
                } catch (Exception ex) {
                    logger.error("save failed:" + ex.toString());
                }

            }
        }).addUrl(dao.getApiUrl()+token_access2).run();

    }

    public static void main(String[] args) {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
                "classpath:/applicationContext.xml");
        while (true) {
            applicationContext.getBean(GithubApiCrawler.class).run();
            System.out.println("next stage!");
        }

    }


}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubDao.java
package net.trustie.github;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

/**
 * Created by g1a@pdl on 2015/9/29 0:25.
 */
public interface GithubDao {

    @Select("select * from p_random where isdown is null limit 1")
    public GithubRepoDown getRepoInfo();

    @Update("update p_random set size=${size},isdown=${isdown},spend=${spend} where id=${id}")
    public int updateRepoInfo(GithubRepoDown repo);

    @Update("update repo set `name`=#{name},full_name=#{full_name},`description`=#{description}," +
            "created_at=#{created_at},updated_at=#{updated_at},pushed_at=#{pushed_at}," +
            "size=#{size},homepage=#{homepage},stargazers_count=#{stargazers_count},watchers_count=#{watchers_count}," +
            "has_issues=#{has_issues},has_downloads=#{has_downloads},has_wiki=#{has_wiki}," +
            "has_pages=#{has_pages},language=#{language}," +
            "forks_count=#{forks_count},open_issues_count=#{open_issues_count},forks=#{forks},open_issues=#{open_issues}," +
            "watchers=#{watchers},network_count=#{network_count},subscribers_count=#{subscribers_count}," +
            "`id`=#{id},isdown=#{isdown} " +
            " where id_db=#{id_db}")
    public int updateApiInfo(GithubApi repo);

    @Insert("insert into repo_api(`id`,`api`) values (#{id},#{api})")
    public int insertRepoApi(@Param("id")int id,@Param("api")String api);

    @Select("select url from repo where isdown is null limit 1")
    public String getApiUrl();

    @Select("select id_db from repo where url=#{url} and isdown is null limit 1")
    public int findIdbyUrl(@Param("url")String url);

    @Select("select url from repo_pom where isdown is null limit 1")
    public String getPomUrl();

    @Select("select id from repo_pom where url=#{url} and isdown is null limit 1")
    public int findIdbyPomUrl(@Param("url")String url);

    @Update("update repo_pom set `has_pom`=#{has_pom},`has_libs`=#{has_libs},`url_pom`=#{url_pom},`url_libs`=#{url_libs}" +
            ",`isdown`=#{isdown} " +
            "where `url`=#{url}")
    public int updatePomInfo(GithubHas pom);


    //����pom
    @Select("select url_pom from repo_set_has_pom where isdown is null limit 1")
    public String getOnePomUrl();

    @Update("update repo_set_has_pom set `isdown`=#{isdown},`pom`=#{pom} " +
            "where `url_pom`=#{url_pom}")
    public int updatePom(@Param("url_pom")String url_pom,@Param("pom")String pom,@Param("isdown")int isdown);

    @Insert("insert into repo_set_has_pom_html(`url_pom`,`html`) values (#{url_pom},#{html})")
    public int insertPomHtml(@Param("url_pom")String url_pom,@Param("html")String html);



    //����pom
    @Select("select url_libs from repo_set_has_libs where isdown is null limit 1")
    public String getOneLibsUrl();

    @Update("update repo_set_has_libs set `isdown`=#{isdown},`libs`=#{libs} " +
            "where `url_libs`=#{url_libs}")
    public int updateLibs(@Param("url_libs")String url_libs,@Param("libs")String libs,@Param("isdown")int isdown);

    /*@Insert("insert into repo_set_has_libs_html(`url_pom`,`html`) values (#{url_pom},#{html})")
    public int insertPomHtml(@Param("url_pom")String url_pom,@Param("html")String html);*/



}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubHas.java
package net.trustie.github;

/**
 * Created by g1a@pdl on 2015/10/9 16:33.
 */
public class GithubHas {
    private int id;
    private String url;
    private int has_pom=0;
    private int has_libs=0;
    private String url_pom;
    private String url_libs;
    private int isdown;

    public int getIsdown() {
        return isdown;
    }

    public void setIsdown(int isdown) {
        this.isdown = isdown;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public int getHas_pom() {
        return has_pom;
    }

    public void setHas_pom(int has_pom) {
        this.has_pom = has_pom;
    }

    public int getHas_libs() {
        return has_libs;
    }

    public void setHas_libs(int has_libs) {
        this.has_libs = has_libs;
    }

    public String getUrl_pom() {
        return url_pom;
    }

    public void setUrl_pom(String url_pom) {
        this.url_pom = url_pom;
    }

    public String getUrl_libs() {
        return url_libs;
    }

    public void setUrl_libs(String url_libs) {
        this.url_libs = url_libs;
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubHasCrawler.java
package net.trustie.github;

import org.apache.log4j.Logger;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;
import us.codecraft.webmagic.*;
import us.codecraft.webmagic.processor.PageProcessor;

import javax.annotation.Resource;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by g1a@pdl on 2015/9/29 13:56.
 */
@Component
public class GithubHasCrawler {

    final Site site = Site.me().setRetryTimes(2).setTimeOut(120000).setSleepTime(1000).setDomain("github.com")
            .setUserAgent("Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)");

    final String token_access0="?access_token=877738b0ede13b627605e301dd4f00725697ca0d";
    final String token_access1="?access_token=8368357f10e6318309b7e278b900e375f73421bd";
    final String token_access2="?access_token=6ac08b18aa04a36b602957be808a813900487173";
    final String token_access3="?access_token=e94b02919d147be8df7dfc5ede4de92c3a75b1b4";
    @Resource
    private GithubDao dao;
    private Logger logger = Logger.getLogger(this.getClass());

    public void run() {
        // 404页面也下载
        Set<Integer> set = new HashSet<Integer>();
        set.addAll(Arrays.asList(new Integer[]{200,404,400,403,500,502,503,504,}));
        site.setAcceptStatCode(set);
        Spider.create(new PageProcessor() {
            public void process(Page page) {
                GithubHas githubPom=new GithubHas();
                String repo=page.getUrl().regex("github.com/(.*)").toString();

                if (page.getStatusCode() == 200) {
                    boolean flag=false;
                    if(page.getHtml().links().regex(".*/tree/master/libs?").toString()!=null){
                        githubPom.setHas_libs(1);
                        githubPom.setUrl_libs(page.getHtml().links().regex(".*/tree/master/libs?").toString());
                    }
                    if(page.getHtml().links().regex(".*/blob/master/pom.xml").toString()!=null){
                        githubPom.setHas_pom(1);
                        githubPom.setUrl_pom(page.getUrl().toString() + "/blob/master/pom.xml");
                    }
                    githubPom.setIsdown(1);
                    logger.info("save success:" + repo);
                } else {
                    githubPom.setIsdown(0);
                    System.out.println(page.getStatusCode());
                    logger.error("save failed:" + repo);
                }
                githubPom.setUrl("https://api.github.com/repos/" + repo);
                dao.updatePomInfo(githubPom);
                page.addTargetRequest(dao.getPomUrl().replaceFirst("api.", "").replaceFirst("repos/", "").toString());
                // page.putField("pom", githubPom);
                // page.putField("curreet",url);
            }
            public Site getSite() {return site;}
        }).addUrl(dao.getPomUrl().replaceFirst("api.","").replaceFirst("repos/","")).thread(5).run();
       // }).addUrl("https://github.com/netty/netty").run();
    }

    public static void main(String[] args) {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
                "classpath:/applicationContext.xml");
        while (true) {
            applicationContext.getBean(GithubHasCrawler.class).run();
            System.out.println("next stage!");
       }

    }


}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubPomLibsCrawler.java
package net.trustie.github;

import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.processor.PageProcessor;

import javax.annotation.Resource;
import java.util.*;

/**
 * Created by g1a@pdl on 2015/9/29 13:56.
 */
@Component
public class GithubPomLibsCrawler {

    final Site site = Site.me().setRetryTimes(2).setTimeOut(120000).setSleepTime(1000).setDomain("github.com")
            .setUserAgent("Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)").setCharset("UTF-8");
    final String token_access0="?access_token=877738b0ede13b627605e301dd4f00725697ca0d";
    final String token_access1="?access_token=8368357f10e6318309b7e278b900e375f73421bd";
    final String token_access2="?access_token=6ac08b18aa04a36b602957be808a813900487173";
    final String token_access3="?access_token=e94b02919d147be8df7dfc5ede4de92c3a75b1b4";
    @Resource
    private GithubDao dao;
    private Logger logger = Logger.getLogger(this.getClass());

    public void run() {
        // 404页面也下载
        Set<Integer> set = new HashSet<Integer>();
        set.addAll(Arrays.asList(new Integer[]{200,404,400,403,500,502,503,504,}));
        site.setAcceptStatCode(set);
        Spider.create(new PageProcessor() {
            public void process(Page page) {
                List<String> poms=new ArrayList<String>();
                String currentUrl=page.getUrl().replace("https://raw.githubusercontent.com","https://github.com").
                        replace("/master/pom.xml", "/blob/master/pom.xml").get();
                if(page.getStatusCode()!=200){
                    page.setSkip(true);
                    dao.updatePom(currentUrl,poms.toString(),-1);
                    return;
                }
                try {
                    List<Element> elements=new ArrayList<Element>();
                    // 必须加上trim去开头，也就是说第一个字符必须是<?xml......
                    Document document = DocumentHelper.parseText(page.getRawText().trim());
                    Element dependencies = document.getRootElement().element("dependencies");
                    Element dependencyManagement = document.getRootElement().element("dependencyManagement");

                    if(dependencies==null){
                        // 没dependencies，也要有上游的dependencyManagement
                        if(dependencyManagement!=null){
                            dependencies=dependencyManagement.element("dependencies");
                            elements=dependencies.elements("dependency");
                        }else{
                            // 虽然有pom文件，也可能没依赖
                            dao.updatePom(currentUrl,poms.toString(),1);
                            dao.insertPomHtml(currentUrl,page.getRawText());
                            return;
                        }
                    }else{
                        // 先取dependency
                        elements=dependencies.elements("dependency");
                        // 有些pom同时存在dependencyManagement和dependencies
                        if(dependencyManagement!=null){
                            List<Element> elements1=dependencyManagement.element("dependencies").elements("dependency");
                            for (Element element : elements1) {
                                elements.add((Element)element.clone());
                            }
                        }
                    }

                    for (Element element : elements) {
                        // version可能不存在
                        Element ver=element.element("version");
                        String version="0.0.0";
                        if (ver!=null){
                            version=ver.getText().trim();
                        }
                        if(version.startsWith("$")){
                            Element properties = document.getRootElement().element("properties");
                            if(properties!=null) {
                                Element elementVersion = properties.element(version.replace("$", "").replace("{", "").replace("}", ""));
                                // elementVersion可能不存在，作者同志写的五花八门
                                if (elementVersion != null) {
                                    version = elementVersion.getText();
                                }
                            }else {
                                version="0.0.0";
                            }

                        }
                        poms.add("{" + element.element("groupId").getText().trim() + "-}" +
                                element.element("artifactId").getText().trim() + "-" + version);
                    }

                    dao.updatePom(currentUrl,poms.toString(),1);
                    dao.insertPomHtml(currentUrl,page.getRawText());

                } catch (Exception e) {
                    dao.updatePom(currentUrl,poms.toString(),0);
                    e.printStackTrace();
                }finally {
                    page.addTargetRequest(dao.getOnePomUrl().replaceFirst("https://github.com", "https://raw.githubusercontent.com").
                            replaceFirst("blob/",""));
                }
            }
            public Site getSite() {return site;}
        //}).addUrl(dao.getPomUrl().replaceFirst("api.","").replaceFirst("repos/","")).thread(1).run();
        }).addUrl(dao.getOnePomUrl().
                replaceFirst("https://github.com", "https://raw.githubusercontent.com").
                replaceFirst("blob/","")).run();

    }

    public static void main(String[] args) {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
                "classpath:/applicationContext.xml");
        while (true) {
            applicationContext.getBean(GithubPomLibsCrawler.class).run();
            System.out.println("next stage!");
       }

    }


}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubPomLibsCrawler_libs.java
package net.trustie.github;

import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.processor.PageProcessor;

import javax.annotation.Resource;
import java.util.*;

/**
 * Created by g1a@pdl on 2015/9/29 13:56.
 */
@Component
public class GithubPomLibsCrawler_libs {

    final Site site = Site.me().setRetryTimes(2).setTimeOut(120000).setSleepTime(1000).setDomain("github.com")
            .setUserAgent("Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)").setCharset("UTF-8");
    @Resource
    private GithubDao dao;
    private Logger logger = Logger.getLogger(this.getClass());

    public void run() {
        // 404页面也下载
        Set<Integer> set = new HashSet<Integer>();
        set.addAll(Arrays.asList(new Integer[]{200,404,400,403,500,502,503,504,}));
        site.setAcceptStatCode(set);
        Spider.create(new PageProcessor() {
            public void process(Page page) {
                List<String> libs=new ArrayList<String>();
                String currentUrl=page.getUrl().get();
                if(page.getStatusCode()!=200){
                    page.setSkip(true);
                    dao.updateLibs(currentUrl, libs.toString(), page.getStatusCode());
                    return;
                }
                try {

                    // 提取出jar
                    libs = page.getHtml().links().regex("lib[s]?/(.*).jar").all();
                    System.out.println("libs>>>>>>"+libs.toString());
                    dao.updateLibs(currentUrl, libs.toString(), 1);
                }catch (Exception e){
                    logger.error(e.getMessage());
                    e.printStackTrace();
                }finally {
                    page.addTargetRequest(dao.getOneLibsUrl());
                }
            }
            public Site getSite() {return site;}
        }).addUrl(dao.getOneLibsUrl()).run();

    }

    public static void main(String[] args) {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
                "classpath:/applicationContext.xml");
        while (true) {
            applicationContext.getBean(GithubPomLibsCrawler_libs.class).run();
            System.out.println("next stage!");
       }

    }


}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubRepoDown.java
package net.trustie.github;

/**
 * Created by g1a@pdl on 2015/9/29 0:30.
 */
public class GithubRepoDown {
    private int id;
    private String url;
    private int isdown;
    private long spend;
    private long size;


    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public int getIsdown() {
        return isdown;
    }

    public void setIsdown(int isdown) {
        this.isdown = isdown;
    }

    public long getSpend() {
        return spend;
    }

    public void setSpend(long spend) {
        this.spend = spend;
    }

    public long getSize() {
        return size;
    }

    public void setSize(long size) {
        this.size = size;
    }
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\github_zip\src\main\java\net\trustie\github\GithubZipCrawler.java
package net.trustie.github;

import org.apache.log4j.Logger;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;


/**
 * Created by g1a@pdl on 2015/9/28 21:51.
 */
// need time-out solve
@Component
public class GithubZipCrawler {

    private Logger logger =Logger.getLogger(this.getClass());
    @Resource
    private GithubDao dao;

    public void run(){
        while (true){
            downloader();
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

    }
    public boolean downloader(){
        // FileUtils.copyURLToFile(httpurl, f);
        GithubRepoDown gitrepo=dao.getRepoInfo();
        //Exception in thread "main" java.lang.NullPointerException
        String targetUrl=gitrepo.getUrl();
        logger.info("current task:"+targetUrl);
        long starTime=System.currentTimeMillis();
        String downloadZip=targetUrl.replace("api.","").replace("repos/","")
                +"/archive/master.zip";
        String downloadFileName="./zip/"+targetUrl.replace("https://api.github.com/repos/","")
                .replace("/","-")+"-master.zip";
        int bytesum = 0;
        int byteread = 0;
        InputStream inStream=null;
        FileOutputStream fs =null;
        try {
            URL url = new URL(downloadZip);
            URLConnection conn = url.openConnection();
            inStream = conn.getInputStream();
            fs = new FileOutputStream(downloadFileName);
            byte[] buffer = new byte[4028];
            while ((byteread = inStream.read(buffer)) != -1) {
                bytesum += byteread;
                fs.write(buffer, 0, byteread);
            }
            long spend=(System.currentTimeMillis() - starTime) / 1000;
            logger.info(downloadFileName + " Fetch!" + " size:" + bytesum/1024+"k"+
                    " time:" + spend + "s");
            gitrepo.setSpend(spend);
            gitrepo.setSize(bytesum / 1024);
            gitrepo.setIsdown(1);
            dao.updateRepoInfo(gitrepo);

        } catch (Exception e) {
            gitrepo.setIsdown(0);
            dao.updateRepoInfo(gitrepo);
            logger.error(downloadFileName + " Download Error:" + e);
            return false;
        } finally{
            try {
                if(inStream!=null){
                    inStream.close();
                }
            } catch (IOException e) {
                inStream=null;
            }
            try {
                if(fs!=null){
                    fs.close();
                }
            } catch (IOException e) {
                fs=null;
            }
        }
        return true;
    }

    public static void main(String[] args) {

        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
                "classpath:/applicationContext.xml");
        applicationContext.getBean(GithubZipCrawler.class).run();
    }
}
