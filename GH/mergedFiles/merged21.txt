C:\Users\flori\Documents\ProiectIP_E1\GH\git\GitHubSimpleCrawler\git_hub_crawler\src\main\java\com\controller\github\MakeGitRequest.java
package com.controller.github;

import java.io.IOException;
import java.util.List;

import org.apache.commons.validator.routines.UrlValidator;
import org.kohsuke.github.GHRelease;
import org.kohsuke.github.GHRepository;
import org.kohsuke.github.GitHub;

import com.csv.reader.CSVReader;
import com.data.model.GitDAO;
import com.helper.date.DateFormatConverter;

/**
 * 
 * @desc A thread class that allow to login and parse git hub repositories.
 *
 */
public class MakeGitRequest implements Runnable {

	// Fill the strings accordingly... 
	//Access is available in two ways: via token or username and password...
	private static final String token = "";
	private static final String userLogin = "";
	private static final String userPassword = "";

	private GitHub gitHub;

	/**
	 * @desc Performs the login to github
	 * @return Boolean login
	 * @throws IOException
	 */
	private Boolean loginToGitHub() throws IOException {

		Boolean login = false;

		// Login to github...
		try {
			if (!token.isEmpty()) {
				System.out.println("Connecting using token...");
				gitHub = GitHub.connectUsingOAuth(token);
				login = true;
			} else if (!userLogin.isEmpty() && !userPassword.isEmpty()) {
				System.out.println("Connecting using username and password...");
				gitHub = GitHub.connectUsingPassword(userLogin, userPassword);
				login = true;
			} else {
				System.out.println("Connecting anonymously...");
				gitHub = GitHub.connectAnonymously();
			}
		} catch (IOException e) {
			throw new IOException("Cannot login to GitHub.");
		}

		return login;
	}

	/**
	 * @desc Validate any given URL
	 * @param url
	 * @return Boolean valid
	 */
	private Boolean validateUrl(String url) {

		Boolean valid = false;

		UrlValidator urlValidator = new UrlValidator();
		if (urlValidator.isValid(url)) {
			valid = true;
		}

		return valid;
	}

	/**
	 * @desc Extracts the params that need to be passed to the GHRepository object.
	 * @param url
	 * @return
	 */
	private String getRepoNameForAPIRequest(String url) {
		String repoName = "";

		if (!url.isEmpty()) {
			String[] tmpArray = url.split("/");

			repoName = tmpArray[3] + "/" + tmpArray[4].replace(".git", "");
		}

		return repoName;
	}

	/**
	 * @desc Format the version number if exists. Else it replaces with meaningful
	 *       text.
	 * @param releaseBody
	 * @return
	 */
	private String getRealeaseNumberFromBody(GHRelease releaseBody) {
		String releaseVersion = "";

		if (releaseBody != null) {
			releaseVersion = releaseBody.getName().replaceAll("[a-zA-Z ]", "");
		} else {
			releaseVersion = "n/a";
		}

		return releaseVersion;
	}

	/**
	 * @desc Thread run()
	 */
	public void run() {
		// Get the list of URLs...
		CSVReader reader = new CSVReader();
		List<String> dataLinks = reader.getHttpsLinksFromCsvList();

		try {
			loginToGitHub();
			// Make the http requests to git using the repositories' links from the list....
			for (String link : dataLinks) {
				if (validateUrl(link) == true) {

					// getRepoNameForAPIRequest(link);
					GHRepository repository = gitHub.getRepository(getRepoNameForAPIRequest(link));

					// Format date Object....
					DateFormatConverter dateHelper = new DateFormatConverter();

					String description = repository.getDescription();
					String appName = repository.getFullName();
					String language = repository.getLanguage();
					int numberOfIssues = repository.getOpenIssueCount();
					String createdAt = dateHelper.convertDate(repository.getCreatedAt());

					// Extract the realease version from body response
					String versionNumber = getRealeaseNumberFromBody(repository.getLatestRelease());

					String pushedAt = dateHelper.convertDate(repository.getPushedAt());
					String updatedAt = dateHelper.convertDate(repository.getUpdatedAt());
					String httpHeaders = repository.getResponseHeaderFields().toString();
					int stars = repository.getStargazersCount();
					String currentDate = dateHelper.getCurrentDate();

					// Printouts to console....
					System.out.println("");

					if (description == null) {
						description = "n/a";
					}
					System.out.println("Description: " + description);
					System.out.println("Full name: " + appName);
					System.out.println("Language: " + language);
					System.out.println("Issues Count: " + numberOfIssues);
					System.out.println("Repository URL: " + link);
					System.out.println("Version: " + versionNumber);
					System.out.println("Created on the: " + createdAt);
					System.out.println("Pushed at: " + pushedAt);
					System.out.println("Http headers: " + httpHeaders);
					System.out.println("Updated on the: " + updatedAt);
					System.out.println("No. of stars: " + stars);
					System.out.println("");

					// Insert the data in the database....
					GitDAO.insertDataIntoDb(description, appName, language, numberOfIssues, link, createdAt,
							versionNumber, pushedAt, updatedAt, stars, currentDate);

					if (loginToGitHub() == false) {
						try {
							// 1 minute sleep if anonymous login...
							Thread.sleep(60000);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		// Stop the thread...
		Thread.currentThread().interrupt();
		return;
	}
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\GitHubSimpleCrawler\git_hub_crawler\src\main\java\com\csv\reader\CSVReader.java
package com.csv.reader;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * 
 * @desc Defines the behaviours for reading a csv file and the retrieval of http
 *       links.
 *
 */
public class CSVReader {

	/**
	 * @desc Load into memory the csv file and add its content in the list.
	 * @return List<String> data
	 */
	private List<String> getDataFromCsv() {

		List<String> data = new ArrayList<String>();

		// Load csv file in memory and read it....
		// A faster approach compared to that used in BufferReader...
		// The file is not big so it can be loaded into memory....
		FileInputStream inputStream = null;
		Scanner sc = null;
		
		Path currentRelativePath = Paths.get("");
		String currentPath = currentRelativePath.toAbsolutePath().toString();

		final String csv_path = currentPath + "/";
		final String file_name = "PluginIndex.csv";
		
		try {
			try {			
				inputStream = new FileInputStream(csv_path + file_name);
			} catch (FileNotFoundException e) {
				try {
					throw new Exception("The file " + file_name + " on path " + csv_path + " has not been found.");
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}

			// we use the scanner to read the file...
			// The lines are retrieved serially... one by one....
			sc = new Scanner(inputStream, "UTF-8");
			while (sc.hasNextLine()) {
				String line = sc.nextLine();

				// Add it to the list...
				data.add(line + "\n");
			}

			if (sc.ioException() != null) {
				try {
					throw sc.ioException();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		} finally {
			if (inputStream != null) {
				try {
					// Close the input stream...
					inputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			// Close the scanner....
			if (sc != null) {
				sc.close();
			}
		}

		return data;
	}

	/**
	 * @desc Retrieves the git links from the parsed csv file.
	 * @return List<String> httpLinks
	 */
	public List<String> getHttpsLinksFromCsvList() {
		CSVReader reader = new CSVReader();
		List<String> data = reader.getDataFromCsv();
		List<String> httpLinks = new ArrayList<String>();

		for (String value : data) {
			String[] arrayString = value.split(",");
			// System.out.println(arrayString);

			for (String item : arrayString) {
				// System.out.println(item.getClass().getName());
				if (item.endsWith(".git")) {
					httpLinks.add(item);
				}
			}
		}

		return httpLinks;
	}
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\GitHubSimpleCrawler\git_hub_crawler\src\main\java\com\data\model\GitDAO.java
package com.data.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;

public class GitDAO {

	/**
	 * @desc Establishes the connection using the jdbc driver.
	 * @param database
	 * @return
	 */
	private static Connection connect(String database) {
		Connection conn = null;
		try {
			Class.forName("org.sqlite.JDBC");
			String url = "jdbc:sqlite:" + database + ".db";
			conn = DriverManager.getConnection(url);

			// create a connection to the database
			conn = DriverManager.getConnection(url);

			// System.out.println("Connection to SQLite has been established.");

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		return conn;
	}

	/**
	 * @desc Create an sqlite table.
	 */
	private static void createTable() {
		Connection conn = connect("wagtail_plugins");

		Statement stmt;

		try {
			stmt = conn.createStatement();
			String sql = "CREATE TABLE IF NOT EXISTS `plugin_details` (\n"
					+ "	`id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n" + "	`description`	TEXT,\n"
					+ "	`app_name`	TEXT,\n" + "	`language`	TEXT,\n" + "	`no_of_issues`	TEXT,\n"
					+ "	`link`	TEXT,\n" + "	`version_number`	TEXT,\n" + "	`created_at`	TEXT,\n"
					+ "	`pushed_at`	TEXT,\n" + "	`updated_at`	TEXT,\n" + "	`stars`	INTEGER,\n"
					+ "	`date`	TEXT\n" + ");";

			stmt.executeUpdate(sql);
			stmt.close();
			conn.close();

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	/**
	 * @desc Inserts the data into the database.
	 * 
	 * @param description
	 * @param appName
	 * @param language
	 * @param numberOfIssues
	 * @param link
	 * @param createdAt
	 * @param versionNumber
	 * @param pushedAt
	 * @param updatedAt
	 * @param stars
	 * @param date
	 */
	public static void insertDataIntoDb(String description, String appName, String language, int numberOfIssues,
			String link, String createdAt, String versionNumber, String pushedAt, String updatedAt, int stars,
			String date) {

		int numberOfRows;

		String sql = "INSERT INTO plugin_details(description, app_name, language, "
				+ "no_of_issues, link, created_at, version_number, pushed_at, "
				+ "updated_at, stars, date) VALUES(?,?,?,?,?,?,?,?,?,?,?)";

		try {
			createTable();

			Connection conn = connect("wagtail_plugins");
			PreparedStatement pstmt = conn.prepareStatement(sql);

			pstmt.setString(1, description);
			pstmt.setString(2, appName);
			pstmt.setString(3, language);
			pstmt.setInt(4, numberOfIssues);
			pstmt.setString(5, link);
			pstmt.setString(6, createdAt);
			pstmt.setString(7, versionNumber);
			pstmt.setString(8, pushedAt);
			pstmt.setString(9, updatedAt);
			pstmt.setInt(10, stars);
			pstmt.setString(11, date);

			numberOfRows = pstmt.executeUpdate();

			if (numberOfRows > 0) {
				System.out.println("The data has been inserted successfully into the database.");
			}

			pstmt.close();
			conn.close();

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\GitHubSimpleCrawler\git_hub_crawler\src\main\java\com\data\model\GitDataFields.java
package com.data.model;

public class GitDataFields {

	private String description;
	private String date;
	private String createdAt;
	private String pushedAt;
	private String updatedAt;
	private int numberOfIssues;
	private String versionNumber;
	private String link;
	private String language;
	private String appName;
	private int stars;

	/**
	 * @desc Empty constructor
	 */
	public GitDataFields() {

	}

	/**
	 * @desc Constructor
	 * 
	 * @param description
	 * @param appName
	 * @param language
	 * @param numberOfIssues
	 * @param link
	 * @param createdAt
	 * @param versionNumber
	 * @param pushedAt
	 * @param updatedAt
	 * @param stars
	 * @param gitId
	 * @param date
	 */
	public GitDataFields(String description, String appName, String language, int numberOfIssues, String link,
			String createdAt, String versionNumber, String pushedAt, String updatedAt, int stars, String date) {
		this.description = description;
		this.appName = appName;
		this.language = language;
		this.numberOfIssues = numberOfIssues;
		this.link = link;
		this.createdAt = createdAt;
		this.versionNumber = versionNumber;
		this.pushedAt = pushedAt;
		this.updatedAt = updatedAt;
		this.stars = stars;
		this.date = date;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}

	public String getCreatedAt() {
		return createdAt;
	}

	public void setCreatedAt(String createdAt) {
		this.createdAt = createdAt;
	}

	public String getPushedAt() {
		return pushedAt;
	}

	public void setPushedAt(String pushedAt) {
		this.pushedAt = pushedAt;
	}

	public String getUpdatedAt() {
		return updatedAt;
	}

	public void setUpdatedAt(String updatedAt) {
		this.updatedAt = updatedAt;
	}

	public int getNumberOfIssues() {
		return numberOfIssues;
	}

	public void setNumberOfIssues(int numberOfIssues) {
		this.numberOfIssues = numberOfIssues;
	}

	public String getLink() {
		return link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	public String getVersionNumber() {
		return versionNumber;
	}

	public void setVersionNumber(String versionNumber) {
		this.versionNumber = versionNumber;
	}

	public String getLanguage() {
		return language;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	public String getAppName() {
		return appName;
	}

	public void setAppName(String appName) {
		this.appName = appName;
	}

	public int getStars() {
		return stars;
	}

	public void setStars(int stars) {
		this.stars = stars;
	}
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\GitHubSimpleCrawler\git_hub_crawler\src\main\java\com\helper\date\DateFormatConverter.java
package com.helper.date;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * 
 * @desc Simple helper class that defines two methods: The first one to retrieve
 *       the current date The second one to convert a Date object retrieved with
 *       the API into the desired format.
 *
 */
public class DateFormatConverter {

	/**
	 * @desc Get the current date.
	 * @return
	 */
	public String getCurrentDate() {
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm");
		Date date = new Date();

		return dateFormat.format(date);
	}

	/**
	 * 
	 * @param date
	 * @return Date object
	 */
	public String convertDate(Date date) {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");

		return formatter.format(date);
	}
}
C:\Users\flori\Documents\ProiectIP_E1\GH\git\GitHubSimpleCrawler\git_hub_crawler\src\main\java\com\run\app\RunApp.java
package com.run.app;

import com.controller.github.MakeGitRequest;

public class RunApp {
	public static void main(String[] args) {

		// Start the thread for the http request...
		(new Thread(new MakeGitRequest())).start();
	}
}
